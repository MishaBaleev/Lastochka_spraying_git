{"ast":null,"code":"import takeoff_marker from \"./img/takeoff_marker.png\";\nimport point_marker from \"./img/point_marker.png\";\nimport icon_center from \"./img/icon_center.png\";\nimport mapboxgl from 'mapbox-gl';\nfunction rotateFigureCenter(cords, center, phi) {\n  phi = phi * Math.PI / 180;\n  let rotatedFigure = [];\n  for (let pair of cords) {\n    let x = pair[0] - center[0];\n    let y = pair[1] - center[1];\n    let x_rot = x * Math.cos(phi) - y * Math.sin(phi);\n    let y_rot = x * Math.sin(phi) + y * Math.cos(phi);\n    rotatedFigure.push([x_rot + center[0], y_rot + center[1]]);\n  }\n  return rotatedFigure;\n}\nfunction addTurnaroundDistance(cords, distance, direction) {\n  let turnaround_distance_y = getGeoCordsFromMeters(distance, cords[1]);\n  let cortej = [];\n  if (direction == true) {\n    cortej = [cords[0], cords[1] + turnaround_distance_y];\n  } else {\n    cortej = [cords[0], cords[1] - turnaround_distance_y];\n  }\n  return cortej;\n}\nfunction getProjective(cords) {\n  let x = cords.map(x => x[0]);\n  let y = cords.map(x => x[1]);\n  let x_projection = {\n    min: 0,\n    max: 0,\n    pr: 0\n  };\n  let y_projection = {\n    min: 0,\n    max: 0,\n    pr: 0\n  };\n  x_projection.min = Math.min(...x);\n  x_projection.max = Math.max(...x);\n  x_projection.pr = x_projection.max - x_projection.min;\n  y_projection.min = Math.min(...y);\n  y_projection.max = Math.max(...y);\n  y_projection.pr = y_projection.max - y_projection.min;\n  return {\n    x_pr: x_projection,\n    y_pr: y_projection\n  };\n}\nfunction getGeoCordsFromMeters(m, min_lng) {\n  let step = m / 1000;\n  const km_ekv = 40075.696 / 360;\n  let step_deg = step / (km_ekv * Math.cos(Math.PI * min_lng / 180));\n  return step_deg;\n}\nexport class CommonManager {\n  constructor(map, manager3D, update_modal_message) {\n    this.map = map;\n    this.manager3D = manager3D;\n    this.translate_cursor = false;\n    this.start_marker = null;\n    this.update_modal_message = update_modal_message;\n    this.polygon = null;\n    this.params = {\n      angle: {\n        value: 0\n      },\n      line_distance: {\n        value: 2\n      },\n      turnaround_distance: {\n        value: 3\n      }\n    };\n    this.conture = {\n      markers: [],\n      cords: [],\n      edges: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'Polygon',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer_area: {\n        'id': \"conture\",\n        'type': 'fill',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'fill-color': '#008000',\n          'fill-opacity': 0.5\n        }\n      },\n      layer_line: {\n        'id': 'line_conture',\n        'type': 'line',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'line-color': '#000',\n          'line-width': 2\n        }\n      }\n    };\n    this.markup = {\n      cords: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer: {\n        'id': \"markup\",\n        'type': 'line',\n        'source': \"markup\",\n        'layout': {},\n        'paint': {\n          'line-color': '#fff',\n          'line-width': 2\n        }\n      }\n    };\n  }\n  toggleCursor() {\n    if (this.translate_cursor === true) {\n      this.translate_cursor = false;\n    } else {\n      this.translate_cursor = true;\n    }\n  }\n  setStartMarker(coords) {\n    if (this.start_marker === null) {\n      this.start_marker = new mapboxgl.Marker({\n        draggable: true\n      }).setLngLat(coords).addTo(this.map);\n      let icon = document.createElement('img');\n      icon.src = takeoff_marker;\n      icon.width = 35;\n      icon.height = 35;\n      this.start_marker.getElement().querySelector(\"svg\").remove();\n      this.start_marker.getElement().append(icon);\n      let indicator = document.createElement('span');\n      indicator.className = \"mapbox_gl_active_indicator\";\n      this.start_marker.getElement().append(indicator);\n      this.start_marker.getElement().classList.add(\"takeoff\");\n    } else {\n      this.start_marker.remove();\n      this.start_marker = null;\n      this.setStartMarker(coords);\n    }\n  }\n  changeMarkerIcon(marker, Icon, width, height) {\n    let icon = document.createElement('img');\n    icon.src = Icon;\n    icon.width = width;\n    icon.height = height;\n    marker.getElement().classList.add(\"mapboxgl-marker__polygon\");\n    marker.getElement().querySelector(\"svg\").remove();\n    marker.getElement().append(icon);\n    let indicator = document.createElement('span');\n    indicator.className = \"mapbox_gl_active_indicator\";\n    marker.getElement().append(indicator);\n  }\n  rotate(cords, factor) {\n    let centerCords = this.center_marker.getLngLat();\n    centerCords = [centerCords.lng, centerCords.lat];\n    let rotated_cords = rotateFigureCenter(cords, centerCords, factor * this.params.angle.value);\n    return rotated_cords;\n  }\n  markupPolygon() {\n    let edges = [];\n    let cords_markup = this.rotate(this.conture.cords, 1);\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      edges.push([cords_markup[c], cords_markup[c + 1]]);\n    }\n    let pr = getProjective(cords_markup);\n    let step = getGeoCordsFromMeters(this.params.line_distance.value, pr.y_pr.min);\n    let steps = Math.trunc(pr.x_pr.pr / step);\n    let cords = [];\n    for (let i = 0; i < steps; i++) {\n      let x_0 = pr.x_pr.min + step * (i + 1);\n      let crossings = [];\n      let low = [1000, null];\n      let high = [-1000, null];\n      for (let j = 0; j < edges.length; j++) {\n        let A = edges[j][0];\n        let B = edges[j][1];\n        let y = (B[1] - A[1]) * (x_0 - B[0]) / (B[0] - A[0]) + B[1];\n        let min_y = Math.min(A[1], B[1]);\n        let max_y = Math.max(A[1], B[1]);\n        if (y > min_y && y < max_y) {\n          if (y > high[0]) {\n            high[0] = y;\n            high[1] = [x_0, y];\n          } else if (y < low[0]) {\n            low[0] = y;\n            low[1] = [x_0, y];\n          }\n          crossings.push([x_0, y]);\n        }\n      }\n      crossings = crossings.sort(function (a, b) {\n        return a[1] - b[1];\n      });\n      low[1] = crossings[0];\n      high[1] = crossings[crossings.length - 1];\n      low[1] = addTurnaroundDistance(low[1], this.params.turnaround_distance.value, false);\n      high[1] = addTurnaroundDistance(high[1], this.params.turnaround_distance.value, true);\n      if ((cords.length + 2) % 4 == 0) {\n        cords.push(low[1]);\n        cords.push(high[1]);\n      } else {\n        cords.push(high[1]);\n        cords.push(low[1]);\n      }\n    }\n    cords = this.rotate(cords, -1);\n    if (cords.length == 0) {\n      return this.conture.cords;\n    } else {\n      return cords;\n    }\n  }\n  addConturePoint(coords) {\n    let cords = coords;\n    let marker = new mapboxgl.Marker({\n      draggable: true\n    }).setLngLat(cords).addTo(this.map);\n    marker.conture_index = this.conture.markers.length;\n    this.conture.markers.push(marker);\n    // let dragContainer = (e) => {e.mapElement = this; e.marker = marker; e.evt = evt; this.drag(e)}\n    // let dragEndContainer = (e) => {e.evt = evt; this.dragEndCont(e)}\n    // let dragStartContainer = (e) => {e.evt = evt; this.dragStartCont(e)}\n    // marker.on(\"drag\", dragContainer)\n    // marker.on(\"dragend\", dragEndContainer)\n    // marker.on(\"dragstart\", dragStartContainer)\n    this.changeMarkerIcon(marker, point_marker, 35, 35);\n    if (this.conture.markers.length == 1) {\n      this.conture.cords.push(cords);\n      this.conture.cords.push(cords);\n      this.conture.source.data.geometry.coordinates = [this.conture.cords];\n      this.map.addSource(\"conture\", this.conture.source);\n      this.map.addLayer(this.conture.layer_area);\n      this.map.addLayer(this.conture.layer_line);\n    }\n    if (this.conture.markers.length > 1) {\n      this.conture.cords.pop();\n      this.conture.cords.push(cords);\n      this.conture.cords.push(this.conture.cords[0]);\n      this.conture.source.data.geometry.coordinates = [this.conture.cords];\n      this.map.getSource(\"conture\").setData(this.conture.source.data);\n    }\n    if (this.conture.markers.length == 3) {\n      this.center_marker = new mapboxgl.Marker({\n        draggable: true\n      });\n      this.changeMarkerIcon(this.center_marker, icon_center, 25, 25);\n      let cords = [0, 0];\n      for (let c = 0; c < this.conture.cords.length - 1; c++) {\n        cords[0] += this.conture.cords[c][0];\n        cords[1] += this.conture.cords[c][1];\n      }\n      cords = [cords[0] / (this.conture.cords.length - 1), cords[1] / (this.conture.cords.length - 1)];\n      this.center_marker.setLngLat(cords).addTo(this.map);\n      this.container__dragStartCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragStartCenterMarker(e);\n      };\n      this.container__dragCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragCenterMarker(e);\n      };\n      this.container__dragEndStartCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragEndStartCenterMarker(e);\n      };\n      this.center_marker.on(\"dragstart\", this.container__dragStartCenterMarker);\n      this.center_marker.on(\"drag\", this.container__dragCenterMarker);\n      this.center_marker.on(\"dragend\", this.container__dragEndStartCenterMarker);\n      let cords_markup = this.markupPolygon();\n      this.markup.cords = cords_markup;\n      this.markup.source.data.geometry.coordinates = this.markup.cords;\n      this.map.addSource(\"markup\", this.markup.source);\n      this.start_point = new mapboxgl.Marker({\n        draggable: false\n      });\n      this.end_point = new mapboxgl.Marker({\n        draggable: false\n      });\n      this.start_point.setLngLat(this.markup.cords[0]).addTo(this.map);\n      this.end_point.setLngLat(this.markup.cords[this.markup.cords.length - 1]).addTo(this.map);\n      this.changePointIcon(this.start_point, point_marker, 35, 35);\n      this.changePointIcon(this.end_point, point_marker, 35, 35);\n    }\n  }\n  setPolygon(coords) {\n    if (this.start_marker === null) {\n      this.update_modal_message({\n        active: true,\n        heading: \"Ошибка\",\n        message: \"Сначала добавьте точку старта\"\n      });\n    } else {\n      this.addConturePoint(coords);\n    }\n  }\n}","map":{"version":3,"names":["takeoff_marker","point_marker","icon_center","mapboxgl","rotateFigureCenter","cords","center","phi","Math","PI","rotatedFigure","pair","x","y","x_rot","cos","sin","y_rot","push","addTurnaroundDistance","distance","direction","turnaround_distance_y","getGeoCordsFromMeters","cortej","getProjective","map","x_projection","min","max","pr","y_projection","x_pr","y_pr","m","min_lng","step","km_ekv","step_deg","CommonManager","constructor","manager3D","update_modal_message","translate_cursor","start_marker","polygon","params","angle","value","line_distance","turnaround_distance","conture","markers","edges","source","layer_area","layer_line","markup","layer","toggleCursor","setStartMarker","coords","Marker","draggable","setLngLat","addTo","icon","document","createElement","src","width","height","getElement","querySelector","remove","append","indicator","className","classList","add","changeMarkerIcon","marker","Icon","rotate","factor","centerCords","center_marker","getLngLat","lng","lat","rotated_cords","markupPolygon","cords_markup","c","length","steps","trunc","i","x_0","crossings","low","high","j","A","B","min_y","max_y","sort","a","b","addConturePoint","conture_index","data","geometry","coordinates","addSource","addLayer","pop","getSource","setData","container__dragStartCenterMarker","e","mapElement","evt","dragStartCenterMarker","container__dragCenterMarker","dragCenterMarker","container__dragEndStartCenterMarker","dragEndStartCenterMarker","on","start_point","end_point","changePointIcon","setPolygon","active","heading","message"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/src/Spraying/CommonManager.js"],"sourcesContent":["import takeoff_marker from \"./img/takeoff_marker.png\";\nimport point_marker from \"./img/point_marker.png\";\nimport icon_center from \"./img/icon_center.png\";\nimport mapboxgl from 'mapbox-gl';\n\nfunction rotateFigureCenter(cords, center, phi){\n    phi = phi*Math.PI/180\n    let rotatedFigure = []\n  \n    for(let pair of cords){\n        let x = pair[0]-center[0]\n        let y = pair[1]-center[1]\n        let x_rot = x*Math.cos(phi) - y*Math.sin(phi)\n        let y_rot = x*Math.sin(phi) + y*Math.cos(phi)\n        rotatedFigure.push([\n          x_rot+center[0], y_rot+center[1]\n        ])\n    }\n    return rotatedFigure\n}\n\nfunction addTurnaroundDistance(cords, distance, direction){\n    let turnaround_distance_y = getGeoCordsFromMeters(distance, cords[1])\n  \n    let cortej = []\n  \n    if(direction == true){\n      cortej = [cords[0], cords[1]+turnaround_distance_y]\n    }\n    else{\n      cortej = [cords[0], cords[1]-turnaround_distance_y]\n    }\n    return cortej\n}\n\nfunction getProjective(cords){\n    let x = cords.map(x=>x[0])\n    let y = cords.map(x=>x[1])\n  \n    let x_projection = {\n        min:0,\n        max:0,\n        pr:0\n    }\n    let y_projection = {\n        min:0,\n        max:0,\n        pr:0\n    }\n  \n    x_projection.min = Math.min(...x)\n    x_projection.max = Math.max(...x)\n    x_projection.pr = x_projection.max - x_projection.min\n    \n    y_projection.min = Math.min(...y)\n    y_projection.max = Math.max(...y)\n    y_projection.pr = y_projection.max - y_projection.min\n  \n    return {x_pr:x_projection, y_pr:y_projection}\n}\n\nfunction getGeoCordsFromMeters(m, min_lng){\n    let step = m/1000\n    const km_ekv = 40075.696/360\n    let step_deg = step/(km_ekv*Math.cos(Math.PI*min_lng/180))\n    return step_deg\n}\n\nexport class CommonManager{\n    constructor(map, manager3D, update_modal_message){\n        this.map = map \n        this.manager3D = manager3D\n        this.translate_cursor = false \n        this.start_marker = null\n        this.update_modal_message = update_modal_message\n        this.polygon = null\n        this.params = {\n            angle: {value: 0},\n            line_distance: {value: 2},\n            turnaround_distance: {value: 3}\n        }\n        this.conture = {\n            markers:[],\n            cords:[],\n            edges:[],\n            source:{\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'geometry': {\n                'type': 'Polygon',\n                'coordinates': [\n                    []\n                  ]\n                }\n              }\n            },\n            layer_area:{\n              'id': \"conture\",\n              'type': 'fill',\n              'source': \"conture\",\n              'layout': {},\n              'paint': {\n                'fill-color': '#008000',\n                'fill-opacity': 0.5\n                }\n            },\n            layer_line:{\n                'id': 'line_conture',\n                'type': 'line',\n                'source': \"conture\",\n                'layout': {},\n                'paint': {\n                'line-color': '#000',\n                'line-width': 2\n                }\n            }\n        }\n          this.markup = {\n            cords:[],\n            source:{\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'geometry': {\n                'type': 'LineString',\n                'coordinates': [\n                    []\n                  ]\n                }\n              }\n            },\n            layer:{\n              'id': \"markup\",\n              'type': 'line',\n              'source': \"markup\",\n              'layout': {},\n              'paint': {\n              'line-color': '#fff',\n              'line-width': 2\n              }\n            }\n        };\n    }\n\n    toggleCursor(){\n        if (this.translate_cursor === true){\n            this.translate_cursor = false \n        }else{\n            this.translate_cursor = true\n        }\n    }\n\n    setStartMarker(coords){\n        if (this.start_marker === null){\n            this.start_marker = new mapboxgl.Marker(\n                {\n                    draggable: true\n                }\n            ).setLngLat(coords).addTo(this.map)\n            let icon = document.createElement('img');\n            icon.src = takeoff_marker;\n            icon.width = 35\n            icon.height = 35\n            this.start_marker.getElement().querySelector(\"svg\").remove()\n            this.start_marker.getElement().append(icon)\n            let indicator = document.createElement('span');\n            indicator.className = \"mapbox_gl_active_indicator\"\n            this.start_marker.getElement().append(indicator)\n            this.start_marker.getElement().classList.add(\"takeoff\")\n        }else{\n            this.start_marker.remove()\n            this.start_marker = null\n            this.setStartMarker(coords)\n        }\n    }\n\n    changeMarkerIcon(marker, Icon, width, height) {\n        let icon = document.createElement('img');\n        icon.src = Icon;\n        icon.width = width\n        icon.height = height\n        marker.getElement().classList.add(\"mapboxgl-marker__polygon\")\n        marker.getElement().querySelector(\"svg\").remove()\n        marker.getElement().append(icon)\n    \n        let indicator = document.createElement('span');\n        indicator.className = \"mapbox_gl_active_indicator\"\n        marker.getElement().append(indicator)\n    }\n\n    rotate(cords, factor){\n        let centerCords = this.center_marker.getLngLat()\n        centerCords = [centerCords.lng, centerCords.lat]\n        let rotated_cords = rotateFigureCenter(cords, centerCords, factor*this.params.angle.value)\n        return rotated_cords\n    }\n\n    markupPolygon(){\n        let edges = []\n        let cords_markup = this.rotate(this.conture.cords, 1)\n        for(let c = 0; c < this.conture.cords.length-1; c++){\n          edges.push([cords_markup[c], cords_markup[c+1]])\n        }\n        let pr = getProjective(cords_markup)\n        let step = getGeoCordsFromMeters(this.params.line_distance.value, pr.y_pr.min)\n        let steps = Math.trunc(pr.x_pr.pr/step)\n        let cords = []\n        for(let i = 0; i < steps; i++){\n            let x_0 = pr.x_pr.min+step*(i+1)\n            let crossings = []\n            let low = [1000, null];\n            let high = [-1000, null];\n            for(let j = 0; j < edges.length; j++){\n                let A = edges[j][0]\n                let B = edges[j][1]\n                let y = (B[1]-A[1])*(x_0-B[0])/(B[0]-A[0])+B[1]\n                let min_y = Math.min(A[1],B[1])\n                let max_y = Math.max(A[1],B[1])\n                if(y>min_y && y< max_y){\n                  if(y>high[0]){\n                    high[0] = y\n                    high[1] = [x_0, y]\n                  }\n                  else if(y<low[0]){\n                    low[0] = y\n                    low[1] = [x_0, y]\n                  }\n                  crossings.push([x_0, y])\n                }\n            }\n            crossings = crossings.sort(function(a, b){return a[1]-b[1]})\n    \n            low[1] = crossings[0]\n            high[1] = crossings[crossings.length-1]\n    \n            low[1] = addTurnaroundDistance(low[1], this.params.turnaround_distance.value, false)\n            high[1] = addTurnaroundDistance(high[1], this.params.turnaround_distance.value, true)\n            if((cords.length+2)%4 == 0){\n              cords.push(low[1])\n              cords.push(high[1])\n            }\n            else{\n              cords.push(high[1])\n              cords.push(low[1])\n            }\n        }\n        cords = this.rotate(cords, -1)\n        if (cords.length == 0){\n          return this.conture.cords\n        }else{\n          return cords\n        }\n    }\n\n    addConturePoint(coords){\n        let cords = coords;\n        let marker = new mapboxgl.Marker(\n            {\n                draggable: true\n            }\n        ).setLngLat(cords).addTo(this.map);\n        marker.conture_index = this.conture.markers.length;\n        this.conture.markers.push(marker)\n        // let dragContainer = (e) => {e.mapElement = this; e.marker = marker; e.evt = evt; this.drag(e)}\n        // let dragEndContainer = (e) => {e.evt = evt; this.dragEndCont(e)}\n        // let dragStartContainer = (e) => {e.evt = evt; this.dragStartCont(e)}\n        // marker.on(\"drag\", dragContainer)\n        // marker.on(\"dragend\", dragEndContainer)\n        // marker.on(\"dragstart\", dragStartContainer)\n        this.changeMarkerIcon(marker, point_marker, 35, 35)\n        if(this.conture.markers.length == 1){\n          this.conture.cords.push(cords)\n          this.conture.cords.push(cords)\n          this.conture.source.data.geometry.coordinates = [this.conture.cords]\n          this.map.addSource(\"conture\", this.conture.source)\n          this.map.addLayer(this.conture.layer_area)\n          this.map.addLayer(this.conture.layer_line)\n        }\n        if(this.conture.markers.length > 1){\n          this.conture.cords.pop()\n          this.conture.cords.push(cords)\n          this.conture.cords.push(this.conture.cords[0])\n          this.conture.source.data.geometry.coordinates = [this.conture.cords]\n          this.map.getSource(\"conture\").setData(this.conture.source.data)\n        }\n        if(this.conture.markers.length == 3){\n          this.center_marker = new mapboxgl.Marker({\n            draggable:true\n          })\n          this.changeMarkerIcon(this.center_marker, icon_center, 25, 25)\n          let cords = [0,0]\n          for(let c = 0; c < this.conture.cords.length-1; c++){\n            cords[0] += this.conture.cords[c][0]\n            cords[1] += this.conture.cords[c][1]\n          }\n          cords = [cords[0]/(this.conture.cords.length-1), cords[1]/(this.conture.cords.length-1)]\n          this.center_marker.setLngLat(cords).addTo(this.map);\n    \n          this.container__dragStartCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragStartCenterMarker(e)}\n          this.container__dragCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragCenterMarker(e)}\n          this.container__dragEndStartCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragEndStartCenterMarker(e)}\n      \n          this.center_marker.on(\"dragstart\", this.container__dragStartCenterMarker)\n          this.center_marker.on(\"drag\", this.container__dragCenterMarker)\n          this.center_marker.on(\"dragend\", this.container__dragEndStartCenterMarker)\n          let cords_markup = this.markupPolygon()\n          this.markup.cords = cords_markup\n          this.markup.source.data.geometry.coordinates = this.markup.cords\n          this.map.addSource(\"markup\", this.markup.source)\n          this.start_point = new mapboxgl.Marker({\n            draggable:false\n          })\n          this.end_point = new mapboxgl.Marker({\n            draggable:false\n          })\n          \n          this.start_point.setLngLat(this.markup.cords[0]).addTo(this.map)\n          this.end_point.setLngLat(this.markup.cords[this.markup.cords.length-1]).addTo(this.map)\n          \n          this.changePointIcon(this.start_point, point_marker, 35, 35)\n          this.changePointIcon(this.end_point, point_marker, 35, 35)\n        }\n    }\n\n    setPolygon(coords){\n        if (this.start_marker === null){\n            this.update_modal_message({active: true, heading: \"Ошибка\", message: \"Сначала добавьте точку старта\"})\n        }else{\n            this.addConturePoint(coords)\n        }\n    }\n}"],"mappings":"AAAA,OAAOA,cAAc,MAAM,0BAA0B;AACrD,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,QAAQ,MAAM,WAAW;AAEhC,SAASC,kBAAkBA,CAACC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAC;EAC3CA,GAAG,GAAGA,GAAG,GAACC,IAAI,CAACC,EAAE,GAAC,GAAG;EACrB,IAAIC,aAAa,GAAG,EAAE;EAEtB,KAAI,IAAIC,IAAI,IAAIN,KAAK,EAAC;IAClB,IAAIO,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,GAACL,MAAM,CAAC,CAAC,CAAC;IACzB,IAAIO,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAACL,MAAM,CAAC,CAAC,CAAC;IACzB,IAAIQ,KAAK,GAAGF,CAAC,GAACJ,IAAI,CAACO,GAAG,CAACR,GAAG,CAAC,GAAGM,CAAC,GAACL,IAAI,CAACQ,GAAG,CAACT,GAAG,CAAC;IAC7C,IAAIU,KAAK,GAAGL,CAAC,GAACJ,IAAI,CAACQ,GAAG,CAACT,GAAG,CAAC,GAAGM,CAAC,GAACL,IAAI,CAACO,GAAG,CAACR,GAAG,CAAC;IAC7CG,aAAa,CAACQ,IAAI,CAAC,CACjBJ,KAAK,GAACR,MAAM,CAAC,CAAC,CAAC,EAAEW,KAAK,GAACX,MAAM,CAAC,CAAC,CAAC,CACjC,CAAC;EACN;EACA,OAAOI,aAAa;AACxB;AAEA,SAASS,qBAAqBA,CAACd,KAAK,EAAEe,QAAQ,EAAEC,SAAS,EAAC;EACtD,IAAIC,qBAAqB,GAAGC,qBAAqB,CAACH,QAAQ,EAAEf,KAAK,CAAC,CAAC,CAAC,CAAC;EAErE,IAAImB,MAAM,GAAG,EAAE;EAEf,IAAGH,SAAS,IAAI,IAAI,EAAC;IACnBG,MAAM,GAAG,CAACnB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,GAACiB,qBAAqB,CAAC;EACrD,CAAC,MACG;IACFE,MAAM,GAAG,CAACnB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,GAACiB,qBAAqB,CAAC;EACrD;EACA,OAAOE,MAAM;AACjB;AAEA,SAASC,aAAaA,CAACpB,KAAK,EAAC;EACzB,IAAIO,CAAC,GAAGP,KAAK,CAACqB,GAAG,CAACd,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B,IAAIC,CAAC,GAAGR,KAAK,CAACqB,GAAG,CAACd,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;EAE1B,IAAIe,YAAY,GAAG;IACfC,GAAG,EAAC,CAAC;IACLC,GAAG,EAAC,CAAC;IACLC,EAAE,EAAC;EACP,CAAC;EACD,IAAIC,YAAY,GAAG;IACfH,GAAG,EAAC,CAAC;IACLC,GAAG,EAAC,CAAC;IACLC,EAAE,EAAC;EACP,CAAC;EAEDH,YAAY,CAACC,GAAG,GAAGpB,IAAI,CAACoB,GAAG,CAAC,GAAGhB,CAAC,CAAC;EACjCe,YAAY,CAACE,GAAG,GAAGrB,IAAI,CAACqB,GAAG,CAAC,GAAGjB,CAAC,CAAC;EACjCe,YAAY,CAACG,EAAE,GAAGH,YAAY,CAACE,GAAG,GAAGF,YAAY,CAACC,GAAG;EAErDG,YAAY,CAACH,GAAG,GAAGpB,IAAI,CAACoB,GAAG,CAAC,GAAGf,CAAC,CAAC;EACjCkB,YAAY,CAACF,GAAG,GAAGrB,IAAI,CAACqB,GAAG,CAAC,GAAGhB,CAAC,CAAC;EACjCkB,YAAY,CAACD,EAAE,GAAGC,YAAY,CAACF,GAAG,GAAGE,YAAY,CAACH,GAAG;EAErD,OAAO;IAACI,IAAI,EAACL,YAAY;IAAEM,IAAI,EAACF;EAAY,CAAC;AACjD;AAEA,SAASR,qBAAqBA,CAACW,CAAC,EAAEC,OAAO,EAAC;EACtC,IAAIC,IAAI,GAAGF,CAAC,GAAC,IAAI;EACjB,MAAMG,MAAM,GAAG,SAAS,GAAC,GAAG;EAC5B,IAAIC,QAAQ,GAAGF,IAAI,IAAEC,MAAM,GAAC7B,IAAI,CAACO,GAAG,CAACP,IAAI,CAACC,EAAE,GAAC0B,OAAO,GAAC,GAAG,CAAC,CAAC;EAC1D,OAAOG,QAAQ;AACnB;AAEA,OAAO,MAAMC,aAAa;EACtBC,WAAWA,CAACd,GAAG,EAAEe,SAAS,EAAEC,oBAAoB,EAAC;IAC7C,IAAI,CAAChB,GAAG,GAAGA,GAAG;IACd,IAAI,CAACe,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACF,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACG,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,MAAM,GAAG;MACVC,KAAK,EAAE;QAACC,KAAK,EAAE;MAAC,CAAC;MACjBC,aAAa,EAAE;QAACD,KAAK,EAAE;MAAC,CAAC;MACzBE,mBAAmB,EAAE;QAACF,KAAK,EAAE;MAAC;IAClC,CAAC;IACD,IAAI,CAACG,OAAO,GAAG;MACXC,OAAO,EAAC,EAAE;MACV/C,KAAK,EAAC,EAAE;MACRgD,KAAK,EAAC,EAAE;MACRC,MAAM,EAAC;QACL,MAAM,EAAE,SAAS;QACjB,MAAM,EAAE;UACN,MAAM,EAAE,SAAS;UACjB,UAAU,EAAE;YACZ,MAAM,EAAE,SAAS;YACjB,aAAa,EAAE,CACX,EAAE;UAEN;QACF;MACF,CAAC;MACDC,UAAU,EAAC;QACT,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,CAAC,CAAC;QACZ,OAAO,EAAE;UACP,YAAY,EAAE,SAAS;UACvB,cAAc,EAAE;QAChB;MACJ,CAAC;MACDC,UAAU,EAAC;QACP,IAAI,EAAE,cAAc;QACpB,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,CAAC,CAAC;QACZ,OAAO,EAAE;UACT,YAAY,EAAE,MAAM;UACpB,YAAY,EAAE;QACd;MACJ;IACJ,CAAC;IACC,IAAI,CAACC,MAAM,GAAG;MACZpD,KAAK,EAAC,EAAE;MACRiD,MAAM,EAAC;QACL,MAAM,EAAE,SAAS;QACjB,MAAM,EAAE;UACN,MAAM,EAAE,SAAS;UACjB,UAAU,EAAE;YACZ,MAAM,EAAE,YAAY;YACpB,aAAa,EAAE,CACX,EAAE;UAEN;QACF;MACF,CAAC;MACDI,KAAK,EAAC;QACJ,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,CAAC,CAAC;QACZ,OAAO,EAAE;UACT,YAAY,EAAE,MAAM;UACpB,YAAY,EAAE;QACd;MACF;IACJ,CAAC;EACL;EAEAC,YAAYA,CAAA,EAAE;IACV,IAAI,IAAI,CAAChB,gBAAgB,KAAK,IAAI,EAAC;MAC/B,IAAI,CAACA,gBAAgB,GAAG,KAAK;IACjC,CAAC,MAAI;MACD,IAAI,CAACA,gBAAgB,GAAG,IAAI;IAChC;EACJ;EAEAiB,cAAcA,CAACC,MAAM,EAAC;IAClB,IAAI,IAAI,CAACjB,YAAY,KAAK,IAAI,EAAC;MAC3B,IAAI,CAACA,YAAY,GAAG,IAAIzC,QAAQ,CAAC2D,MAAM,CACnC;QACIC,SAAS,EAAE;MACf,CACJ,CAAC,CAACC,SAAS,CAACH,MAAM,CAAC,CAACI,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;MACnC,IAAIwC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACxCF,IAAI,CAACG,GAAG,GAAGrE,cAAc;MACzBkE,IAAI,CAACI,KAAK,GAAG,EAAE;MACfJ,IAAI,CAACK,MAAM,GAAG,EAAE;MAChB,IAAI,CAAC3B,YAAY,CAAC4B,UAAU,CAAC,CAAC,CAACC,aAAa,CAAC,KAAK,CAAC,CAACC,MAAM,CAAC,CAAC;MAC5D,IAAI,CAAC9B,YAAY,CAAC4B,UAAU,CAAC,CAAC,CAACG,MAAM,CAACT,IAAI,CAAC;MAC3C,IAAIU,SAAS,GAAGT,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAC9CQ,SAAS,CAACC,SAAS,GAAG,4BAA4B;MAClD,IAAI,CAACjC,YAAY,CAAC4B,UAAU,CAAC,CAAC,CAACG,MAAM,CAACC,SAAS,CAAC;MAChD,IAAI,CAAChC,YAAY,CAAC4B,UAAU,CAAC,CAAC,CAACM,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;IAC3D,CAAC,MAAI;MACD,IAAI,CAACnC,YAAY,CAAC8B,MAAM,CAAC,CAAC;MAC1B,IAAI,CAAC9B,YAAY,GAAG,IAAI;MACxB,IAAI,CAACgB,cAAc,CAACC,MAAM,CAAC;IAC/B;EACJ;EAEAmB,gBAAgBA,CAACC,MAAM,EAAEC,IAAI,EAAEZ,KAAK,EAAEC,MAAM,EAAE;IAC1C,IAAIL,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACxCF,IAAI,CAACG,GAAG,GAAGa,IAAI;IACfhB,IAAI,CAACI,KAAK,GAAGA,KAAK;IAClBJ,IAAI,CAACK,MAAM,GAAGA,MAAM;IACpBU,MAAM,CAACT,UAAU,CAAC,CAAC,CAACM,SAAS,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAC7DE,MAAM,CAACT,UAAU,CAAC,CAAC,CAACC,aAAa,CAAC,KAAK,CAAC,CAACC,MAAM,CAAC,CAAC;IACjDO,MAAM,CAACT,UAAU,CAAC,CAAC,CAACG,MAAM,CAACT,IAAI,CAAC;IAEhC,IAAIU,SAAS,GAAGT,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAC9CQ,SAAS,CAACC,SAAS,GAAG,4BAA4B;IAClDI,MAAM,CAACT,UAAU,CAAC,CAAC,CAACG,MAAM,CAACC,SAAS,CAAC;EACzC;EAEAO,MAAMA,CAAC9E,KAAK,EAAE+E,MAAM,EAAC;IACjB,IAAIC,WAAW,GAAG,IAAI,CAACC,aAAa,CAACC,SAAS,CAAC,CAAC;IAChDF,WAAW,GAAG,CAACA,WAAW,CAACG,GAAG,EAAEH,WAAW,CAACI,GAAG,CAAC;IAChD,IAAIC,aAAa,GAAGtF,kBAAkB,CAACC,KAAK,EAAEgF,WAAW,EAAED,MAAM,GAAC,IAAI,CAACtC,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC;IAC1F,OAAO0C,aAAa;EACxB;EAEAC,aAAaA,CAAA,EAAE;IACX,IAAItC,KAAK,GAAG,EAAE;IACd,IAAIuC,YAAY,GAAG,IAAI,CAACT,MAAM,CAAC,IAAI,CAAChC,OAAO,CAAC9C,KAAK,EAAE,CAAC,CAAC;IACrD,KAAI,IAAIwF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC1C,OAAO,CAAC9C,KAAK,CAACyF,MAAM,GAAC,CAAC,EAAED,CAAC,EAAE,EAAC;MAClDxC,KAAK,CAACnC,IAAI,CAAC,CAAC0E,YAAY,CAACC,CAAC,CAAC,EAAED,YAAY,CAACC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;IAClD;IACA,IAAI/D,EAAE,GAAGL,aAAa,CAACmE,YAAY,CAAC;IACpC,IAAIxD,IAAI,GAAGb,qBAAqB,CAAC,IAAI,CAACuB,MAAM,CAACG,aAAa,CAACD,KAAK,EAAElB,EAAE,CAACG,IAAI,CAACL,GAAG,CAAC;IAC9E,IAAImE,KAAK,GAAGvF,IAAI,CAACwF,KAAK,CAAClE,EAAE,CAACE,IAAI,CAACF,EAAE,GAACM,IAAI,CAAC;IACvC,IAAI/B,KAAK,GAAG,EAAE;IACd,KAAI,IAAI4F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAC;MAC1B,IAAIC,GAAG,GAAGpE,EAAE,CAACE,IAAI,CAACJ,GAAG,GAACQ,IAAI,IAAE6D,CAAC,GAAC,CAAC,CAAC;MAChC,IAAIE,SAAS,GAAG,EAAE;MAClB,IAAIC,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;MACtB,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC;MACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjD,KAAK,CAACyC,MAAM,EAAEQ,CAAC,EAAE,EAAC;QACjC,IAAIC,CAAC,GAAGlD,KAAK,CAACiD,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB,IAAIE,CAAC,GAAGnD,KAAK,CAACiD,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB,IAAIzF,CAAC,GAAG,CAAC2F,CAAC,CAAC,CAAC,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,KAAGL,GAAG,GAACM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAIC,KAAK,GAAGjG,IAAI,CAACoB,GAAG,CAAC2E,CAAC,CAAC,CAAC,CAAC,EAACC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAIE,KAAK,GAAGlG,IAAI,CAACqB,GAAG,CAAC0E,CAAC,CAAC,CAAC,CAAC,EAACC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAG3F,CAAC,GAAC4F,KAAK,IAAI5F,CAAC,GAAE6F,KAAK,EAAC;UACrB,IAAG7F,CAAC,GAACwF,IAAI,CAAC,CAAC,CAAC,EAAC;YACXA,IAAI,CAAC,CAAC,CAAC,GAAGxF,CAAC;YACXwF,IAAI,CAAC,CAAC,CAAC,GAAG,CAACH,GAAG,EAAErF,CAAC,CAAC;UACpB,CAAC,MACI,IAAGA,CAAC,GAACuF,GAAG,CAAC,CAAC,CAAC,EAAC;YACfA,GAAG,CAAC,CAAC,CAAC,GAAGvF,CAAC;YACVuF,GAAG,CAAC,CAAC,CAAC,GAAG,CAACF,GAAG,EAAErF,CAAC,CAAC;UACnB;UACAsF,SAAS,CAACjF,IAAI,CAAC,CAACgF,GAAG,EAAErF,CAAC,CAAC,CAAC;QAC1B;MACJ;MACAsF,SAAS,GAAGA,SAAS,CAACQ,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAC;QAAC,OAAOD,CAAC,CAAC,CAAC,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC;MAAA,CAAC,CAAC;MAE5DT,GAAG,CAAC,CAAC,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;MACrBE,IAAI,CAAC,CAAC,CAAC,GAAGF,SAAS,CAACA,SAAS,CAACL,MAAM,GAAC,CAAC,CAAC;MAEvCM,GAAG,CAAC,CAAC,CAAC,GAAGjF,qBAAqB,CAACiF,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACtD,MAAM,CAACI,mBAAmB,CAACF,KAAK,EAAE,KAAK,CAAC;MACpFqD,IAAI,CAAC,CAAC,CAAC,GAAGlF,qBAAqB,CAACkF,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAACvD,MAAM,CAACI,mBAAmB,CAACF,KAAK,EAAE,IAAI,CAAC;MACrF,IAAG,CAAC3C,KAAK,CAACyF,MAAM,GAAC,CAAC,IAAE,CAAC,IAAI,CAAC,EAAC;QACzBzF,KAAK,CAACa,IAAI,CAACkF,GAAG,CAAC,CAAC,CAAC,CAAC;QAClB/F,KAAK,CAACa,IAAI,CAACmF,IAAI,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,MACG;QACFhG,KAAK,CAACa,IAAI,CAACmF,IAAI,CAAC,CAAC,CAAC,CAAC;QACnBhG,KAAK,CAACa,IAAI,CAACkF,GAAG,CAAC,CAAC,CAAC,CAAC;MACpB;IACJ;IACA/F,KAAK,GAAG,IAAI,CAAC8E,MAAM,CAAC9E,KAAK,EAAE,CAAC,CAAC,CAAC;IAC9B,IAAIA,KAAK,CAACyF,MAAM,IAAI,CAAC,EAAC;MACpB,OAAO,IAAI,CAAC3C,OAAO,CAAC9C,KAAK;IAC3B,CAAC,MAAI;MACH,OAAOA,KAAK;IACd;EACJ;EAEAyG,eAAeA,CAACjD,MAAM,EAAC;IACnB,IAAIxD,KAAK,GAAGwD,MAAM;IAClB,IAAIoB,MAAM,GAAG,IAAI9E,QAAQ,CAAC2D,MAAM,CAC5B;MACIC,SAAS,EAAE;IACf,CACJ,CAAC,CAACC,SAAS,CAAC3D,KAAK,CAAC,CAAC4D,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;IAClCuD,MAAM,CAAC8B,aAAa,GAAG,IAAI,CAAC5D,OAAO,CAACC,OAAO,CAAC0C,MAAM;IAClD,IAAI,CAAC3C,OAAO,CAACC,OAAO,CAAClC,IAAI,CAAC+D,MAAM,CAAC;IACjC;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACD,gBAAgB,CAACC,MAAM,EAAEhF,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC;IACnD,IAAG,IAAI,CAACkD,OAAO,CAACC,OAAO,CAAC0C,MAAM,IAAI,CAAC,EAAC;MAClC,IAAI,CAAC3C,OAAO,CAAC9C,KAAK,CAACa,IAAI,CAACb,KAAK,CAAC;MAC9B,IAAI,CAAC8C,OAAO,CAAC9C,KAAK,CAACa,IAAI,CAACb,KAAK,CAAC;MAC9B,IAAI,CAAC8C,OAAO,CAACG,MAAM,CAAC0D,IAAI,CAACC,QAAQ,CAACC,WAAW,GAAG,CAAC,IAAI,CAAC/D,OAAO,CAAC9C,KAAK,CAAC;MACpE,IAAI,CAACqB,GAAG,CAACyF,SAAS,CAAC,SAAS,EAAE,IAAI,CAAChE,OAAO,CAACG,MAAM,CAAC;MAClD,IAAI,CAAC5B,GAAG,CAAC0F,QAAQ,CAAC,IAAI,CAACjE,OAAO,CAACI,UAAU,CAAC;MAC1C,IAAI,CAAC7B,GAAG,CAAC0F,QAAQ,CAAC,IAAI,CAACjE,OAAO,CAACK,UAAU,CAAC;IAC5C;IACA,IAAG,IAAI,CAACL,OAAO,CAACC,OAAO,CAAC0C,MAAM,GAAG,CAAC,EAAC;MACjC,IAAI,CAAC3C,OAAO,CAAC9C,KAAK,CAACgH,GAAG,CAAC,CAAC;MACxB,IAAI,CAAClE,OAAO,CAAC9C,KAAK,CAACa,IAAI,CAACb,KAAK,CAAC;MAC9B,IAAI,CAAC8C,OAAO,CAAC9C,KAAK,CAACa,IAAI,CAAC,IAAI,CAACiC,OAAO,CAAC9C,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9C,IAAI,CAAC8C,OAAO,CAACG,MAAM,CAAC0D,IAAI,CAACC,QAAQ,CAACC,WAAW,GAAG,CAAC,IAAI,CAAC/D,OAAO,CAAC9C,KAAK,CAAC;MACpE,IAAI,CAACqB,GAAG,CAAC4F,SAAS,CAAC,SAAS,CAAC,CAACC,OAAO,CAAC,IAAI,CAACpE,OAAO,CAACG,MAAM,CAAC0D,IAAI,CAAC;IACjE;IACA,IAAG,IAAI,CAAC7D,OAAO,CAACC,OAAO,CAAC0C,MAAM,IAAI,CAAC,EAAC;MAClC,IAAI,CAACR,aAAa,GAAG,IAAInF,QAAQ,CAAC2D,MAAM,CAAC;QACvCC,SAAS,EAAC;MACZ,CAAC,CAAC;MACF,IAAI,CAACiB,gBAAgB,CAAC,IAAI,CAACM,aAAa,EAAEpF,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC;MAC9D,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;MACjB,KAAI,IAAIwF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC1C,OAAO,CAAC9C,KAAK,CAACyF,MAAM,GAAC,CAAC,EAAED,CAAC,EAAE,EAAC;QAClDxF,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC8C,OAAO,CAAC9C,KAAK,CAACwF,CAAC,CAAC,CAAC,CAAC,CAAC;QACpCxF,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC8C,OAAO,CAAC9C,KAAK,CAACwF,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC;MACAxF,KAAK,GAAG,CAACA,KAAK,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC8C,OAAO,CAAC9C,KAAK,CAACyF,MAAM,GAAC,CAAC,CAAC,EAAEzF,KAAK,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC8C,OAAO,CAAC9C,KAAK,CAACyF,MAAM,GAAC,CAAC,CAAC,CAAC;MACxF,IAAI,CAACR,aAAa,CAACtB,SAAS,CAAC3D,KAAK,CAAC,CAAC4D,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;MAEnD,IAAI,CAAC8F,gCAAgC,GAAIC,CAAC,IAAK;QAACA,CAAC,CAACC,UAAU,GAAG,IAAI;QAAED,CAAC,CAACxC,MAAM,GAAG,IAAI,CAACK,aAAa;QAAEmC,CAAC,CAACE,GAAG,GAAG,IAAI,CAACX,IAAI;QAAE,IAAI,CAACY,qBAAqB,CAACH,CAAC,CAAC;MAAA,CAAC;MACrJ,IAAI,CAACI,2BAA2B,GAAIJ,CAAC,IAAK;QAACA,CAAC,CAACC,UAAU,GAAG,IAAI;QAAED,CAAC,CAACxC,MAAM,GAAG,IAAI,CAACK,aAAa;QAAEmC,CAAC,CAACE,GAAG,GAAG,IAAI,CAACX,IAAI;QAAE,IAAI,CAACc,gBAAgB,CAACL,CAAC,CAAC;MAAA,CAAC;MAC3I,IAAI,CAACM,mCAAmC,GAAIN,CAAC,IAAK;QAACA,CAAC,CAACC,UAAU,GAAG,IAAI;QAAED,CAAC,CAACxC,MAAM,GAAG,IAAI,CAACK,aAAa;QAAEmC,CAAC,CAACE,GAAG,GAAG,IAAI,CAACX,IAAI;QAAE,IAAI,CAACgB,wBAAwB,CAACP,CAAC,CAAC;MAAA,CAAC;MAE3J,IAAI,CAACnC,aAAa,CAAC2C,EAAE,CAAC,WAAW,EAAE,IAAI,CAACT,gCAAgC,CAAC;MACzE,IAAI,CAAClC,aAAa,CAAC2C,EAAE,CAAC,MAAM,EAAE,IAAI,CAACJ,2BAA2B,CAAC;MAC/D,IAAI,CAACvC,aAAa,CAAC2C,EAAE,CAAC,SAAS,EAAE,IAAI,CAACF,mCAAmC,CAAC;MAC1E,IAAInC,YAAY,GAAG,IAAI,CAACD,aAAa,CAAC,CAAC;MACvC,IAAI,CAAClC,MAAM,CAACpD,KAAK,GAAGuF,YAAY;MAChC,IAAI,CAACnC,MAAM,CAACH,MAAM,CAAC0D,IAAI,CAACC,QAAQ,CAACC,WAAW,GAAG,IAAI,CAACzD,MAAM,CAACpD,KAAK;MAChE,IAAI,CAACqB,GAAG,CAACyF,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC1D,MAAM,CAACH,MAAM,CAAC;MAChD,IAAI,CAAC4E,WAAW,GAAG,IAAI/H,QAAQ,CAAC2D,MAAM,CAAC;QACrCC,SAAS,EAAC;MACZ,CAAC,CAAC;MACF,IAAI,CAACoE,SAAS,GAAG,IAAIhI,QAAQ,CAAC2D,MAAM,CAAC;QACnCC,SAAS,EAAC;MACZ,CAAC,CAAC;MAEF,IAAI,CAACmE,WAAW,CAAClE,SAAS,CAAC,IAAI,CAACP,MAAM,CAACpD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC4D,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;MAChE,IAAI,CAACyG,SAAS,CAACnE,SAAS,CAAC,IAAI,CAACP,MAAM,CAACpD,KAAK,CAAC,IAAI,CAACoD,MAAM,CAACpD,KAAK,CAACyF,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC7B,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;MAEvF,IAAI,CAAC0G,eAAe,CAAC,IAAI,CAACF,WAAW,EAAEjI,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC;MAC5D,IAAI,CAACmI,eAAe,CAAC,IAAI,CAACD,SAAS,EAAElI,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC;IAC5D;EACJ;EAEAoI,UAAUA,CAACxE,MAAM,EAAC;IACd,IAAI,IAAI,CAACjB,YAAY,KAAK,IAAI,EAAC;MAC3B,IAAI,CAACF,oBAAoB,CAAC;QAAC4F,MAAM,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC1G,CAAC,MAAI;MACD,IAAI,CAAC1B,eAAe,CAACjD,MAAM,CAAC;IAChC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}