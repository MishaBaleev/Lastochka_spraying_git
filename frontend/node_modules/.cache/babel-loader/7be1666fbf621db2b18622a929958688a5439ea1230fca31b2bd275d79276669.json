{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nclass MapManager {\n  constructor() {\n    if (!localStorage.getItem('map_zoom')) {\n      localStorage.setItem('map_zoom', JSON.stringify(5));\n    }\n    console.log(localStorage.getItem('map_center'));\n    if (!localStorage.getItem('map_center')) {\n      localStorage.setItem('map_center', JSON.stringify([0, 0]));\n    }\n    if (!localStorage.getItem('map_pitch')) {\n      localStorage.setItem('map_pitch', JSON.stringify(0));\n    }\n    this.map = null;\n    this.createMap = this.createMap.bind(this);\n  }\n  createMap(layers, settings, mapContainer) {\n    let [style, lazy_layers] = this.buildStyle(layers, settings);\n    let map = new Map({\n      container: mapContainer,\n      style: style,\n      //'mapbox://styles/mapbox/satellite-streets-v11',\n      center: JSON.parse(localStorage.getItem('map_center')),\n      //[38.782723, 47.327716],\n      // zoom: 14,\n      zoom: parseInt(localStorage.getItem('map_zoom')),\n      pitch: JSON.parse(localStorage.getItem('map_pitch')),\n      preserveDrawingBuffer: true,\n      // maxZoom: 16.5,\n      antialias: true\n    });\n    map.on(\"idle\", () => {\n      map.resize();\n    });\n    map.on('style.load', () => {\n      // console.log(lazy_layers)\n      for (let layer_id in lazy_layers) {\n        // рельеф\n        if (layer_id == 6) {\n          if (lazy_layers[layer_id].layer.active == \"active\") {\n            map.setTerrain({\n              'source': lazy_layers[layer_id].id,\n              'exaggeration': 1\n            });\n          }\n        }\n        // здания\n        else if (layer_id == 8) {\n          const layers = map.getStyle().layers;\n          const labelLayerId = layers.find(layer => layer.type === 'symbol' && layer.layout['text-field']);\n          map.addLayer({\n            'id': 'add-3d-buildings',\n            'source': lazy_layers[layer_id].id,\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': lazy_layers[layer_id].layer.minzoom,\n            'maxzoom': lazy_layers[layer_id].layer.maxzoom,\n            'paint': {\n              'fill-extrusion-color': ['case', ['boolean', ['feature-state', 'select'], false], \"red\", ['boolean', ['feature-state', 'hover'], false], \"lightblue\", '#aaa'],\n              'fill-extrusion-height': ['interpolate', ['linear'], ['zoom'], 15, 0, 15.05, ['get', 'height']],\n              'fill-extrusion-base': ['interpolate', ['linear'], ['zoom'], 15, 0, 15.05, ['get', 'min_height']],\n              'fill-extrusion-opacity': 0.8\n            },\n            'layout': {\n              'visibility': lazy_layers[layer_id].layer.active == \"active\" ? 'visible' : 'none'\n            }\n          }, labelLayerId.id);\n        }\n        // здания\n        else if (layer_id == 9) {\n          console.log(lazy_layers[layer_id].id);\n          map.addLayer({\n            'id': lazy_layers[layer_id].id,\n            'source': lazy_layers[layer_id].id,\n            'source-layer': 'trees',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': lazy_layers[layer_id].layer.minzoom,\n            'maxzoom': lazy_layers[layer_id].layer.maxzoom,\n            'paint': {\n              'fill-extrusion-color': ['case', ['boolean', ['feature-state', 'select'], false], \"red\", ['boolean', ['feature-state', 'hover'], false], \"lightblue\", '#81e581'],\n              'fill-extrusion-height': ['interpolate', ['linear'], ['zoom'], 15, 0, 15.05, ['get', 'height']],\n              'fill-extrusion-base': ['interpolate', ['linear'], ['zoom'], 15, 0, 15.05, ['get', 'min_height']],\n              'fill-extrusion-opacity': 0.8\n            }\n          });\n        }\n      }\n    });\n    map.on('dragend', () => {\n      localStorage.setItem('map_center', JSON.stringify(map.getCenter()));\n    });\n    map.on('zoomend', () => {\n      localStorage.setItem('map_zoom', JSON.stringify(map.getZoom()));\n    });\n    map.on('pitchend', () => {\n      localStorage.setItem('map_pitch', JSON.stringify(map.getPitch()));\n    });\n    this.map = map;\n    return map;\n  }\n  buildStyle(layers, settings) {\n    let active_source_layers = layers.filter((item, index) => {\n        if (item.type == \"layer\") return item;\n      }),\n      active_source_style = layers.filter((item, index) => {\n        if (item.type == \"style\" && item.active == \"active\") return item;\n      })[0],\n      layers_3d = layers.filter((item, index) => {\n        if (item.dim_type == \"3d\") return item;\n      });\n    let is_local = parseInt(settings.filter(item => {\n      if (item.id == 4) return item;\n    })[0].value);\n    let style = {\n      \"version\": 8,\n      \"name\": \"Meteorites\",\n      \"metadata\": {\n        \"mapbox:origin\": \"basic-template-v1\",\n        \"mapbox:autocomposite\": true,\n        \"mapbox:type\": \"template\",\n        \"mapbox:sdk-support\": {\n          \"js\": \"0.45.0\",\n          \"android\": \"6.0.0\",\n          \"ios\": \"4.0.0\"\n        }\n      },\n      \"center\": [74.24426803763072, -2.2507114487818853],\n      \"zoom\": 0.6851443156248076,\n      \"bearing\": 0,\n      \"pitch\": 0,\n      \"sources\": {\n        // \"global\": {\n        //   \"type\": \"raster\",\n        //   \"tiles\":[],\n        //   \"tileSize\": 256\n        // },\n        // \"local\":{\n        //   \"type\": \"raster\",\n        //   \"tiles\":[],\n        //   \"tileSize\": 256\n        // }\n      },\n      \"sprite\": \"mapbox://sprites/examples/cjikt35x83t1z2rnxpdmjs7y7\",\n      \"glyphs\": \"mapbox://fonts/{username}/{fontstack}/{range}.pbf\",\n      \"layers\": [],\n      \"created\": \"2015-10-30T22:18:31.111Z\",\n      \"id\": \"cjikt35x83t1z2rnxpdmjs7y7\",\n      \"modified\": \"2015-10-30T22:22:06.077Z\",\n      \"owner\": \"examples\",\n      \"visibility\": \"public\",\n      \"draft\": false\n    };\n    // map base layer\n    if (is_local) {\n      style.sources.local = {\n        \"type\": \"raster\",\n        \"tiles\": [window.location.origin + \"/media/map_cash/\" + active_source_style.label + \"/tile_{x}_{y}_{z}.jpg\"],\n        \"tileSize\": active_source_style.tileSize\n      };\n      style.layers.push({\n        \"id\": \"local-tiles-layer\",\n        \"type\": \"raster\",\n        \"source\": \"local\",\n        \"minzoom\": active_source_style.minzoom,\n        \"maxzoom\": active_source_style.maxzoom\n      });\n    } else {\n      style.sources.global = {\n        type: \"raster\",\n        tiles: active_source_style.tiles,\n        tileSize: active_source_style.tileSize\n      };\n      style.layers.push({\n        \"id\": \"global-tiles-layer\",\n        \"type\": \"raster\",\n        \"source\": \"global\",\n        \"minzoom\": active_source_style.minzoom,\n        \"maxzoom\": active_source_style.maxzoom\n      });\n    }\n    // map adv layers and sources\n    let lazy_layers = {};\n    // console.log(active_source_layers)\n    for (let layer of active_source_layers) {\n      // рельеф\n      if (layer.id == 6) {\n        let tiles = [];\n        if (is_local) {\n          tiles.push(window.location.origin + '/media/map_cash/' + layer.label + '/tile_{x}_{y}_{z}.jpg');\n        } else {\n          tiles = [...layer.tiles];\n        }\n        style.sources[layer.label + \"_\" + layer.id] = {\n          \"type\": \"raster-dem\",\n          \"tiles\": tiles,\n          \"tileSize\": active_source_style.tileSize\n        };\n        lazy_layers[layer.id] = {\n          id: layer.label + \"_\" + layer.id,\n          layer: layer\n        };\n      }\n      // здания\n      if (layer.id == 8) {\n        let tiles = [];\n        if (is_local) {\n          tiles.push(window.location.origin + '/media/map_cash/' + layer.label + '/tile_{x}_{y}_{z}.pbf');\n        } else {\n          tiles = [...layer.tiles];\n        }\n        style.sources[layer.label + \"_\" + layer.id] = {\n          \"type\": \"vector\",\n          \"tiles\": tiles\n        };\n        style.layers.push({\n          \"interactive\": true,\n          \"layout\": {\n            \"symbol-placement\": \"line\",\n            \"text-field\": \"{name_en}\",\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n            \"text-transform\": \"uppercase\",\n            \"text-letter-spacing\": 0.1,\n            \"text-size\": {\n              \"base\": 1.4,\n              \"stops\": [[10, 8], [20, 14]]\n            }\n          },\n          \"filter\": [\"all\", [\"==\", \"$type\", \"LineString\"], [\"in\", \"class\", \"motorway\", \"primary\", \"secondary\", \"tertiary\", \"trunk\"]],\n          \"type\": \"symbol\",\n          \"source\": layer.label + \"_\" + layer.id,\n          \"id\": \"road_major_label\",\n          \"paint\": {\n            \"text-color\": \"#666\",\n            \"text-halo-color\": \"rgba(255,255,255,0.95)\",\n            \"text-halo-width\": 2\n          },\n          \"source-layer\": \"road_label\"\n        });\n        lazy_layers[layer.id] = {\n          id: layer.label + \"_\" + layer.id,\n          layer: layer\n        };\n      }\n      // разметка лесов\n      if (layer.id == 9) {\n        console.log(layer.label + \"_\" + layer.id);\n        let tiles = [...layer.tiles];\n        style.sources[layer.label + \"_\" + layer.id] = {\n          \"type\": \"vector\",\n          \"tiles\": tiles\n        };\n        style.layers.push({\n          \"interactive\": true,\n          \"layout\": {\n            \"symbol-placement\": \"line\",\n            \"text-field\": \"{name_en}\",\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n            \"text-transform\": \"uppercase\",\n            \"text-letter-spacing\": 0.1,\n            \"text-size\": {\n              \"base\": 1.4,\n              \"stops\": [[10, 8], [20, 14]]\n            }\n          },\n          \"filter\": [\"all\", [\"==\", \"$type\", \"LineString\"], [\"in\", \"class\", \"motorway\", \"primary\", \"secondary\", \"tertiary\", \"trunk\"]],\n          \"type\": \"symbol\",\n          \"source\": layer.label + \"_\" + layer.id,\n          \"id\": \"road_major_label_tree\",\n          \"paint\": {\n            \"text-color\": \"#666\",\n            \"text-halo-color\": \"rgba(255,255,255,0.95)\",\n            \"text-halo-width\": 2\n          },\n          \"source-layer\": \"road_label\"\n        });\n        lazy_layers[layer.id] = {\n          id: layer.label + \"_\" + layer.id,\n          layer: layer\n        };\n\n        // style.sources[layer.label+\"_\"+layer.id] = {\n        //     \"type\": \"raster\",\n        //     \"tiles\":[\n        //       window.location.origin+'/media/map_cash/'+layer.label+'/tile_{x}_{y}_{z}.png'\n        //     ],\n        //     tileSize:active_source_style.tileSize\n        //   }\n        // style.layers.push(\n        //   {\n        //     'id': layer.label+\"_\"+layer.id,\n        //     'type': 'raster',\n        //     'source': layer.label+\"_\"+layer.id,\n        //     'minzoom': layer.minzoom,\n        //     'maxzoom': layer.maxzoom,\n        //     'paint':{\n        //       'raster-opacity':0.8\n        //     },\n        //     'layout': {\n        //       'visibility': layer.active == \"active\" ? 'visible' : 'none'\n        //     }\n        //   }\n        // )\n      }\n    }\n    return [style, lazy_layers];\n  }\n  updateStyle(layers, settings) {\n    let [style, lazy_layers] = this.buildStyle(layers, settings);\n    // console.log(this.map.getStyle())\n    // console.log(style)\n    this.map.setStyle(style);\n    // console.log(this.map.getStyle())\n    this.map.once('styledata', () => {\n      // console.log(this.map)\n      for (let layer_id in lazy_layers) {\n        // рельеф\n        if (layer_id == 6) {\n          if (lazy_layers[layer_id].layer.active == \"active\") {\n            this.map.setTerrain({\n              'source': lazy_layers[layer_id].id,\n              'exaggeration': 1\n            });\n          }\n        }\n        // здания\n        else if (layer_id == 8) {\n          const layers = this.map.getStyle().layers;\n          const labelLayerId = layers.find(layer => layer.type === 'symbol' && layer.layout['text-field']);\n          this.map.addLayer({\n            'id': 'add-3d-buildings',\n            'source': lazy_layers[layer_id].id,\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': lazy_layers[layer_id].layer.minzoom,\n            'maxzoom': lazy_layers[layer_id].layer.maxzoom,\n            'paint': {\n              'fill-extrusion-color': ['case', ['boolean', ['feature-state', 'select'], false], \"red\", ['boolean', ['feature-state', 'hover'], false], \"lightblue\", '#aaa'],\n              'fill-extrusion-height': ['interpolate', ['linear'], ['zoom'], 15, 0, 15.05, ['get', 'height']],\n              'fill-extrusion-base': ['interpolate', ['linear'], ['zoom'], 15, 0, 15.05, ['get', 'min_height']],\n              'fill-extrusion-opacity': 0.8\n            },\n            'layout': {\n              'visibility': lazy_layers[layer_id].layer.active == \"active\" ? 'visible' : 'none'\n            }\n          }, labelLayerId.id);\n        }\n      }\n    });\n  }\n}\nclass Map extends mapboxgl.Map {\n  constructor(...args) {\n    super(...args);\n    this.currentEventListener = null;\n    this.setEventListener = this.setEventListener.bind(this);\n    this.unsetEventListener = this.unsetEventListener.bind(this);\n  }\n  setEventListener(map_, eventListener) {\n    if (this.currentEventListener != null) this.off('click', this.currentEventListener);\n    this.currentEventListener = eventListener;\n    this.on(\"click\", eventListener);\n  }\n  unsetEventListener(map_) {\n    if (this.currentEventListener != null) this.off('click', this.currentEventListener);\n    this.currentEventListener = null;\n  }\n}\nexport default MapManager;","map":{"version":3,"names":["mapboxgl","MapManager","constructor","localStorage","getItem","setItem","JSON","stringify","console","log","map","createMap","bind","layers","settings","mapContainer","style","lazy_layers","buildStyle","Map","container","center","parse","zoom","parseInt","pitch","preserveDrawingBuffer","antialias","on","resize","layer_id","layer","active","setTerrain","id","getStyle","labelLayerId","find","type","layout","addLayer","minzoom","maxzoom","getCenter","getZoom","getPitch","active_source_layers","filter","item","index","active_source_style","layers_3d","dim_type","is_local","value","sources","local","window","location","origin","label","tileSize","push","global","tiles","updateStyle","setStyle","once","args","currentEventListener","setEventListener","unsetEventListener","map_","eventListener","off"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/src/MapManager.js"],"sourcesContent":["import mapboxgl from 'mapbox-gl';\n\nclass MapManager{\n  constructor(){\n    if(!localStorage.getItem('map_zoom')){\n      localStorage.setItem('map_zoom', JSON.stringify(5));\n    }\n    console.log(localStorage.getItem('map_center'))\n    if(!localStorage.getItem('map_center')){\n      localStorage.setItem('map_center', JSON.stringify([0, 0]));\n    }\n\n    if(!localStorage.getItem('map_pitch')){\n      localStorage.setItem('map_pitch', JSON.stringify(0));\n    }\n    this.map = null\n    this.createMap = this.createMap.bind(this);\n  }\n  createMap(layers, settings, mapContainer){\n    let [style, lazy_layers] = this.buildStyle(layers, settings)\n    let map = new Map({\n      container: mapContainer,\n      style: style, //'mapbox://styles/mapbox/satellite-streets-v11',\n      center: JSON.parse(localStorage.getItem('map_center')),//[38.782723, 47.327716],\n      // zoom: 14,\n      zoom: parseInt(localStorage.getItem('map_zoom')),\n      pitch: JSON.parse(localStorage.getItem('map_pitch')),\n      preserveDrawingBuffer: true,\n      // maxZoom: 16.5,\n      antialias: true,\n      });\n    map.on(\"idle\", () => {\n      map.resize()\n    })\n    map.on('style.load', () => {\n      // console.log(lazy_layers)\n      for(let layer_id in lazy_layers){\n        // рельеф\n        if(layer_id == 6){\n          if(lazy_layers[layer_id].layer.active == \"active\"){\n            map.setTerrain({ 'source': lazy_layers[layer_id].id, 'exaggeration': 1 });\n          }\n        }\n        // здания\n        else if(layer_id == 8){\n          const layers = map.getStyle().layers;\n          const labelLayerId = layers.find(\n          (layer) => layer.type === 'symbol' && layer.layout['text-field']\n          )\n          map.addLayer(\n            {\n            'id': 'add-3d-buildings',\n            'source': lazy_layers[layer_id].id,\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': lazy_layers[layer_id].layer.minzoom,\n            'maxzoom': lazy_layers[layer_id].layer.maxzoom,\n            'paint': {\n              'fill-extrusion-color': \n              [\n                'case',\n                ['boolean', ['feature-state', 'select'], false],\n                \"red\",\n                ['boolean', ['feature-state', 'hover'], false],\n                \"lightblue\",\n                '#aaa'\n              ],\n              'fill-extrusion-height': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                15,\n                0,\n                15.05,\n                ['get', 'height']\n              ],\n              'fill-extrusion-base': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                15,\n                0,\n                15.05,\n                ['get', 'min_height']\n              ],\n              'fill-extrusion-opacity': 0.8,\n            },\n            'layout': {\n              'visibility': lazy_layers[layer_id].layer.active == \"active\" ? 'visible' : 'none'\n            }\n            },\n            labelLayerId.id\n            )\n        }\n        // здания\n        else if(layer_id == 9){\n          console.log(lazy_layers[layer_id].id)\n          map.addLayer(\n            {\n              'id': lazy_layers[layer_id].id,\n              'source': lazy_layers[layer_id].id,\n              'source-layer': 'trees',\n              'filter': ['==', 'extrude', 'true'],\n              'type': 'fill-extrusion',\n              'minzoom': lazy_layers[layer_id].layer.minzoom,\n              'maxzoom': lazy_layers[layer_id].layer.maxzoom,\n              'paint': {\n                'fill-extrusion-color': \n                [\n                  'case',\n                  ['boolean', ['feature-state', 'select'], false],\n                  \"red\",\n                  ['boolean', ['feature-state', 'hover'], false],\n                  \"lightblue\",\n                  '#81e581'\n                ],\n                'fill-extrusion-height': [\n                  'interpolate',\n                  ['linear'],\n                  ['zoom'],\n                  15,\n                  0,\n                  15.05,\n                  ['get', 'height']\n                ],\n                'fill-extrusion-base': [\n                  'interpolate',\n                  ['linear'],\n                  ['zoom'],\n                  15,\n                  0,\n                  15.05,\n                  ['get', 'min_height']\n                ],\n                'fill-extrusion-opacity': 0.8,\n              },\n            }\n          )\n        }\n      }})\n\n    map.on('dragend', () => {\n      localStorage.setItem('map_center', JSON.stringify(map.getCenter()));\n      });\n    map.on('zoomend', () => {\n      localStorage.setItem('map_zoom', JSON.stringify(map.getZoom()));\n    });\n    map.on('pitchend', () => {\n      localStorage.setItem('map_pitch', JSON.stringify(map.getPitch()));\n    });\n    this.map = map\n    return map\n  }\n  buildStyle(layers, settings){\n    let active_source_layers = layers.filter((item, index) => {\n          if(item.type == \"layer\") return item\n      }),\n      active_source_style = layers.filter((item, index) => {\n          if(item.type == \"style\" && item.active == \"active\") return item\n      })[0],\n      layers_3d = layers.filter((item, index) => {\n          if(item.dim_type == \"3d\") return item\n      });\n\n    let is_local = parseInt(settings.filter((item) => {\n      if(item.id == 4) return item\n    })[0].value)\n    \n    let style = {\n      \"version\": 8,\n      \"name\": \"Meteorites\",\n      \"metadata\": {\n        \"mapbox:origin\": \"basic-template-v1\",\n        \"mapbox:autocomposite\": true,\n        \"mapbox:type\": \"template\",\n        \"mapbox:sdk-support\": {\n          \"js\": \"0.45.0\",\n          \"android\": \"6.0.0\",\n          \"ios\": \"4.0.0\"\n        }\n      },\n      \"center\": [\n        74.24426803763072,\n        -2.2507114487818853\n      ],\n      \"zoom\": 0.6851443156248076,\n      \"bearing\": 0,\n      \"pitch\": 0,\n      \"sources\": {\n        // \"global\": {\n        //   \"type\": \"raster\",\n        //   \"tiles\":[],\n        //   \"tileSize\": 256\n        // },\n        // \"local\":{\n        //   \"type\": \"raster\",\n        //   \"tiles\":[],\n        //   \"tileSize\": 256\n        // }\n      },\n      \"sprite\": \"mapbox://sprites/examples/cjikt35x83t1z2rnxpdmjs7y7\",\n      \"glyphs\": \"mapbox://fonts/{username}/{fontstack}/{range}.pbf\",\n      \"layers\": [],\n      \"created\": \"2015-10-30T22:18:31.111Z\",\n      \"id\": \"cjikt35x83t1z2rnxpdmjs7y7\",\n      \"modified\": \"2015-10-30T22:22:06.077Z\",\n      \"owner\": \"examples\",\n      \"visibility\": \"public\",\n      \"draft\": false\n    }\n    // map base layer\n    if(is_local){\n      style.sources.local = {\n          \"type\": \"raster\",\n          \"tiles\":[\n            window.location.origin+\"/media/map_cash/\"+active_source_style.label+\"/tile_{x}_{y}_{z}.jpg\"\n          ],\n          \"tileSize\":active_source_style.tileSize\n      }\n      style.layers.push(\n        {\n          \"id\": \"local-tiles-layer\",\n          \"type\": \"raster\",\n          \"source\": \"local\",\n          \"minzoom\": active_source_style.minzoom,\n          \"maxzoom\": active_source_style.maxzoom\n        }\n      )\n    }\n    else{\n      style.sources.global = {\n        type: \"raster\",\n        tiles:active_source_style.tiles,\n        tileSize:active_source_style.tileSize\n      }\n      style.layers.push(\n        {\n          \"id\": \"global-tiles-layer\",\n          \"type\": \"raster\",\n          \"source\": \"global\",\n          \"minzoom\": active_source_style.minzoom,\n          \"maxzoom\": active_source_style.maxzoom\n        }\n      )\n    }\n    // map adv layers and sources\n    let lazy_layers = {}\n    // console.log(active_source_layers)\n    for(let layer of active_source_layers){\n      // рельеф\n      if(layer.id == 6){\n        let tiles = [];\n        if(is_local){\n          tiles.push(\n            window.location.origin+'/media/map_cash/'+layer.label+'/tile_{x}_{y}_{z}.jpg'\n          )\n        }\n        else{\n          tiles = [...layer.tiles]\n        }\n        style.sources[layer.label+\"_\"+layer.id] = {\n            \"type\": \"raster-dem\",\n            \"tiles\":tiles,\n            \"tileSize\":active_source_style.tileSize\n          }\n        lazy_layers[layer.id] = {\n          id:layer.label+\"_\"+layer.id,\n          layer:layer\n        }\n      }\n      // здания\n      if(layer.id == 8){\n        let tiles = [];\n        if(is_local){\n          tiles.push(\n            window.location.origin+'/media/map_cash/'+layer.label+'/tile_{x}_{y}_{z}.pbf'\n          )\n        }\n        else{\n          tiles = [...layer.tiles]\n        }\n        style.sources[layer.label+\"_\"+layer.id] = {\n          \"type\": \"vector\",\n          \"tiles\": tiles\n        }\n        style.layers.push({\n              \"interactive\": true,\n              \"layout\": {\n                  \"symbol-placement\": \"line\",\n                  \"text-field\": \"{name_en}\",\n                  \"text-font\": [\n                      \"Open Sans Semibold\",\n                      \"Arial Unicode MS Bold\"\n                  ],\n                  \"text-transform\": \"uppercase\",\n                  \"text-letter-spacing\": 0.1,\n                  \"text-size\": {\n                      \"base\": 1.4,\n                      \"stops\": [\n                          [\n                              10,\n                              8\n                          ],\n                          [\n                              20,\n                              14\n                          ]\n                      ]\n                  }\n              },\n              \"filter\": [\n                  \"all\",\n                  [\n                      \"==\",\n                      \"$type\",\n                      \"LineString\"\n                  ],\n                  [\n                      \"in\",\n                      \"class\",\n                      \"motorway\",\n                      \"primary\",\n                      \"secondary\",\n                      \"tertiary\",\n                      \"trunk\"\n                  ]\n              ],\n              \"type\": \"symbol\",\n              \"source\": layer.label+\"_\"+layer.id,\n              \"id\": \"road_major_label\",\n              \"paint\": {\n                  \"text-color\": \"#666\",\n                  \"text-halo-color\": \"rgba(255,255,255,0.95)\",\n                  \"text-halo-width\": 2\n              },\n              \"source-layer\": \"road_label\"\n        })\n        lazy_layers[layer.id] = {\n          id:layer.label+\"_\"+layer.id,\n          layer:layer\n        }\n      }\n      // разметка лесов\n      if(layer.id == 9){\n        console.log(layer.label+\"_\"+layer.id)\n        let tiles = [...layer.tiles]\n        style.sources[layer.label+\"_\"+layer.id] = {\n          \"type\": \"vector\",\n          \"tiles\": tiles\n        }\n        style.layers.push({\n          \"interactive\": true,\n            \"layout\": {\n                \"symbol-placement\": \"line\",\n                \"text-field\": \"{name_en}\",\n                \"text-font\": [\n                    \"Open Sans Semibold\",\n                    \"Arial Unicode MS Bold\"\n                ],\n                \"text-transform\": \"uppercase\",\n                \"text-letter-spacing\": 0.1,\n                \"text-size\": {\n                    \"base\": 1.4,\n                    \"stops\": [\n                        [\n                            10,\n                            8\n                        ],\n                        [\n                            20,\n                            14\n                        ]\n                    ]\n                }\n            },\n            \"filter\": [\n                \"all\",\n                [\n                    \"==\",\n                    \"$type\",\n                    \"LineString\"\n                ],\n                [\n                    \"in\",\n                    \"class\",\n                    \"motorway\",\n                    \"primary\",\n                    \"secondary\",\n                    \"tertiary\",\n                    \"trunk\"\n                ]\n            ],\n            \"type\": \"symbol\",\n            \"source\": layer.label+\"_\"+layer.id,\n            \"id\": \"road_major_label_tree\",\n            \"paint\": {\n                \"text-color\": \"#666\",\n                \"text-halo-color\": \"rgba(255,255,255,0.95)\",\n                \"text-halo-width\": 2\n            },\n            \"source-layer\": \"road_label\"\n        })\n        lazy_layers[layer.id] = {\n          id:layer.label+\"_\"+layer.id,\n          layer:layer\n        }\n\n\n\n\n\n\n\n\n\n\n\n        // style.sources[layer.label+\"_\"+layer.id] = {\n        //     \"type\": \"raster\",\n        //     \"tiles\":[\n        //       window.location.origin+'/media/map_cash/'+layer.label+'/tile_{x}_{y}_{z}.png'\n        //     ],\n        //     tileSize:active_source_style.tileSize\n        //   }\n        // style.layers.push(\n        //   {\n        //     'id': layer.label+\"_\"+layer.id,\n        //     'type': 'raster',\n        //     'source': layer.label+\"_\"+layer.id,\n        //     'minzoom': layer.minzoom,\n        //     'maxzoom': layer.maxzoom,\n        //     'paint':{\n        //       'raster-opacity':0.8\n        //     },\n        //     'layout': {\n        //       'visibility': layer.active == \"active\" ? 'visible' : 'none'\n        //     }\n        //   }\n        // )\n      }\n    }\n    return [style, lazy_layers]\n  }\n  updateStyle(layers, settings){\n    let [style, lazy_layers] = this.buildStyle(layers, settings)\n    // console.log(this.map.getStyle())\n    // console.log(style)\n    this.map.setStyle(style)\n    // console.log(this.map.getStyle())\n    this.map.once('styledata', () => {\n      // console.log(this.map)\n      for(let layer_id in lazy_layers){\n        // рельеф\n        if(layer_id == 6){\n          if(lazy_layers[layer_id].layer.active == \"active\"){\n            this.map.setTerrain({ 'source': lazy_layers[layer_id].id, 'exaggeration': 1 });\n          }\n        }\n        // здания\n        else if(layer_id == 8){\n          const layers = this.map.getStyle().layers;\n          const labelLayerId = layers.find(\n          (layer) => layer.type === 'symbol' && layer.layout['text-field']\n          )\n          this.map.addLayer(\n            {\n            'id': 'add-3d-buildings',\n            'source': lazy_layers[layer_id].id,\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': lazy_layers[layer_id].layer.minzoom,\n            'maxzoom': lazy_layers[layer_id].layer.maxzoom,\n            'paint': {\n              'fill-extrusion-color': \n              [\n                'case',\n                ['boolean', ['feature-state', 'select'], false],\n                \"red\",\n                ['boolean', ['feature-state', 'hover'], false],\n                \"lightblue\",\n                '#aaa'\n              ],\n              'fill-extrusion-height': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                15,\n                0,\n                15.05,\n                ['get', 'height']\n              ],\n              'fill-extrusion-base': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                15,\n                0,\n                15.05,\n                ['get', 'min_height']\n              ],\n              'fill-extrusion-opacity': 0.8,\n            },\n            'layout': {\n              'visibility': lazy_layers[layer_id].layer.active == \"active\" ? 'visible' : 'none'\n            }\n            },\n            labelLayerId.id\n            )\n        }\n      }\n      });\n  }\n}\n\nclass Map extends mapboxgl.Map{\n  constructor(...args){\n    super(...args)\n    this.currentEventListener = null\n    this.setEventListener = this.setEventListener.bind(this);\n    this.unsetEventListener = this.unsetEventListener.bind(this);\n  }\n  setEventListener(map_, eventListener){\n    if(this.currentEventListener != null) this.off('click', this.currentEventListener)\n    this.currentEventListener = eventListener\n    this.on(\"click\", eventListener)\n  }\n  unsetEventListener(map_){\n    if(this.currentEventListener != null) this.off('click', this.currentEventListener)\n    this.currentEventListener = null\n  }\n}\n\nexport default MapManager"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}