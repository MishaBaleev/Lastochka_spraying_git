{"ast":null,"code":"const THREE = require('../../three.js');\nconst fflate = require('../fflate.min.js');\n\n/**co\r\n * @author Kyle-Larson https://github.com/Kyle-Larson\r\n * @author Takahiro https://github.com/takahirox\r\n * @author Lewy Blue https://github.com/looeee\r\n *\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\n\n/**\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\n\n(function () {\n  /**\r\n  * THREE.Loader loads FBX file and generates THREE.Group representing FBX scene.\r\n  * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n  * Versions lower than this may load but will probably have errors\r\n  *\r\n  * Needs Support:\r\n  *  Morph normals / blend shape normals\r\n  *\r\n  * FBX format references:\r\n  * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n  * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n  *\r\n  * \tBinary format specification:\r\n  *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n  */\n\n  let fbxTree;\n  let connections;\n  let sceneGraph;\n  class FBXLoader extends THREE.Loader {\n    constructor(manager) {\n      super(manager);\n    }\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n      const loader = new THREE.FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n    parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        const FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n      const textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  } // Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\n  class FBXTreeParser {\n    constructor(textureLoader, manager) {\n      this.textureLoader = textureLoader;\n      this.manager = manager;\n    }\n    parse() {\n      connections = this.parseConnections();\n      const images = this.parseImages();\n      const textures = this.parseTextures(images);\n      const materials = this.parseMaterials(textures);\n      const deformers = this.parseDeformers();\n      const geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n\n    parseConnections() {\n      const connectionMap = new Map();\n      if ('Connections' in fbxTree) {\n        const rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          const fromID = rawConnection[0];\n          const toID = rawConnection[1];\n          const relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          const parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          const childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    } // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n\n    parseImages() {\n      const images = {};\n      const blobs = {};\n      if ('Video' in fbxTree.Objects) {\n        const videoNodes = fbxTree.Objects.Video;\n        for (const nodeID in videoNodes) {\n          const videoNode = videoNodes[nodeID];\n          const id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n            if (arrayBufferContent || base64Content) {\n              const image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (const id in images) {\n        const filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n      return images;\n    } // Parse embedded image data in FBXTree.Video.Content\n\n    parseImage(videoNode) {\n      const content = videoNode.Content;\n      const fileName = videoNode.RelativeFilename || videoNode.Filename;\n      const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      let type;\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n        case 'png':\n          type = 'image/png';\n          break;\n        case 'tif':\n          type = 'image/tiff';\n          break;\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n          type = 'image/tga';\n          break;\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        const array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    } // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n\n    parseTextures(images) {\n      const textureMap = new Map();\n      if ('Texture' in fbxTree.Objects) {\n        const textureNodes = fbxTree.Objects.Texture;\n        for (const nodeID in textureNodes) {\n          const texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    } // Parse individual node in FBXTree.Objects.Texture\n\n    parseTexture(textureNode, images) {\n      const texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      const wrapModeU = textureNode.WrapModeU;\n      const wrapModeV = textureNode.WrapModeV;\n      const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n      if ('Scaling' in textureNode) {\n        const values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      return texture;\n    } // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\n    loadTexture(textureNode, images) {\n      let fileName;\n      const currentPath = this.textureLoader.path;\n      const children = connections.get(textureNode.id).children;\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n      let texture;\n      const extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === 'tga') {\n        const loader = this.manager.getHandler('.tga');\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new THREE.Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new THREE.Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    } // Parse nodes in FBXTree.Objects.Material\n\n    parseMaterials(textureMap) {\n      const materialMap = new Map();\n      if ('Material' in fbxTree.Objects) {\n        const materialNodes = fbxTree.Objects.Material;\n        for (const nodeID in materialNodes) {\n          const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    } // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n\n    parseMaterial(materialNode, textureMap) {\n      const ID = materialNode.id;\n      const name = materialNode.attrName;\n      let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n      if (!connections.has(ID)) return null;\n      const parameters = this.parseParameters(materialNode, textureMap, ID);\n      let material;\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new THREE.MeshPhongMaterial();\n          break;\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to THREE.MeshPhongMaterial.', type);\n          material = new THREE.MeshPhongMaterial();\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    } // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n\n    parseParameters(materialNode, textureMap, ID) {\n      const parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n      }\n      const scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        const type = child.relationship;\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            if (parameters.map !== undefined) {\n              parameters.map.encoding = THREE.sRGBEncoding;\n            }\n            break;\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.emissiveMap !== undefined) {\n              parameters.emissiveMap.encoding = THREE.sRGBEncoding;\n            }\n            break;\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.envMap !== undefined) {\n              parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n              parameters.envMap.encoding = THREE.sRGBEncoding;\n            }\n            break;\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.specularMap !== undefined) {\n              parameters.specularMap.encoding = THREE.sRGBEncoding;\n            }\n            break;\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    } // get a texture from the textureMap for use by a material.\n\n    getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    } // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of THREE.Skeleton-like objects for use later when generating and binding skeletons.\n\n    parseDeformers() {\n      const skeletons = {};\n      const morphTargets = {};\n      if ('Deformer' in fbxTree.Objects) {\n        const DeformerNodes = fbxTree.Objects.Deformer;\n        for (const nodeID in DeformerNodes) {\n          const deformerNode = DeformerNodes[nodeID];\n          const relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === 'Skin') {\n            const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            const morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    } // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n\n    parseSkeleton(relationships, deformerNodes) {\n      const rawBones = [];\n      relationships.children.forEach(function (child) {\n        const boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        const rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a) // transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n        };\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n    parseMorphTargets(relationships, deformerNodes) {\n      const rawMorphTargets = [];\n      for (let i = 0; i < relationships.children.length; i++) {\n        const child = relationships.children[i];\n        const morphTargetNode = deformerNodes[child.ID];\n        const rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    } // create the main THREE.Group() to be returned by the loader\n\n    parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new THREE.Group();\n      const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      const modelNodes = fbxTree.Objects.Model;\n      const scope = this;\n      modelMap.forEach(function (model) {\n        const modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        const parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          const parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n          const transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    } // parse nodes in FBXTree.Objects.Model\n\n    parseModels(skeletons, geometryMap, materialMap) {\n      const modelMap = new Map();\n      const modelNodes = fbxTree.Objects.Model;\n      for (const nodeID in modelNodes) {\n        const id = parseInt(nodeID);\n        const node = modelNodes[nodeID];\n        const relationships = connections.get(id);\n        let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case 'LimbNode':\n            case 'Root':\n              model = new THREE.Bone();\n              break;\n            case 'Null':\n            default:\n              model = new THREE.Group();\n              break;\n          }\n          model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    }\n    buildSkeleton(relationships, skeletons, id, name) {\n      let bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (const ID in skeletons) {\n          const skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              const subBone = bone;\n              bone = new THREE.Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    } // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\n    createCamera(relationships) {\n      let model;\n      let cameraAttribute;\n      relationships.children.forEach(function (child) {\n        const attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        let type = 0;\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        let nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n        let farClippingPlane = 1000;\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        const aspect = width / height;\n        let fov = 45;\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            // Orthographic\n            model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new THREE.Object3D();\n            break;\n        }\n      }\n      return model;\n    } // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\n    createLight(relationships) {\n      let model;\n      let lightAttribute;\n      relationships.children.forEach(function (child) {\n        const attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        let type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        let color = 0xffffff;\n        if (lightAttribute.Color !== undefined) {\n          color = new THREE.Color().fromArray(lightAttribute.Color.value);\n        }\n        let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        let distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n        const decay = 1;\n        switch (type) {\n          case 0:\n            // Point\n            model = new THREE.PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            // Directional\n            model = new THREE.DirectionalLight(color, intensity);\n            break;\n          case 2:\n            // Spot\n            let angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n            let penumbra = 0;\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.');\n            model = new THREE.PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    }\n    createMesh(relationships, geometryMap, materialMap) {\n      let model;\n      let geometry = null;\n      let material = null;\n      const materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new THREE.MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        model = new THREE.SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new THREE.Mesh(geometry, material);\n      }\n      return model;\n    }\n    createCurve(relationships, geometryMap) {\n      const geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      const material = new THREE.LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new THREE.Line(geometry, material);\n    } // parse the model node for transform data\n\n    getTransformData(model, modelNode) {\n      const transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n    setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        const children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            const lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if ('Lcl_Translation' in lookAtTarget) {\n              const pos = lookAtTarget.Lcl_Translation.value; // THREE.DirectionalLight, THREE.SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new THREE.Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n    bindSkeleton(skeletons, geometryMap, modelMap) {\n      const bindMatrices = this.parsePoseNodes();\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        const parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            const geoID = parent.ID;\n            const geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                const model = modelMap.get(geoConnParent.ID);\n                model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    }\n    parsePoseNodes() {\n      const bindMatrices = {};\n      if ('Pose' in fbxTree.Objects) {\n        const BindPoseNode = fbxTree.Objects.Pose;\n        for (const nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            const poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n    createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        const r = ambientColor[0];\n        const g = ambientColor[1];\n        const b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          const color = new THREE.Color(r, g, b);\n          sceneGraph.add(new THREE.AmbientLight(color, 1));\n        }\n      }\n    }\n  } // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  class GeometryParser {\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse(deformers) {\n      const geometryMap = new Map();\n      if ('Geometry' in fbxTree.Objects) {\n        const geoNodes = fbxTree.Objects.Geometry;\n        for (const nodeID in geoNodes) {\n          const relationships = connections.get(parseInt(nodeID));\n          const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n      return geometryMap;\n    } // Parse single node in FBXTree.Objects.Geometry\n\n    parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n    parseMeshGeometry(relationships, geoNode, deformers) {\n      const skeletons = deformers.skeletons;\n      const morphTargets = [];\n      const modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      const skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      const modelNode = modelNodes[0];\n      const transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      const transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    } // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\n    genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      const geo = new THREE.BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      const geoInfo = this.parseGeoNode(geoNode, skeleton);\n      const buffers = this.genBuffers(geoInfo);\n      const positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        const normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n        const normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n        geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        let prevMaterialIndex = buffers.materialIndex[0];\n        let startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          const lastGroup = geo.groups[geo.groups.length - 1];\n          const lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n    parseGeoNode(geoNode, skeleton) {\n      const geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        let i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    }\n    genBuffers(geoInfo) {\n      const buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      let polygonIndex = 0;\n      let faceLength = 0;\n      let displayedWeightsWarning = false; // these will hold data for a single face\n\n      let facePositionIndexes = [];\n      let faceNormals = [];\n      let faceColors = [];\n      let faceUVs = [];\n      let faceWeights = [];\n      let faceWeightIndices = [];\n      const scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        let materialIndex;\n        let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n        let weightIndices = [];\n        let weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n            const wIndex = [0, 0, 0, 0];\n            const Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              let currentWeight = weight;\n              let currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  const tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (let i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n    genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (let i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    }\n    addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      const scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    } // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n\n    genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      const length = parentGeo.attributes.position.count * 3;\n      const morphPositions = new Float32Array(length);\n      for (let i = 0; i < indices.length; i++) {\n        const morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n      const morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      const morphBuffers = this.genBuffers(morphGeoInfo);\n      const positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n    parseNormals(NormalNode) {\n      const mappingType = NormalNode.MappingInformationType;\n      const referenceType = NormalNode.ReferenceInformationType;\n      const buffer = NormalNode.Normals.a;\n      let indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n    parseUVs(UVNode) {\n      const mappingType = UVNode.MappingInformationType;\n      const referenceType = UVNode.ReferenceInformationType;\n      const buffer = UVNode.UV.a;\n      let indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n    parseVertexColors(ColorNode) {\n      const mappingType = ColorNode.MappingInformationType;\n      const referenceType = ColorNode.ReferenceInformationType;\n      const buffer = ColorNode.Colors.a;\n      let indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n    parseMaterialIndices(MaterialNode) {\n      const mappingType = MaterialNode.MappingInformationType;\n      const referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n      const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      const materialIndices = [];\n      for (let i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n    parseNurbsGeometry(geoNode) {\n      if (THREE.NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new THREE.BufferGeometry();\n      }\n      const order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new THREE.BufferGeometry();\n      }\n      const degree = order - 1;\n      const knots = geoNode.KnotVector.a;\n      const controlPoints = [];\n      const pointsValues = geoNode.Points.a;\n      for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n      }\n      let startKnot, endKnot;\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (let i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n      const curve = new THREE.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      const points = curve.getPoints(controlPoints.length * 12);\n      return new THREE.BufferGeometry().setFromPoints(points);\n    }\n  } // parse animation data from FBXTree\n\n  class AnimationParser {\n    // take raw animation clips and turn them into three.js animation clips\n    parse() {\n      const animationClips = [];\n      const rawClips = this.parseClips();\n      if (rawClips !== undefined) {\n        for (const key in rawClips) {\n          const rawClip = rawClips[key];\n          const clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n      return animationClips;\n    }\n    parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      const curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      const layersMap = this.parseAnimationLayers(curveNodesMap);\n      const rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    } // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n\n    parseAnimationCurveNodes() {\n      const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      const curveNodesMap = new Map();\n      for (const nodeID in rawCurveNodes) {\n        const rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          const curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n\n    parseAnimationCurves(curveNodesMap) {\n      const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (const nodeID in rawCurves) {\n        const animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        const relationships = connections.get(animationCurve.id);\n        if (relationships !== undefined) {\n          const animationCurveID = relationships.parents[0].ID;\n          const animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n    parseAnimationLayers(curveNodesMap) {\n      const rawLayers = fbxTree.Objects.AnimationLayer;\n      const layersMap = new Map();\n      for (const nodeID in rawLayers) {\n        const layerCurveNodes = [];\n        const connection = connections.get(parseInt(nodeID));\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          const children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  if (modelID !== undefined) {\n                    const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n                    const node = {\n                      modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new THREE.Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  const morpherID = connections.get(deformerID).parents[0].ID;\n                  const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  const modelID = connections.get(geoID).parents[0].ID;\n                  const rawModel = fbxTree.Objects.Model[modelID];\n                  const node = {\n                    modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n      return layersMap;\n    } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\n    parseAnimStacks(layersMap) {\n      const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      const rawClips = {};\n      for (const nodeID in rawStacks) {\n        const children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n        const layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    }\n    addClip(rawClip) {\n      let tracks = [];\n      const scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new THREE.AnimationClip(rawClip.name, -1, tracks);\n    }\n    generateTracks(rawTracks) {\n      const tracks = [];\n      let initialPosition = new THREE.Vector3();\n      let initialRotation = new THREE.Quaternion();\n      let initialScale = new THREE.Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== undefined) {\n        const morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n      return tracks;\n    }\n    generateVectorTrack(modelName, curves, initialValue, type) {\n      const times = this.getTimesForAllAxes(curves);\n      const values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n    }\n    generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\n      }\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\n      }\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\n      }\n      const times = this.getTimesForAllAxes(curves);\n      const values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(THREE.MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new THREE.Euler().fromArray(preRotation);\n        preRotation = new THREE.Quaternion().setFromEuler(preRotation);\n      }\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(THREE.MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new THREE.Euler().fromArray(postRotation);\n        postRotation = new THREE.Quaternion().setFromEuler(postRotation).invert();\n      }\n      const quaternion = new THREE.Quaternion();\n      const euler = new THREE.Euler();\n      const quaternionValues = [];\n      for (let i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    }\n    generateMorphTrack(rawTracks) {\n      const curves = rawTracks.DeformPercent.curves.morph;\n      const values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    } // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n\n    getTimesForAllAxes(curves) {\n      let times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        let targetIndex = 1;\n        let lastValue = times[0];\n        for (let i = 1; i < times.length; i++) {\n          const currentValue = times[i];\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n        times = times.slice(0, targetIndex);\n      }\n      return times;\n    }\n    getKeyframeTrackValues(times, curves, initialValue) {\n      const prevValue = initialValue;\n      const values = [];\n      let xIndex = -1;\n      let yIndex = -1;\n      let zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          const xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          const yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          const zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    } // Rotations are defined as THREE.Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n\n    interpolateRotations(curve) {\n      for (let i = 1; i < curve.values.length; i++) {\n        const initialValue = curve.values[i - 1];\n        const valuesSpan = curve.values[i] - initialValue;\n        const absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          const numSubIntervals = absoluteSpan / 180;\n          const step = valuesSpan / numSubIntervals;\n          let nextValue = initialValue + step;\n          const initialTime = curve.times[i - 1];\n          const timeSpan = curve.times[i] - initialTime;\n          const interval = timeSpan / numSubIntervals;\n          let nextTime = initialTime + interval;\n          const interpolatedTimes = [];\n          const interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  } // parse an FBX file in ASCII format\n\n  class TextParser {\n    getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n    getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n    getCurrentProp() {\n      return this.currentProp;\n    }\n    pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n    popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n    setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n    parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      const scope = this;\n      const split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        const matchComment = line.match(/^[\\s\\t]*;/);\n        const matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n    parseNodeBegin(line, property) {\n      const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      const nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      const node = {\n        name: nodeName\n      };\n      const attrs = this.parseNodeAttr(nodeAttrs);\n      const currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n    parseNodeAttr(attrs) {\n      let id = attrs[0];\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      let name = '',\n        type = '';\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n    parseNodeProperty(line, property, contentLine) {\n      let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n      const currentNode = this.getCurrentNode();\n      const parentName = currentNode.name;\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n      if (propName === 'C') {\n        const connProps = propValue.split(',').slice(1);\n        const from = parseInt(connProps[0]);\n        const to = parseInt(connProps[1]);\n        let rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n    parseNodePropertyContinued(line) {\n      const currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    } // parse \"Property70\"\n\n    parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      const props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      const innerPropName = props[0];\n      const innerPropType1 = props[1];\n      const innerPropType2 = props[2];\n      const innerPropFlag = props[3];\n      let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n      this.getPrevNode()[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  } // Parse an FBX file in Binary format\n\n  class BinaryParser {\n    parse(buffer) {\n      const reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      const version = reader.getUint32();\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n      const allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        const node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    } // Check if reader has reached the end of content.\n\n    endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    } // recursively parse nodes until the end of the file is reached\n\n    parseNode(reader, version) {\n      const node = {}; // The first three data sizes depends on version.\n\n      const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      const nameLen = reader.getUint8();\n      const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      const propertyList = [];\n      for (let i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n      const id = propertyList.length > 0 ? propertyList[0] : '';\n      const attrName = propertyList.length > 1 ? propertyList[1] : '';\n      const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        const subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    }\n    parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        const value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        const array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        const keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        let innerPropName = subNode.propertyList[0];\n        let innerPropType1 = subNode.propertyList[1];\n        const innerPropType2 = subNode.propertyList[2];\n        const innerPropFlag = subNode.propertyList[3];\n        let innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n        node[innerPropName] = {\n          'type': innerPropType1,\n          'type2': innerPropType2,\n          'flag': innerPropFlag,\n          'value': innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n    parseProperty(reader) {\n      const type = reader.getString(1);\n      let length;\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n        case 'D':\n          return reader.getFloat64();\n        case 'F':\n          return reader.getFloat32();\n        case 'I':\n          return reader.getInt32();\n        case 'L':\n          return reader.getInt64();\n        case 'R':\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case 'S':\n          length = reader.getUint32();\n          return reader.getString(length);\n        case 'Y':\n          return reader.getInt16();\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          const arrayLength = reader.getUint32();\n          const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          const compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          if (typeof fflate === 'undefined') {\n            console.error('THREE.FBXLoader: External library fflate.min.js required.');\n          }\n          const data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          const reader2 = new BinaryReader(data.buffer);\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  }\n  class BinaryReader {\n    constructor(buffer, littleEndian) {\n      this.dv = new DataView(buffer);\n      this.offset = 0;\n      this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n    }\n    getOffset() {\n      return this.offset;\n    }\n    size() {\n      return this.dv.buffer.byteLength;\n    }\n    skip(length) {\n      this.offset += length;\n    } // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n\n    getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n    getBooleanArray(size) {\n      const a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    }\n    getUint8() {\n      const value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n    getInt16() {\n      const value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n    getInt32() {\n      const value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n    getInt32Array(size) {\n      const a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    }\n    getUint32() {\n      const value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    } // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n\n    getInt64() {\n      let low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n      return high * 0x100000000 + low;\n    }\n    getInt64Array(size) {\n      const a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    } // Note: see getInt64() comment\n\n    getUint64() {\n      let low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 0x100000000 + low;\n    }\n    getFloat32() {\n      const value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n    getFloat32Array(size) {\n      const a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    }\n    getFloat64() {\n      const value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n    getFloat64Array(size) {\n      const a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    }\n    getArrayBuffer(size) {\n      const value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n    getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      let a = [];\n      for (let i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      const nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  } // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  class FBXTree {\n    add(key, val) {\n      this[key] = val;\n    }\n  } // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n  function isFbxFormatASCII(text) {\n    const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    let cursor = 0;\n    function read(offset) {\n      const result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n    for (let i = 0; i < CORRECT.length; ++i) {\n      const num = read(1);\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function getFbxVersion(text) {\n    const versionRegExp = /FBXVersion: (\\d+)/;\n    const match = text.match(versionRegExp);\n    if (match) {\n      const version = parseInt(match[1]);\n      return version;\n    }\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n  const dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    let index;\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    const from = index * infoObject.dataSize;\n    const to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n  const tempEuler = new THREE.Euler();\n  const tempVec = new THREE.Vector3(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\n  function generateTransform(transformData) {\n    const lTranslationM = new THREE.Matrix4();\n    const lPreRotationM = new THREE.Matrix4();\n    const lRotationM = new THREE.Matrix4();\n    const lPostRotationM = new THREE.Matrix4();\n    const lScalingM = new THREE.Matrix4();\n    const lScalingPivotM = new THREE.Matrix4();\n    const lScalingOffsetM = new THREE.Matrix4();\n    const lRotationOffsetM = new THREE.Matrix4();\n    const lRotationPivotM = new THREE.Matrix4();\n    const lParentGX = new THREE.Matrix4();\n    const lParentLX = new THREE.Matrix4();\n    const lGlobalT = new THREE.Matrix4();\n    const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n    if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n    if (transformData.preRotation) {\n      const array = transformData.preRotation.map(THREE.MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n    if (transformData.rotation) {\n      const array = transformData.rotation.map(THREE.MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n    if (transformData.postRotation) {\n      const array = transformData.postRotation.map(THREE.MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n      lPostRotationM.invert();\n    }\n    if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n    if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n    if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n    if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n    if (transformData.parentMatrixWorld) {\n      lParentLX.copy(transformData.parentMatrix);\n      lParentGX.copy(transformData.parentMatrixWorld);\n    }\n    const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n    const lParentGRM = new THREE.Matrix4();\n    lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n    const lParentTM = new THREE.Matrix4();\n    lParentTM.copyPosition(lParentGX);\n    const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n    const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n    const lLSM = lScalingM;\n    const lGlobalRS = new THREE.Matrix4();\n    if (inheritType === 0) {\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n    } else if (inheritType === 1) {\n      lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n    } else {\n      const lParentLSM = new THREE.Matrix4().scale(new THREE.Vector3().setFromMatrixScale(lParentLX));\n      const lParentLSM_inv = lParentLSM.clone().invert();\n      const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n    }\n    const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n    const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n    let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n    const lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\n    const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n    lGlobalT.copyPosition(lGlobalTranslation);\n    lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n    lTransform.premultiply(lParentGX.invert());\n    return lTransform;\n  } // Returns the three.js intrinsic THREE.Euler order corresponding to FBX extrinsic THREE.Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n  function getEulerOrder(order) {\n    order = order || 0;\n    const enums = ['ZYX',\n    // -> XYZ extrinsic\n    'YZX',\n    // -> XZY extrinsic\n    'XZY',\n    // -> YZX extrinsic\n    'ZXY',\n    // -> YXZ extrinsic\n    'YXZ',\n    // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported THREE.Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n  function parseNumberArray(value) {\n    const array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n  function append(a, b) {\n    for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n  function slice(a, b, from, to) {\n    for (let i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n    return a;\n  } // inject array a2 into array a1 at index\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n  THREE.FBXLoader = FBXLoader;\n})();\nmodule.exports = exports = THREE.FBXLoader;","map":{"version":3,"names":["THREE","require","fflate","fbxTree","connections","sceneGraph","FBXLoader","Loader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","MathUtils","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","toArray","Euler","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2","module","exports"],"sources":["/Users/mihailbaleev/Documents/GitHub/Lastochka_spraying/frontend/node_modules/threebox-plugin/src/objects/loaders/FBXLoader.js"],"sourcesContent":["const THREE = require('../../three.js');\r\nconst fflate = require('../fflate.min.js');\r\n\r\n/**co\r\n * @author Kyle-Larson https://github.com/Kyle-Larson\r\n * @author Takahiro https://github.com/takahirox\r\n * @author Lewy Blue https://github.com/looeee\r\n *\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\r\n\r\n\r\n/**\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\r\n\r\n\r\n(function () {\r\n\r\n\t/**\r\n * THREE.Loader loads FBX file and generates THREE.Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\r\n\r\n\tlet fbxTree;\r\n\tlet connections;\r\n\tlet sceneGraph;\r\n\r\n\tclass FBXLoader extends THREE.Loader {\r\n\r\n\t\tconstructor(manager) {\r\n\r\n\t\t\tsuper(manager);\r\n\r\n\t\t}\r\n\r\n\t\tload(url, onLoad, onProgress, onError) {\r\n\r\n\t\t\tconst scope = this;\r\n\t\t\tconst path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\r\n\t\t\tconst loader = new THREE.FileLoader(this.manager);\r\n\t\t\tloader.setPath(scope.path);\r\n\t\t\tloader.setResponseType('arraybuffer');\r\n\t\t\tloader.setRequestHeader(scope.requestHeader);\r\n\t\t\tloader.setWithCredentials(scope.withCredentials);\r\n\t\t\tloader.load(url, function (buffer) {\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tonLoad(scope.parse(buffer, path));\r\n\r\n\t\t\t\t} catch (e) {\r\n\r\n\t\t\t\t\tif (onError) {\r\n\r\n\t\t\t\t\t\tonError(e);\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.error(e);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError(url);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError);\r\n\r\n\t\t}\r\n\r\n\t\tparse(FBXBuffer, path) {\r\n\r\n\t\t\tif (isFbxFormatBinary(FBXBuffer)) {\r\n\r\n\t\t\t\tfbxTree = new BinaryParser().parse(FBXBuffer);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst FBXText = convertArrayBufferToString(FBXBuffer);\r\n\r\n\t\t\t\tif (!isFbxFormatASCII(FBXText)) {\r\n\r\n\t\t\t\t\tthrow new Error('THREE.FBXLoader: Unknown format.');\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (getFbxVersion(FBXText) < 7000) {\r\n\r\n\t\t\t\t\tthrow new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfbxTree = new TextParser().parse(FBXText);\r\n\r\n\t\t\t} // console.log( fbxTree );\r\n\r\n\r\n\t\t\tconst textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\r\n\t\t\treturn new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\r\n\r\n\t\t}\r\n\r\n\t} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\r\n\r\n\r\n\tclass FBXTreeParser {\r\n\r\n\t\tconstructor(textureLoader, manager) {\r\n\r\n\t\t\tthis.textureLoader = textureLoader;\r\n\t\t\tthis.manager = manager;\r\n\r\n\t\t}\r\n\r\n\t\tparse() {\r\n\r\n\t\t\tconnections = this.parseConnections();\r\n\t\t\tconst images = this.parseImages();\r\n\t\t\tconst textures = this.parseTextures(images);\r\n\t\t\tconst materials = this.parseMaterials(textures);\r\n\t\t\tconst deformers = this.parseDeformers();\r\n\t\t\tconst geometryMap = new GeometryParser().parse(deformers);\r\n\t\t\tthis.parseScene(deformers, geometryMap, materials);\r\n\t\t\treturn sceneGraph;\r\n\r\n\t\t} // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\r\n\t\t// and details the connection type\r\n\r\n\r\n\t\tparseConnections() {\r\n\r\n\t\t\tconst connectionMap = new Map();\r\n\r\n\t\t\tif ('Connections' in fbxTree) {\r\n\r\n\t\t\t\tconst rawConnections = fbxTree.Connections.connections;\r\n\t\t\t\trawConnections.forEach(function (rawConnection) {\r\n\r\n\t\t\t\t\tconst fromID = rawConnection[0];\r\n\t\t\t\t\tconst toID = rawConnection[1];\r\n\t\t\t\t\tconst relationship = rawConnection[2];\r\n\r\n\t\t\t\t\tif (!connectionMap.has(fromID)) {\r\n\r\n\t\t\t\t\t\tconnectionMap.set(fromID, {\r\n\t\t\t\t\t\t\tparents: [],\r\n\t\t\t\t\t\t\tchildren: []\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst parentRelationship = {\r\n\t\t\t\t\t\tID: toID,\r\n\t\t\t\t\t\trelationship: relationship\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconnectionMap.get(fromID).parents.push(parentRelationship);\r\n\r\n\t\t\t\t\tif (!connectionMap.has(toID)) {\r\n\r\n\t\t\t\t\t\tconnectionMap.set(toID, {\r\n\t\t\t\t\t\t\tparents: [],\r\n\t\t\t\t\t\t\tchildren: []\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst childRelationship = {\r\n\t\t\t\t\t\tID: fromID,\r\n\t\t\t\t\t\trelationship: relationship\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconnectionMap.get(toID).children.push(childRelationship);\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn connectionMap;\r\n\r\n\t\t} // Parse FBXTree.Objects.Video for embedded image data\r\n\t\t// These images are connected to textures in FBXTree.Objects.Textures\r\n\t\t// via FBXTree.Connections.\r\n\r\n\r\n\t\tparseImages() {\r\n\r\n\t\t\tconst images = {};\r\n\t\t\tconst blobs = {};\r\n\r\n\t\t\tif ('Video' in fbxTree.Objects) {\r\n\r\n\t\t\t\tconst videoNodes = fbxTree.Objects.Video;\r\n\r\n\t\t\t\tfor (const nodeID in videoNodes) {\r\n\r\n\t\t\t\t\tconst videoNode = videoNodes[nodeID];\r\n\t\t\t\t\tconst id = parseInt(nodeID);\r\n\t\t\t\t\timages[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\r\n\r\n\t\t\t\t\tif ('Content' in videoNode) {\r\n\r\n\t\t\t\t\t\tconst arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\r\n\t\t\t\t\t\tconst base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\r\n\r\n\t\t\t\t\t\tif (arrayBufferContent || base64Content) {\r\n\r\n\t\t\t\t\t\t\tconst image = this.parseImage(videoNodes[nodeID]);\r\n\t\t\t\t\t\t\tblobs[videoNode.RelativeFilename || videoNode.Filename] = image;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor (const id in images) {\r\n\r\n\t\t\t\tconst filename = images[id];\r\n\t\t\t\tif (blobs[filename] !== undefined) images[id] = blobs[filename]; else images[id] = images[id].split('\\\\').pop();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn images;\r\n\r\n\t\t} // Parse embedded image data in FBXTree.Video.Content\r\n\r\n\r\n\t\tparseImage(videoNode) {\r\n\r\n\t\t\tconst content = videoNode.Content;\r\n\t\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\r\n\t\t\tconst extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\r\n\t\t\tlet type;\r\n\r\n\t\t\tswitch (extension) {\r\n\r\n\t\t\t\tcase 'bmp':\r\n\t\t\t\t\ttype = 'image/bmp';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'jpg':\r\n\t\t\t\tcase 'jpeg':\r\n\t\t\t\t\ttype = 'image/jpeg';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'png':\r\n\t\t\t\t\ttype = 'image/png';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tif':\r\n\t\t\t\t\ttype = 'image/tiff';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tga':\r\n\t\t\t\t\tif (this.manager.getHandler('.tga') === null) {\r\n\r\n\t\t\t\t\t\tconsole.warn('FBXLoader: TGA loader not found, skipping ', fileName);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttype = 'image/tga';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof content === 'string') {\r\n\r\n\t\t\t\t// ASCII format\r\n\t\t\t\treturn 'data:' + type + ';base64,' + content;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Binary Format\r\n\t\t\t\tconst array = new Uint8Array(content);\r\n\t\t\t\treturn window.URL.createObjectURL(new Blob([array], {\r\n\t\t\t\t\ttype: type\r\n\t\t\t\t}));\r\n\r\n\t\t\t}\r\n\r\n\t\t} // Parse nodes in FBXTree.Objects.Texture\r\n\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\r\n\t\t// to images in FBXTree.Objects.Video\r\n\r\n\r\n\t\tparseTextures(images) {\r\n\r\n\t\t\tconst textureMap = new Map();\r\n\r\n\t\t\tif ('Texture' in fbxTree.Objects) {\r\n\r\n\t\t\t\tconst textureNodes = fbxTree.Objects.Texture;\r\n\r\n\t\t\t\tfor (const nodeID in textureNodes) {\r\n\r\n\t\t\t\t\tconst texture = this.parseTexture(textureNodes[nodeID], images);\r\n\t\t\t\t\ttextureMap.set(parseInt(nodeID), texture);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textureMap;\r\n\r\n\t\t} // Parse individual node in FBXTree.Objects.Texture\r\n\r\n\r\n\t\tparseTexture(textureNode, images) {\r\n\r\n\t\t\tconst texture = this.loadTexture(textureNode, images);\r\n\t\t\ttexture.ID = textureNode.id;\r\n\t\t\ttexture.name = textureNode.attrName;\r\n\t\t\tconst wrapModeU = textureNode.WrapModeU;\r\n\t\t\tconst wrapModeV = textureNode.WrapModeV;\r\n\t\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\r\n\t\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\r\n\t\t\t// 0: repeat(default), 1: clamp\r\n\r\n\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\r\n\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\r\n\r\n\t\t\tif ('Scaling' in textureNode) {\r\n\r\n\t\t\t\tconst values = textureNode.Scaling.value;\r\n\t\t\t\ttexture.repeat.x = values[0];\r\n\t\t\t\ttexture.repeat.y = values[1];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t} // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\r\n\r\n\r\n\t\tloadTexture(textureNode, images) {\r\n\r\n\t\t\tlet fileName;\r\n\t\t\tconst currentPath = this.textureLoader.path;\r\n\t\t\tconst children = connections.get(textureNode.id).children;\r\n\r\n\t\t\tif (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\r\n\r\n\t\t\t\tfileName = images[children[0].ID];\r\n\r\n\t\t\t\tif (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\r\n\r\n\t\t\t\t\tthis.textureLoader.setPath(undefined);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet texture;\r\n\t\t\tconst extension = textureNode.FileName.slice(- 3).toLowerCase();\r\n\r\n\t\t\tif (extension === 'tga') {\r\n\r\n\t\t\t\tconst loader = this.manager.getHandler('.tga');\r\n\r\n\t\t\t\tif (loader === null) {\r\n\r\n\t\t\t\t\tconsole.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\r\n\t\t\t\t\ttexture = new THREE.Texture();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tloader.setPath(this.textureLoader.path);\r\n\t\t\t\t\ttexture = loader.load(fileName);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (extension === 'psd') {\r\n\r\n\t\t\t\tconsole.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\r\n\t\t\t\ttexture = new THREE.Texture();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = this.textureLoader.load(fileName);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.textureLoader.setPath(currentPath);\r\n\t\t\treturn texture;\r\n\r\n\t\t} // Parse nodes in FBXTree.Objects.Material\r\n\r\n\r\n\t\tparseMaterials(textureMap) {\r\n\r\n\t\t\tconst materialMap = new Map();\r\n\r\n\t\t\tif ('Material' in fbxTree.Objects) {\r\n\r\n\t\t\t\tconst materialNodes = fbxTree.Objects.Material;\r\n\r\n\t\t\t\tfor (const nodeID in materialNodes) {\r\n\r\n\t\t\t\t\tconst material = this.parseMaterial(materialNodes[nodeID], textureMap);\r\n\t\t\t\t\tif (material !== null) materialMap.set(parseInt(nodeID), material);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materialMap;\r\n\r\n\t\t} // Parse single node in FBXTree.Objects.Material\r\n\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\r\n\t\t// FBX format currently only supports Lambert and Phong shading models\r\n\r\n\r\n\t\tparseMaterial(materialNode, textureMap) {\r\n\r\n\t\t\tconst ID = materialNode.id;\r\n\t\t\tconst name = materialNode.attrName;\r\n\t\t\tlet type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\r\n\r\n\t\t\tif (typeof type === 'object') {\r\n\r\n\t\t\t\ttype = type.value;\r\n\r\n\t\t\t} // Ignore unused materials which don't have any connections.\r\n\r\n\r\n\t\t\tif (!connections.has(ID)) return null;\r\n\t\t\tconst parameters = this.parseParameters(materialNode, textureMap, ID);\r\n\t\t\tlet material;\r\n\r\n\t\t\tswitch (type.toLowerCase()) {\r\n\r\n\t\t\t\tcase 'phong':\r\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'lambert':\r\n\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to THREE.MeshPhongMaterial.', type);\r\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.setValues(parameters);\r\n\t\t\tmaterial.name = name;\r\n\t\t\treturn material;\r\n\r\n\t\t} // Parse FBX material and return parameters suitable for a three.js material\r\n\t\t// Also parse the texture map and return any textures associated with the material\r\n\r\n\r\n\t\tparseParameters(materialNode, textureMap, ID) {\r\n\r\n\t\t\tconst parameters = {};\r\n\r\n\t\t\tif (materialNode.BumpFactor) {\r\n\r\n\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.Diffuse) {\r\n\r\n\t\t\t\tparameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\r\n\r\n\t\t\t} else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\r\n\r\n\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\r\n\t\t\t\tparameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.DisplacementFactor) {\r\n\r\n\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.Emissive) {\r\n\r\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\r\n\r\n\t\t\t} else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\r\n\r\n\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\r\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.EmissiveFactor) {\r\n\r\n\t\t\t\tparameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.Opacity) {\r\n\r\n\t\t\t\tparameters.opacity = parseFloat(materialNode.Opacity.value);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (parameters.opacity < 1.0) {\r\n\r\n\t\t\t\tparameters.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.ReflectionFactor) {\r\n\r\n\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.Shininess) {\r\n\r\n\t\t\t\tparameters.shininess = materialNode.Shininess.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (materialNode.Specular) {\r\n\r\n\t\t\t\tparameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\r\n\r\n\t\t\t} else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\r\n\r\n\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\r\n\t\t\t\tparameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst scope = this;\r\n\t\t\tconnections.get(ID).children.forEach(function (child) {\r\n\r\n\t\t\t\tconst type = child.relationship;\r\n\r\n\t\t\t\tswitch (type) {\r\n\r\n\t\t\t\t\tcase 'Bump':\r\n\t\t\t\t\t\tparameters.bumpMap = scope.getTexture(textureMap, child.ID);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Maya|TEX_ao_map':\r\n\t\t\t\t\t\tparameters.aoMap = scope.getTexture(textureMap, child.ID);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'DiffuseColor':\r\n\t\t\t\t\tcase 'Maya|TEX_color_map':\r\n\t\t\t\t\t\tparameters.map = scope.getTexture(textureMap, child.ID);\r\n\r\n\t\t\t\t\t\tif (parameters.map !== undefined) {\r\n\r\n\t\t\t\t\t\t\tparameters.map.encoding = THREE.sRGBEncoding;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'DisplacementColor':\r\n\t\t\t\t\t\tparameters.displacementMap = scope.getTexture(textureMap, child.ID);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'EmissiveColor':\r\n\t\t\t\t\t\tparameters.emissiveMap = scope.getTexture(textureMap, child.ID);\r\n\r\n\t\t\t\t\t\tif (parameters.emissiveMap !== undefined) {\r\n\r\n\t\t\t\t\t\t\tparameters.emissiveMap.encoding = THREE.sRGBEncoding;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'NormalMap':\r\n\t\t\t\t\tcase 'Maya|TEX_normal_map':\r\n\t\t\t\t\t\tparameters.normalMap = scope.getTexture(textureMap, child.ID);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'ReflectionColor':\r\n\t\t\t\t\t\tparameters.envMap = scope.getTexture(textureMap, child.ID);\r\n\r\n\t\t\t\t\t\tif (parameters.envMap !== undefined) {\r\n\r\n\t\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\r\n\t\t\t\t\t\t\tparameters.envMap.encoding = THREE.sRGBEncoding;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SpecularColor':\r\n\t\t\t\t\t\tparameters.specularMap = scope.getTexture(textureMap, child.ID);\r\n\r\n\t\t\t\t\t\tif (parameters.specularMap !== undefined) {\r\n\r\n\t\t\t\t\t\t\tparameters.specularMap.encoding = THREE.sRGBEncoding;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TransparentColor':\r\n\t\t\t\t\tcase 'TransparencyFactor':\r\n\t\t\t\t\t\tparameters.alphaMap = scope.getTexture(textureMap, child.ID);\r\n\t\t\t\t\t\tparameters.transparent = true;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'AmbientColor':\r\n\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\r\n\r\n\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\r\n\r\n\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\treturn parameters;\r\n\r\n\t\t} // get a texture from the textureMap for use by a material.\r\n\r\n\r\n\t\tgetTexture(textureMap, id) {\r\n\r\n\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\r\n\t\t\tif ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\r\n\r\n\t\t\t\tconsole.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\r\n\t\t\t\tid = connections.get(id).children[0].ID;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textureMap.get(id);\r\n\r\n\t\t} // Parse nodes in FBXTree.Objects.Deformer\r\n\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\r\n\t\t// Generates map of THREE.Skeleton-like objects for use later when generating and binding skeletons.\r\n\r\n\r\n\t\tparseDeformers() {\r\n\r\n\t\t\tconst skeletons = {};\r\n\t\t\tconst morphTargets = {};\r\n\r\n\t\t\tif ('Deformer' in fbxTree.Objects) {\r\n\r\n\t\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\r\n\r\n\t\t\t\tfor (const nodeID in DeformerNodes) {\r\n\r\n\t\t\t\t\tconst deformerNode = DeformerNodes[nodeID];\r\n\t\t\t\t\tconst relationships = connections.get(parseInt(nodeID));\r\n\r\n\t\t\t\t\tif (deformerNode.attrType === 'Skin') {\r\n\r\n\t\t\t\t\t\tconst skeleton = this.parseSkeleton(relationships, DeformerNodes);\r\n\t\t\t\t\t\tskeleton.ID = nodeID;\r\n\t\t\t\t\t\tif (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\r\n\t\t\t\t\t\tskeleton.geometryID = relationships.parents[0].ID;\r\n\t\t\t\t\t\tskeletons[nodeID] = skeleton;\r\n\r\n\t\t\t\t\t} else if (deformerNode.attrType === 'BlendShape') {\r\n\r\n\t\t\t\t\t\tconst morphTarget = {\r\n\t\t\t\t\t\t\tid: nodeID\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\r\n\t\t\t\t\t\tmorphTarget.id = nodeID;\r\n\t\t\t\t\t\tif (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\r\n\t\t\t\t\t\tmorphTargets[nodeID] = morphTarget;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tskeletons: skeletons,\r\n\t\t\t\tmorphTargets: morphTargets\r\n\t\t\t};\r\n\r\n\t\t} // Parse single nodes in FBXTree.Objects.Deformer\r\n\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\r\n\t\t// Each skin node represents a skeleton and each cluster node represents a bone\r\n\r\n\r\n\t\tparseSkeleton(relationships, deformerNodes) {\r\n\r\n\t\t\tconst rawBones = [];\r\n\t\t\trelationships.children.forEach(function (child) {\r\n\r\n\t\t\t\tconst boneNode = deformerNodes[child.ID];\r\n\t\t\t\tif (boneNode.attrType !== 'Cluster') return;\r\n\t\t\t\tconst rawBone = {\r\n\t\t\t\t\tID: child.ID,\r\n\t\t\t\t\tindices: [],\r\n\t\t\t\t\tweights: [],\r\n\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a) // transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\r\n\t\t\t\t\t// linkMode: boneNode.Mode,\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif ('Indexes' in boneNode) {\r\n\r\n\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\r\n\t\t\t\t\trawBone.weights = boneNode.Weights.a;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trawBones.push(rawBone);\r\n\r\n\t\t\t});\r\n\t\t\treturn {\r\n\t\t\t\trawBones: rawBones,\r\n\t\t\t\tbones: []\r\n\t\t\t};\r\n\r\n\t\t} // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\r\n\r\n\r\n\t\tparseMorphTargets(relationships, deformerNodes) {\r\n\r\n\t\t\tconst rawMorphTargets = [];\r\n\r\n\t\t\tfor (let i = 0; i < relationships.children.length; i++) {\r\n\r\n\t\t\t\tconst child = relationships.children[i];\r\n\t\t\t\tconst morphTargetNode = deformerNodes[child.ID];\r\n\t\t\t\tconst rawMorphTarget = {\r\n\t\t\t\t\tname: morphTargetNode.attrName,\r\n\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\r\n\t\t\t\t\tid: morphTargetNode.id,\r\n\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\r\n\t\t\t\t};\r\n\t\t\t\tif (morphTargetNode.attrType !== 'BlendShapeChannel') return;\r\n\t\t\t\trawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\r\n\r\n\t\t\t\t\treturn child.relationship === undefined;\r\n\r\n\t\t\t\t})[0].ID;\r\n\t\t\t\trawMorphTargets.push(rawMorphTarget);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn rawMorphTargets;\r\n\r\n\t\t} // create the main THREE.Group() to be returned by the loader\r\n\r\n\r\n\t\tparseScene(deformers, geometryMap, materialMap) {\r\n\r\n\t\t\tsceneGraph = new THREE.Group();\r\n\t\t\tconst modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\r\n\t\t\tconst modelNodes = fbxTree.Objects.Model;\r\n\t\t\tconst scope = this;\r\n\t\t\tmodelMap.forEach(function (model) {\r\n\r\n\t\t\t\tconst modelNode = modelNodes[model.ID];\r\n\t\t\t\tscope.setLookAtProperties(model, modelNode);\r\n\t\t\t\tconst parentConnections = connections.get(model.ID).parents;\r\n\t\t\t\tparentConnections.forEach(function (connection) {\r\n\r\n\t\t\t\t\tconst parent = modelMap.get(connection.ID);\r\n\t\t\t\t\tif (parent !== undefined) parent.add(model);\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (model.parent === null) {\r\n\r\n\t\t\t\t\tsceneGraph.add(model);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\tthis.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\r\n\t\t\tthis.createAmbientLight();\r\n\t\t\tsceneGraph.traverse(function (node) {\r\n\r\n\t\t\t\tif (node.userData.transformData) {\r\n\r\n\t\t\t\t\tif (node.parent) {\r\n\r\n\t\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\r\n\t\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst transform = generateTransform(node.userData.transformData);\r\n\t\t\t\t\tnode.applyMatrix4(transform);\r\n\t\t\t\t\tnode.updateWorldMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\tconst animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\r\n\r\n\t\t\tif (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\r\n\r\n\t\t\t\tsceneGraph.children[0].animations = animations;\r\n\t\t\t\tsceneGraph = sceneGraph.children[0];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsceneGraph.animations = animations;\r\n\r\n\t\t} // parse nodes in FBXTree.Objects.Model\r\n\r\n\r\n\t\tparseModels(skeletons, geometryMap, materialMap) {\r\n\r\n\t\t\tconst modelMap = new Map();\r\n\t\t\tconst modelNodes = fbxTree.Objects.Model;\r\n\r\n\t\t\tfor (const nodeID in modelNodes) {\r\n\r\n\t\t\t\tconst id = parseInt(nodeID);\r\n\t\t\t\tconst node = modelNodes[nodeID];\r\n\t\t\t\tconst relationships = connections.get(id);\r\n\t\t\t\tlet model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\r\n\r\n\t\t\t\tif (!model) {\r\n\r\n\t\t\t\t\tswitch (node.attrType) {\r\n\r\n\t\t\t\t\t\tcase 'Camera':\r\n\t\t\t\t\t\t\tmodel = this.createCamera(relationships);\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Light':\r\n\t\t\t\t\t\t\tmodel = this.createLight(relationships);\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Mesh':\r\n\t\t\t\t\t\t\tmodel = this.createMesh(relationships, geometryMap, materialMap);\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'NurbsCurve':\r\n\t\t\t\t\t\t\tmodel = this.createCurve(relationships, geometryMap);\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'LimbNode':\r\n\t\t\t\t\t\tcase 'Root':\r\n\t\t\t\t\t\t\tmodel = new THREE.Bone();\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Null':\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tmodel = new THREE.Group();\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmodel.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\r\n\t\t\t\t\tmodel.ID = id;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.getTransformData(model, node);\r\n\t\t\t\tmodelMap.set(id, model);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn modelMap;\r\n\r\n\t\t}\r\n\r\n\t\tbuildSkeleton(relationships, skeletons, id, name) {\r\n\r\n\t\t\tlet bone = null;\r\n\t\t\trelationships.parents.forEach(function (parent) {\r\n\r\n\t\t\t\tfor (const ID in skeletons) {\r\n\r\n\t\t\t\t\tconst skeleton = skeletons[ID];\r\n\t\t\t\t\tskeleton.rawBones.forEach(function (rawBone, i) {\r\n\r\n\t\t\t\t\t\tif (rawBone.ID === parent.ID) {\r\n\r\n\t\t\t\t\t\t\tconst subBone = bone;\r\n\t\t\t\t\t\t\tbone = new THREE.Bone();\r\n\t\t\t\t\t\t\tbone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\r\n\r\n\t\t\t\t\t\t\tbone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\r\n\t\t\t\t\t\t\tbone.ID = id;\r\n\t\t\t\t\t\t\tskeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\r\n\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\r\n\r\n\t\t\t\t\t\t\tif (subBone !== null) {\r\n\r\n\t\t\t\t\t\t\t\tbone.add(subBone);\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\treturn bone;\r\n\r\n\t\t} // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\r\n\r\n\r\n\t\tcreateCamera(relationships) {\r\n\r\n\t\t\tlet model;\r\n\t\t\tlet cameraAttribute;\r\n\t\t\trelationships.children.forEach(function (child) {\r\n\r\n\t\t\t\tconst attr = fbxTree.Objects.NodeAttribute[child.ID];\r\n\r\n\t\t\t\tif (attr !== undefined) {\r\n\r\n\t\t\t\t\tcameraAttribute = attr;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t\tif (cameraAttribute === undefined) {\r\n\r\n\t\t\t\tmodel = new THREE.Object3D();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet type = 0;\r\n\r\n\t\t\t\tif (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\r\n\r\n\t\t\t\t\ttype = 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nearClippingPlane = 1;\r\n\r\n\t\t\t\tif (cameraAttribute.NearPlane !== undefined) {\r\n\r\n\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet farClippingPlane = 1000;\r\n\r\n\t\t\t\tif (cameraAttribute.FarPlane !== undefined) {\r\n\r\n\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet width = window.innerWidth;\r\n\t\t\t\tlet height = window.innerHeight;\r\n\r\n\t\t\t\tif (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\r\n\r\n\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\r\n\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst aspect = width / height;\r\n\t\t\t\tlet fov = 45;\r\n\r\n\t\t\t\tif (cameraAttribute.FieldOfView !== undefined) {\r\n\r\n\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\r\n\r\n\t\t\t\tswitch (type) {\r\n\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t// Perspective\r\n\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\r\n\t\t\t\t\t\tif (focalLength !== null) model.setFocalLength(focalLength);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t// Orthographic\r\n\t\t\t\t\t\tmodel = new THREE.OrthographicCamera(- width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\r\n\t\t\t\t\t\tmodel = new THREE.Object3D();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn model;\r\n\r\n\t\t} // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\r\n\r\n\r\n\t\tcreateLight(relationships) {\r\n\r\n\t\t\tlet model;\r\n\t\t\tlet lightAttribute;\r\n\t\t\trelationships.children.forEach(function (child) {\r\n\r\n\t\t\t\tconst attr = fbxTree.Objects.NodeAttribute[child.ID];\r\n\r\n\t\t\t\tif (attr !== undefined) {\r\n\r\n\t\t\t\t\tlightAttribute = attr;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t\tif (lightAttribute === undefined) {\r\n\r\n\t\t\t\tmodel = new THREE.Object3D();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet type; // LightType can be undefined for Point lights\r\n\r\n\t\t\t\tif (lightAttribute.LightType === undefined) {\r\n\r\n\t\t\t\t\ttype = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttype = lightAttribute.LightType.value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet color = 0xffffff;\r\n\r\n\t\t\t\tif (lightAttribute.Color !== undefined) {\r\n\r\n\t\t\t\t\tcolor = new THREE.Color().fromArray(lightAttribute.Color.value);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\r\n\r\n\t\t\t\tif (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\r\n\r\n\t\t\t\t\tintensity = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = 0;\r\n\r\n\t\t\t\tif (lightAttribute.FarAttenuationEnd !== undefined) {\r\n\r\n\t\t\t\t\tif (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\r\n\r\n\t\t\t\t\t\tdistance = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\r\n\r\n\r\n\t\t\t\tconst decay = 1;\r\n\r\n\t\t\t\tswitch (type) {\r\n\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t// Point\r\n\t\t\t\t\t\tmodel = new THREE.PointLight(color, intensity, distance, decay);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t// Directional\r\n\t\t\t\t\t\tmodel = new THREE.DirectionalLight(color, intensity);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t// Spot\r\n\t\t\t\t\t\tlet angle = Math.PI / 3;\r\n\r\n\t\t\t\t\t\tif (lightAttribute.InnerAngle !== undefined) {\r\n\r\n\t\t\t\t\t\t\tangle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet penumbra = 0;\r\n\r\n\t\t\t\t\t\tif (lightAttribute.OuterAngle !== undefined) {\r\n\r\n\t\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\r\n\t\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\r\n\t\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\r\n\t\t\t\t\t\t\tpenumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\r\n\t\t\t\t\t\t\tpenumbra = Math.max(penumbra, 1);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmodel = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.');\r\n\t\t\t\t\t\tmodel = new THREE.PointLight(color, intensity);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\r\n\r\n\t\t\t\t\tmodel.castShadow = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn model;\r\n\r\n\t\t}\r\n\r\n\t\tcreateMesh(relationships, geometryMap, materialMap) {\r\n\r\n\t\t\tlet model;\r\n\t\t\tlet geometry = null;\r\n\t\t\tlet material = null;\r\n\t\t\tconst materials = []; // get geometry and materials(s) from connections\r\n\r\n\t\t\trelationships.children.forEach(function (child) {\r\n\r\n\t\t\t\tif (geometryMap.has(child.ID)) {\r\n\r\n\t\t\t\t\tgeometry = geometryMap.get(child.ID);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (materialMap.has(child.ID)) {\r\n\r\n\t\t\t\t\tmaterials.push(materialMap.get(child.ID));\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t\tif (materials.length > 1) {\r\n\r\n\t\t\t\tmaterial = materials;\r\n\r\n\t\t\t} else if (materials.length > 0) {\r\n\r\n\t\t\t\tmaterial = materials[0];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial = new THREE.MeshPhongMaterial({\r\n\t\t\t\t\tcolor: 0xcccccc\r\n\t\t\t\t});\r\n\t\t\t\tmaterials.push(material);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ('color' in geometry.attributes) {\r\n\r\n\t\t\t\tmaterials.forEach(function (material) {\r\n\r\n\t\t\t\t\tmaterial.vertexColors = true;\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (geometry.FBX_Deformer) {\r\n\r\n\t\t\t\tmodel = new THREE.SkinnedMesh(geometry, material);\r\n\t\t\t\tmodel.normalizeSkinWeights();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmodel = new THREE.Mesh(geometry, material);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn model;\r\n\r\n\t\t}\r\n\r\n\t\tcreateCurve(relationships, geometryMap) {\r\n\r\n\t\t\tconst geometry = relationships.children.reduce(function (geo, child) {\r\n\r\n\t\t\t\tif (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\r\n\t\t\t\treturn geo;\r\n\r\n\t\t\t}, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\r\n\r\n\t\t\tconst material = new THREE.LineBasicMaterial({\r\n\t\t\t\tcolor: 0x3300ff,\r\n\t\t\t\tlinewidth: 1\r\n\t\t\t});\r\n\t\t\treturn new THREE.Line(geometry, material);\r\n\r\n\t\t} // parse the model node for transform data\r\n\r\n\r\n\t\tgetTransformData(model, modelNode) {\r\n\r\n\t\t\tconst transformData = {};\r\n\t\t\tif ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\r\n\t\t\tif ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value); else transformData.eulerOrder = 'ZYX';\r\n\t\t\tif ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\r\n\t\t\tif ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\r\n\t\t\tif ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\r\n\t\t\tif ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\r\n\t\t\tif ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\r\n\t\t\tif ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\r\n\t\t\tif ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\r\n\t\t\tif ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\r\n\t\t\tif ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\r\n\t\t\tmodel.userData.transformData = transformData;\r\n\r\n\t\t}\r\n\r\n\t\tsetLookAtProperties(model, modelNode) {\r\n\r\n\t\t\tif ('LookAtProperty' in modelNode) {\r\n\r\n\t\t\t\tconst children = connections.get(model.ID).children;\r\n\t\t\t\tchildren.forEach(function (child) {\r\n\r\n\t\t\t\t\tif (child.relationship === 'LookAtProperty') {\r\n\r\n\t\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[child.ID];\r\n\r\n\t\t\t\t\t\tif ('Lcl_Translation' in lookAtTarget) {\r\n\r\n\t\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value; // THREE.DirectionalLight, THREE.SpotLight\r\n\r\n\t\t\t\t\t\t\tif (model.target !== undefined) {\r\n\r\n\t\t\t\t\t\t\t\tmodel.target.position.fromArray(pos);\r\n\t\t\t\t\t\t\t\tsceneGraph.add(model.target);\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t// Cameras and other Object3Ds\r\n\t\t\t\t\t\t\t\tmodel.lookAt(new THREE.Vector3().fromArray(pos));\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbindSkeleton(skeletons, geometryMap, modelMap) {\r\n\r\n\t\t\tconst bindMatrices = this.parsePoseNodes();\r\n\r\n\t\t\tfor (const ID in skeletons) {\r\n\r\n\t\t\t\tconst skeleton = skeletons[ID];\r\n\t\t\t\tconst parents = connections.get(parseInt(skeleton.ID)).parents;\r\n\t\t\t\tparents.forEach(function (parent) {\r\n\r\n\t\t\t\t\tif (geometryMap.has(parent.ID)) {\r\n\r\n\t\t\t\t\t\tconst geoID = parent.ID;\r\n\t\t\t\t\t\tconst geoRelationships = connections.get(geoID);\r\n\t\t\t\t\t\tgeoRelationships.parents.forEach(function (geoConnParent) {\r\n\r\n\t\t\t\t\t\t\tif (modelMap.has(geoConnParent.ID)) {\r\n\r\n\t\t\t\t\t\t\t\tconst model = modelMap.get(geoConnParent.ID);\r\n\t\t\t\t\t\t\t\tmodel.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tparsePoseNodes() {\r\n\r\n\t\t\tconst bindMatrices = {};\r\n\r\n\t\t\tif ('Pose' in fbxTree.Objects) {\r\n\r\n\t\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\r\n\r\n\t\t\t\tfor (const nodeID in BindPoseNode) {\r\n\r\n\t\t\t\t\tif (BindPoseNode[nodeID].attrType === 'BindPose') {\r\n\r\n\t\t\t\t\t\tconst poseNodes = BindPoseNode[nodeID].PoseNode;\r\n\r\n\t\t\t\t\t\tif (Array.isArray(poseNodes)) {\r\n\r\n\t\t\t\t\t\t\tposeNodes.forEach(function (poseNode) {\r\n\r\n\t\t\t\t\t\t\t\tbindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\r\n\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tbindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bindMatrices;\r\n\r\n\t\t} // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\r\n\r\n\r\n\t\tcreateAmbientLight() {\r\n\r\n\t\t\tif ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\r\n\r\n\t\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\r\n\t\t\t\tconst r = ambientColor[0];\r\n\t\t\t\tconst g = ambientColor[1];\r\n\t\t\t\tconst b = ambientColor[2];\r\n\r\n\t\t\t\tif (r !== 0 || g !== 0 || b !== 0) {\r\n\r\n\t\t\t\t\tconst color = new THREE.Color(r, g, b);\r\n\t\t\t\t\tsceneGraph.add(new THREE.AmbientLight(color, 1));\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} // parse Geometry data from FBXTree and return map of BufferGeometries\r\n\r\n\r\n\tclass GeometryParser {\r\n\r\n\t\t// Parse nodes in FBXTree.Objects.Geometry\r\n\t\tparse(deformers) {\r\n\r\n\t\t\tconst geometryMap = new Map();\r\n\r\n\t\t\tif ('Geometry' in fbxTree.Objects) {\r\n\r\n\t\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\r\n\r\n\t\t\t\tfor (const nodeID in geoNodes) {\r\n\r\n\t\t\t\t\tconst relationships = connections.get(parseInt(nodeID));\r\n\t\t\t\t\tconst geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\r\n\t\t\t\t\tgeometryMap.set(parseInt(nodeID), geo);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometryMap;\r\n\r\n\t\t} // Parse single node in FBXTree.Objects.Geometry\r\n\r\n\r\n\t\tparseGeometry(relationships, geoNode, deformers) {\r\n\r\n\t\t\tswitch (geoNode.attrType) {\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\t\t\t\t\treturn this.parseMeshGeometry(relationships, geoNode, deformers);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'NurbsCurve':\r\n\t\t\t\t\treturn this.parseNurbsGeometry(geoNode);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} // Parse single node mesh geometry in FBXTree.Objects.Geometry\r\n\r\n\r\n\t\tparseMeshGeometry(relationships, geoNode, deformers) {\r\n\r\n\t\t\tconst skeletons = deformers.skeletons;\r\n\t\t\tconst morphTargets = [];\r\n\t\t\tconst modelNodes = relationships.parents.map(function (parent) {\r\n\r\n\t\t\t\treturn fbxTree.Objects.Model[parent.ID];\r\n\r\n\t\t\t}); // don't create geometry if it is not associated with any models\r\n\r\n\t\t\tif (modelNodes.length === 0) return;\r\n\t\t\tconst skeleton = relationships.children.reduce(function (skeleton, child) {\r\n\r\n\t\t\t\tif (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\r\n\t\t\t\treturn skeleton;\r\n\r\n\t\t\t}, null);\r\n\t\t\trelationships.children.forEach(function (child) {\r\n\r\n\t\t\t\tif (deformers.morphTargets[child.ID] !== undefined) {\r\n\r\n\t\t\t\t\tmorphTargets.push(deformers.morphTargets[child.ID]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}); // Assume one model and get the preRotation from that\r\n\t\t\t// if there is more than one model associated with the geometry this may cause problems\r\n\r\n\t\t\tconst modelNode = modelNodes[0];\r\n\t\t\tconst transformData = {};\r\n\t\t\tif ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\r\n\t\t\tif ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\r\n\t\t\tif ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\r\n\t\t\tif ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\r\n\t\t\tif ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\r\n\t\t\tconst transform = generateTransform(transformData);\r\n\t\t\treturn this.genGeometry(geoNode, skeleton, morphTargets, transform);\r\n\r\n\t\t} // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\r\n\r\n\r\n\t\tgenGeometry(geoNode, skeleton, morphTargets, preTransform) {\r\n\r\n\t\t\tconst geo = new THREE.BufferGeometry();\r\n\t\t\tif (geoNode.attrName) geo.name = geoNode.attrName;\r\n\t\t\tconst geoInfo = this.parseGeoNode(geoNode, skeleton);\r\n\t\t\tconst buffers = this.genBuffers(geoInfo);\r\n\t\t\tconst positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\r\n\t\t\tpositionAttribute.applyMatrix4(preTransform);\r\n\t\t\tgeo.setAttribute('position', positionAttribute);\r\n\r\n\t\t\tif (buffers.colors.length > 0) {\r\n\r\n\t\t\t\tgeo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (skeleton) {\r\n\r\n\t\t\t\tgeo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\r\n\t\t\t\tgeo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\r\n\r\n\t\t\t\tgeo.FBX_Deformer = skeleton;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (buffers.normal.length > 0) {\r\n\r\n\t\t\t\tconst normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\r\n\t\t\t\tconst normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\r\n\t\t\t\tnormalAttribute.applyNormalMatrix(normalMatrix);\r\n\t\t\t\tgeo.setAttribute('normal', normalAttribute);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuffers.uvs.forEach(function (uvBuffer, i) {\r\n\r\n\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\r\n\t\t\t\tlet name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\r\n\r\n\t\t\t\tif (i === 0) {\r\n\r\n\t\t\t\t\tname = 'uv';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\r\n\r\n\t\t\t});\r\n\r\n\t\t\tif (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\r\n\r\n\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\r\n\t\t\t\tlet prevMaterialIndex = buffers.materialIndex[0];\r\n\t\t\t\tlet startIndex = 0;\r\n\t\t\t\tbuffers.materialIndex.forEach(function (currentIndex, i) {\r\n\r\n\t\t\t\t\tif (currentIndex !== prevMaterialIndex) {\r\n\r\n\t\t\t\t\t\tgeo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\r\n\t\t\t\t\t\tprevMaterialIndex = currentIndex;\r\n\t\t\t\t\t\tstartIndex = i;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}); // the loop above doesn't add the last group, do that here.\r\n\r\n\t\t\t\tif (geo.groups.length > 0) {\r\n\r\n\t\t\t\t\tconst lastGroup = geo.groups[geo.groups.length - 1];\r\n\t\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\r\n\r\n\t\t\t\t\tif (lastIndex !== buffers.materialIndex.length) {\r\n\r\n\t\t\t\t\t\tgeo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // case where there are multiple materials but the whole geometry is only\r\n\t\t\t\t// using one of them\r\n\r\n\r\n\t\t\t\tif (geo.groups.length === 0) {\r\n\r\n\t\t\t\t\tgeo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addMorphTargets(geo, geoNode, morphTargets, preTransform);\r\n\t\t\treturn geo;\r\n\r\n\t\t}\r\n\r\n\t\tparseGeoNode(geoNode, skeleton) {\r\n\r\n\t\t\tconst geoInfo = {};\r\n\t\t\tgeoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\r\n\t\t\tgeoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\r\n\r\n\t\t\tif (geoNode.LayerElementColor) {\r\n\r\n\t\t\t\tgeoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (geoNode.LayerElementMaterial) {\r\n\r\n\t\t\t\tgeoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (geoNode.LayerElementNormal) {\r\n\r\n\t\t\t\tgeoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (geoNode.LayerElementUV) {\r\n\r\n\t\t\t\tgeoInfo.uv = [];\r\n\t\t\t\tlet i = 0;\r\n\r\n\t\t\t\twhile (geoNode.LayerElementUV[i]) {\r\n\r\n\t\t\t\t\tif (geoNode.LayerElementUV[i].UV) {\r\n\r\n\t\t\t\t\t\tgeoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeoInfo.weightTable = {};\r\n\r\n\t\t\tif (skeleton !== null) {\r\n\r\n\t\t\t\tgeoInfo.skeleton = skeleton;\r\n\t\t\t\tskeleton.rawBones.forEach(function (rawBone, i) {\r\n\r\n\t\t\t\t\t// loop over the bone's vertex indices and weights\r\n\t\t\t\t\trawBone.indices.forEach(function (index, j) {\r\n\r\n\t\t\t\t\t\tif (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\r\n\t\t\t\t\t\tgeoInfo.weightTable[index].push({\r\n\t\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\t\tweight: rawBone.weights[j]\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geoInfo;\r\n\r\n\t\t}\r\n\r\n\t\tgenBuffers(geoInfo) {\r\n\r\n\t\t\tconst buffers = {\r\n\t\t\t\tvertex: [],\r\n\t\t\t\tnormal: [],\r\n\t\t\t\tcolors: [],\r\n\t\t\t\tuvs: [],\r\n\t\t\t\tmaterialIndex: [],\r\n\t\t\t\tvertexWeights: [],\r\n\t\t\t\tweightsIndices: []\r\n\t\t\t};\r\n\t\t\tlet polygonIndex = 0;\r\n\t\t\tlet faceLength = 0;\r\n\t\t\tlet displayedWeightsWarning = false; // these will hold data for a single face\r\n\r\n\t\t\tlet facePositionIndexes = [];\r\n\t\t\tlet faceNormals = [];\r\n\t\t\tlet faceColors = [];\r\n\t\t\tlet faceUVs = [];\r\n\t\t\tlet faceWeights = [];\r\n\t\t\tlet faceWeightIndices = [];\r\n\t\t\tconst scope = this;\r\n\t\t\tgeoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\r\n\r\n\t\t\t\tlet materialIndex;\r\n\t\t\t\tlet endOfFace = false; // Face index and vertex index arrays are combined in a single array\r\n\t\t\t\t// A cube with quad faces looks like this:\r\n\t\t\t\t// PolygonVertexIndex: *24 {\r\n\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\r\n\t\t\t\t//  }\r\n\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\r\n\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\r\n\r\n\t\t\t\tif (vertexIndex < 0) {\r\n\r\n\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\r\n\r\n\t\t\t\t\tendOfFace = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet weightIndices = [];\r\n\t\t\t\tlet weights = [];\r\n\t\t\t\tfacePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\r\n\r\n\t\t\t\tif (geoInfo.color) {\r\n\r\n\t\t\t\t\tconst data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\r\n\t\t\t\t\tfaceColors.push(data[0], data[1], data[2]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.skeleton) {\r\n\r\n\t\t\t\t\tif (geoInfo.weightTable[vertexIndex] !== undefined) {\r\n\r\n\t\t\t\t\t\tgeoInfo.weightTable[vertexIndex].forEach(function (wt) {\r\n\r\n\t\t\t\t\t\t\tweights.push(wt.weight);\r\n\t\t\t\t\t\t\tweightIndices.push(wt.id);\r\n\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (weights.length > 4) {\r\n\r\n\t\t\t\t\t\tif (!displayedWeightsWarning) {\r\n\r\n\t\t\t\t\t\t\tconsole.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\r\n\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst wIndex = [0, 0, 0, 0];\r\n\t\t\t\t\t\tconst Weight = [0, 0, 0, 0];\r\n\t\t\t\t\t\tweights.forEach(function (weight, weightIndex) {\r\n\r\n\t\t\t\t\t\t\tlet currentWeight = weight;\r\n\t\t\t\t\t\t\tlet currentIndex = weightIndices[weightIndex];\r\n\t\t\t\t\t\t\tWeight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\r\n\r\n\t\t\t\t\t\t\t\tif (currentWeight > comparedWeight) {\r\n\r\n\t\t\t\t\t\t\t\t\tcomparedWeightArray[comparedWeightIndex] = currentWeight;\r\n\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\r\n\t\t\t\t\t\t\t\t\tconst tmp = wIndex[comparedWeightIndex];\r\n\t\t\t\t\t\t\t\t\twIndex[comparedWeightIndex] = currentIndex;\r\n\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tweightIndices = wIndex;\r\n\t\t\t\t\t\tweights = Weight;\r\n\r\n\t\t\t\t\t} // if the weight array is shorter than 4 pad with 0s\r\n\r\n\r\n\t\t\t\t\twhile (weights.length < 4) {\r\n\r\n\t\t\t\t\t\tweights.push(0);\r\n\t\t\t\t\t\tweightIndices.push(0);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let i = 0; i < 4; ++i) {\r\n\r\n\t\t\t\t\t\tfaceWeights.push(weights[i]);\r\n\t\t\t\t\t\tfaceWeightIndices.push(weightIndices[i]);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.normal) {\r\n\r\n\t\t\t\t\tconst data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\r\n\t\t\t\t\tfaceNormals.push(data[0], data[1], data[2]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\r\n\r\n\t\t\t\t\tmaterialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.uv) {\r\n\r\n\t\t\t\t\tgeoInfo.uv.forEach(function (uv, i) {\r\n\r\n\t\t\t\t\t\tconst data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\r\n\r\n\t\t\t\t\t\tif (faceUVs[i] === undefined) {\r\n\r\n\t\t\t\t\t\t\tfaceUVs[i] = [];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfaceUVs[i].push(data[0]);\r\n\t\t\t\t\t\tfaceUVs[i].push(data[1]);\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceLength++;\r\n\r\n\t\t\t\tif (endOfFace) {\r\n\r\n\t\t\t\t\tscope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\r\n\t\t\t\t\tpolygonIndex++;\r\n\t\t\t\t\tfaceLength = 0; // reset arrays for the next face\r\n\r\n\t\t\t\t\tfacePositionIndexes = [];\r\n\t\t\t\t\tfaceNormals = [];\r\n\t\t\t\t\tfaceColors = [];\r\n\t\t\t\t\tfaceUVs = [];\r\n\t\t\t\t\tfaceWeights = [];\r\n\t\t\t\t\tfaceWeightIndices = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\treturn buffers;\r\n\r\n\t\t} // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\r\n\r\n\r\n\t\tgenFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\r\n\r\n\t\t\tfor (let i = 2; i < faceLength; i++) {\r\n\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\r\n\t\t\t\tbuffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\r\n\r\n\t\t\t\tif (geoInfo.skeleton) {\r\n\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[0]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[1]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[2]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[3]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[i * 4]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[i * 4 + 1]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[i * 4 + 2]);\r\n\t\t\t\t\tbuffers.vertexWeights.push(faceWeights[i * 4 + 3]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[0]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[1]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[2]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[3]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[i * 4]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\r\n\t\t\t\t\tbuffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.color) {\r\n\r\n\t\t\t\t\tbuffers.colors.push(faceColors[0]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[1]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[2]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[(i - 1) * 3]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[(i - 1) * 3 + 1]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[(i - 1) * 3 + 2]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[i * 3]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[i * 3 + 1]);\r\n\t\t\t\t\tbuffers.colors.push(faceColors[i * 3 + 2]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\r\n\r\n\t\t\t\t\tbuffers.materialIndex.push(materialIndex);\r\n\t\t\t\t\tbuffers.materialIndex.push(materialIndex);\r\n\t\t\t\t\tbuffers.materialIndex.push(materialIndex);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.normal) {\r\n\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[0]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[1]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[2]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[(i - 1) * 3]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[i * 3]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[i * 3 + 1]);\r\n\t\t\t\t\tbuffers.normal.push(faceNormals[i * 3 + 2]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (geoInfo.uv) {\r\n\r\n\t\t\t\t\tgeoInfo.uv.forEach(function (uv, j) {\r\n\r\n\t\t\t\t\t\tif (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\r\n\t\t\t\t\t\tbuffers.uvs[j].push(faceUVs[j][0]);\r\n\t\t\t\t\t\tbuffers.uvs[j].push(faceUVs[j][1]);\r\n\t\t\t\t\t\tbuffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\r\n\t\t\t\t\t\tbuffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\r\n\t\t\t\t\t\tbuffers.uvs[j].push(faceUVs[j][i * 2]);\r\n\t\t\t\t\t\tbuffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\taddMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\r\n\r\n\t\t\tif (morphTargets.length === 0) return;\r\n\t\t\tparentGeo.morphTargetsRelative = true;\r\n\t\t\tparentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\r\n\r\n\t\t\tconst scope = this;\r\n\t\t\tmorphTargets.forEach(function (morphTarget) {\r\n\r\n\t\t\t\tmorphTarget.rawTargets.forEach(function (rawTarget) {\r\n\r\n\t\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\r\n\r\n\t\t\t\t\tif (morphGeoNode !== undefined) {\r\n\r\n\t\t\t\t\t\tscope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t});\r\n\r\n\t\t} // a morph geometry node is similar to a standard  node, and the node is also contained\r\n\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\r\n\t\t// and a special attribute Index defining which vertices of the original geometry are affected\r\n\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\r\n\r\n\r\n\t\tgenMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\r\n\r\n\t\t\tconst vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\r\n\t\t\tconst morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\r\n\t\t\tconst indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\r\n\t\t\tconst length = parentGeo.attributes.position.count * 3;\r\n\t\t\tconst morphPositions = new Float32Array(length);\r\n\r\n\t\t\tfor (let i = 0; i < indices.length; i++) {\r\n\r\n\t\t\t\tconst morphIndex = indices[i] * 3;\r\n\t\t\t\tmorphPositions[morphIndex] = morphPositionsSparse[i * 3];\r\n\t\t\t\tmorphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\r\n\t\t\t\tmorphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\r\n\r\n\t\t\t} // TODO: add morph normal support\r\n\r\n\r\n\t\t\tconst morphGeoInfo = {\r\n\t\t\t\tvertexIndices: vertexIndices,\r\n\t\t\t\tvertexPositions: morphPositions\r\n\t\t\t};\r\n\t\t\tconst morphBuffers = this.genBuffers(morphGeoInfo);\r\n\t\t\tconst positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\r\n\t\t\tpositionAttribute.name = name || morphGeoNode.attrName;\r\n\t\t\tpositionAttribute.applyMatrix4(preTransform);\r\n\t\t\tparentGeo.morphAttributes.position.push(positionAttribute);\r\n\r\n\t\t} // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\r\n\r\n\r\n\t\tparseNormals(NormalNode) {\r\n\r\n\t\t\tconst mappingType = NormalNode.MappingInformationType;\r\n\t\t\tconst referenceType = NormalNode.ReferenceInformationType;\r\n\t\t\tconst buffer = NormalNode.Normals.a;\r\n\t\t\tlet indexBuffer = [];\r\n\r\n\t\t\tif (referenceType === 'IndexToDirect') {\r\n\r\n\t\t\t\tif ('NormalIndex' in NormalNode) {\r\n\r\n\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\r\n\r\n\t\t\t\t} else if ('NormalsIndex' in NormalNode) {\r\n\r\n\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdataSize: 3,\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\tindices: indexBuffer,\r\n\t\t\t\tmappingType: mappingType,\r\n\t\t\t\treferenceType: referenceType\r\n\t\t\t};\r\n\r\n\t\t} // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\r\n\r\n\r\n\t\tparseUVs(UVNode) {\r\n\r\n\t\t\tconst mappingType = UVNode.MappingInformationType;\r\n\t\t\tconst referenceType = UVNode.ReferenceInformationType;\r\n\t\t\tconst buffer = UVNode.UV.a;\r\n\t\t\tlet indexBuffer = [];\r\n\r\n\t\t\tif (referenceType === 'IndexToDirect') {\r\n\r\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdataSize: 2,\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\tindices: indexBuffer,\r\n\t\t\t\tmappingType: mappingType,\r\n\t\t\t\treferenceType: referenceType\r\n\t\t\t};\r\n\r\n\t\t} // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\r\n\r\n\r\n\t\tparseVertexColors(ColorNode) {\r\n\r\n\t\t\tconst mappingType = ColorNode.MappingInformationType;\r\n\t\t\tconst referenceType = ColorNode.ReferenceInformationType;\r\n\t\t\tconst buffer = ColorNode.Colors.a;\r\n\t\t\tlet indexBuffer = [];\r\n\r\n\t\t\tif (referenceType === 'IndexToDirect') {\r\n\r\n\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdataSize: 4,\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\tindices: indexBuffer,\r\n\t\t\t\tmappingType: mappingType,\r\n\t\t\t\treferenceType: referenceType\r\n\t\t\t};\r\n\r\n\t\t} // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\r\n\r\n\r\n\t\tparseMaterialIndices(MaterialNode) {\r\n\r\n\t\t\tconst mappingType = MaterialNode.MappingInformationType;\r\n\t\t\tconst referenceType = MaterialNode.ReferenceInformationType;\r\n\r\n\t\t\tif (mappingType === 'NoMappingInformation') {\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdataSize: 1,\r\n\t\t\t\t\tbuffer: [0],\r\n\t\t\t\t\tindices: [0],\r\n\t\t\t\t\tmappingType: 'AllSame',\r\n\t\t\t\t\treferenceType: referenceType\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\r\n\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\r\n\t\t\t// for conforming with the other functions we've written for other data.\r\n\r\n\t\t\tconst materialIndices = [];\r\n\r\n\t\t\tfor (let i = 0; i < materialIndexBuffer.length; ++i) {\r\n\r\n\t\t\t\tmaterialIndices.push(i);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdataSize: 1,\r\n\t\t\t\tbuffer: materialIndexBuffer,\r\n\t\t\t\tindices: materialIndices,\r\n\t\t\t\tmappingType: mappingType,\r\n\t\t\t\treferenceType: referenceType\r\n\t\t\t};\r\n\r\n\t\t} // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\r\n\r\n\r\n\t\tparseNurbsGeometry(geoNode) {\r\n\r\n\t\t\tif (THREE.NURBSCurve === undefined) {\r\n\r\n\t\t\t\tconsole.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\r\n\t\t\t\treturn new THREE.BufferGeometry();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst order = parseInt(geoNode.Order);\r\n\r\n\t\t\tif (isNaN(order)) {\r\n\r\n\t\t\t\tconsole.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\r\n\t\t\t\treturn new THREE.BufferGeometry();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst degree = order - 1;\r\n\t\t\tconst knots = geoNode.KnotVector.a;\r\n\t\t\tconst controlPoints = [];\r\n\t\t\tconst pointsValues = geoNode.Points.a;\r\n\r\n\t\t\tfor (let i = 0, l = pointsValues.length; i < l; i += 4) {\r\n\r\n\t\t\t\tcontrolPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet startKnot, endKnot;\r\n\r\n\t\t\tif (geoNode.Form === 'Closed') {\r\n\r\n\t\t\t\tcontrolPoints.push(controlPoints[0]);\r\n\r\n\t\t\t} else if (geoNode.Form === 'Periodic') {\r\n\r\n\t\t\t\tstartKnot = degree;\r\n\t\t\t\tendKnot = knots.length - 1 - startKnot;\r\n\r\n\t\t\t\tfor (let i = 0; i < degree; ++i) {\r\n\r\n\t\t\t\t\tcontrolPoints.push(controlPoints[i]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst curve = new THREE.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\r\n\t\t\tconst points = curve.getPoints(controlPoints.length * 12);\r\n\t\t\treturn new THREE.BufferGeometry().setFromPoints(points);\r\n\r\n\t\t}\r\n\r\n\t} // parse animation data from FBXTree\r\n\r\n\r\n\tclass AnimationParser {\r\n\r\n\t\t// take raw animation clips and turn them into three.js animation clips\r\n\t\tparse() {\r\n\r\n\t\t\tconst animationClips = [];\r\n\t\t\tconst rawClips = this.parseClips();\r\n\r\n\t\t\tif (rawClips !== undefined) {\r\n\r\n\t\t\t\tfor (const key in rawClips) {\r\n\r\n\t\t\t\t\tconst rawClip = rawClips[key];\r\n\t\t\t\t\tconst clip = this.addClip(rawClip);\r\n\t\t\t\t\tanimationClips.push(clip);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animationClips;\r\n\r\n\t\t}\r\n\r\n\t\tparseClips() {\r\n\r\n\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\r\n\t\t\t// if this is undefined we can safely assume there are no animations\r\n\t\t\tif (fbxTree.Objects.AnimationCurve === undefined) return undefined;\r\n\t\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\r\n\t\t\tthis.parseAnimationCurves(curveNodesMap);\r\n\t\t\tconst layersMap = this.parseAnimationLayers(curveNodesMap);\r\n\t\t\tconst rawClips = this.parseAnimStacks(layersMap);\r\n\t\t\treturn rawClips;\r\n\r\n\t\t} // parse nodes in FBXTree.Objects.AnimationCurveNode\r\n\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\r\n\t\t// and is referenced by an AnimationLayer\r\n\r\n\r\n\t\tparseAnimationCurveNodes() {\r\n\r\n\t\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\r\n\t\t\tconst curveNodesMap = new Map();\r\n\r\n\t\t\tfor (const nodeID in rawCurveNodes) {\r\n\r\n\t\t\t\tconst rawCurveNode = rawCurveNodes[nodeID];\r\n\r\n\t\t\t\tif (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\r\n\r\n\t\t\t\t\tconst curveNode = {\r\n\t\t\t\t\t\tid: rawCurveNode.id,\r\n\t\t\t\t\t\tattr: rawCurveNode.attrName,\r\n\t\t\t\t\t\tcurves: {}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcurveNodesMap.set(curveNode.id, curveNode);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn curveNodesMap;\r\n\r\n\t\t} // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\r\n\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\r\n\t\t// axis ( e.g. times and values of x rotation)\r\n\r\n\r\n\t\tparseAnimationCurves(curveNodesMap) {\r\n\r\n\t\t\tconst rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\r\n\t\t\t// e.g. position times: [0, 0.4, 0. 8]\r\n\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\r\n\t\t\t// clearly, this should be optimised to\r\n\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\r\n\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\r\n\r\n\t\t\tfor (const nodeID in rawCurves) {\r\n\r\n\t\t\t\tconst animationCurve = {\r\n\t\t\t\t\tid: rawCurves[nodeID].id,\r\n\t\t\t\t\ttimes: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\r\n\t\t\t\t\tvalues: rawCurves[nodeID].KeyValueFloat.a\r\n\t\t\t\t};\r\n\t\t\t\tconst relationships = connections.get(animationCurve.id);\r\n\r\n\t\t\t\tif (relationships !== undefined) {\r\n\r\n\t\t\t\t\tconst animationCurveID = relationships.parents[0].ID;\r\n\t\t\t\t\tconst animationCurveRelationship = relationships.parents[0].relationship;\r\n\r\n\t\t\t\t\tif (animationCurveRelationship.match(/X/)) {\r\n\r\n\t\t\t\t\t\tcurveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\r\n\r\n\t\t\t\t\t} else if (animationCurveRelationship.match(/Y/)) {\r\n\r\n\t\t\t\t\t\tcurveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\r\n\r\n\t\t\t\t\t} else if (animationCurveRelationship.match(/Z/)) {\r\n\r\n\t\t\t\t\t\tcurveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\r\n\r\n\t\t\t\t\t} else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\r\n\r\n\t\t\t\t\t\tcurveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\r\n\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\r\n\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\r\n\r\n\r\n\t\tparseAnimationLayers(curveNodesMap) {\r\n\r\n\t\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\r\n\t\t\tconst layersMap = new Map();\r\n\r\n\t\t\tfor (const nodeID in rawLayers) {\r\n\r\n\t\t\t\tconst layerCurveNodes = [];\r\n\t\t\t\tconst connection = connections.get(parseInt(nodeID));\r\n\r\n\t\t\t\tif (connection !== undefined) {\r\n\r\n\t\t\t\t\t// all the animationCurveNodes used in the layer\r\n\t\t\t\t\tconst children = connection.children;\r\n\t\t\t\t\tchildren.forEach(function (child, i) {\r\n\r\n\t\t\t\t\t\tif (curveNodesMap.has(child.ID)) {\r\n\r\n\t\t\t\t\t\t\tconst curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\r\n\r\n\t\t\t\t\t\t\tif (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\r\n\r\n\t\t\t\t\t\t\t\tif (layerCurveNodes[i] === undefined) {\r\n\r\n\t\t\t\t\t\t\t\t\tconst modelID = connections.get(child.ID).parents.filter(function (parent) {\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\r\n\r\n\t\t\t\t\t\t\t\t\t})[0].ID;\r\n\r\n\t\t\t\t\t\t\t\t\tif (modelID !== undefined) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[modelID.toString()];\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (rawModel === undefined) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn('THREE.FBXLoader: Encountered a unused curve.', child);\r\n\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst node = {\r\n\t\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\r\n\t\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\r\n\t\t\t\t\t\t\t\t\t\t\tinitialPosition: [0, 0, 0],\r\n\t\t\t\t\t\t\t\t\t\t\tinitialRotation: [0, 0, 0],\r\n\t\t\t\t\t\t\t\t\t\t\tinitialScale: [1, 1, 1]\r\n\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\tsceneGraph.traverse(function (child) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.ID === rawModel.id) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\tif (!node.transform) node.transform = new THREE.Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\r\n\t\t\t\t\t\t\t\t\t\t// animation value as well\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\r\n\t\t\t\t\t\t\t\t\t\tif ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\r\n\t\t\t\t\t\t\t\t\t\tlayerCurveNodes[i] = node;\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\r\n\r\n\t\t\t\t\t\t\t} else if (curveNode.curves.morph !== undefined) {\r\n\r\n\t\t\t\t\t\t\t\tif (layerCurveNodes[i] === undefined) {\r\n\r\n\t\t\t\t\t\t\t\t\tconst deformerID = connections.get(child.ID).parents.filter(function (parent) {\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\r\n\r\n\t\t\t\t\t\t\t\t\t})[0].ID;\r\n\t\t\t\t\t\t\t\t\tconst morpherID = connections.get(deformerID).parents[0].ID;\r\n\t\t\t\t\t\t\t\t\tconst geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\r\n\r\n\t\t\t\t\t\t\t\t\tconst modelID = connections.get(geoID).parents[0].ID;\r\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[modelID];\r\n\t\t\t\t\t\t\t\t\tconst node = {\r\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\r\n\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[deformerID].attrName\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[i] = node;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlayerCurveNodes[i][curveNode.attr] = curveNode;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlayersMap.set(parseInt(nodeID), layerCurveNodes);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn layersMap;\r\n\r\n\t\t} // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\r\n\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\r\n\r\n\r\n\t\tparseAnimStacks(layersMap) {\r\n\r\n\t\t\tconst rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\r\n\r\n\t\t\tconst rawClips = {};\r\n\r\n\t\t\tfor (const nodeID in rawStacks) {\r\n\r\n\t\t\t\tconst children = connections.get(parseInt(nodeID)).children;\r\n\r\n\t\t\t\tif (children.length > 1) {\r\n\r\n\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\r\n\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\r\n\t\t\t\t\tconsole.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst layer = layersMap.get(children[0].ID);\r\n\t\t\t\trawClips[nodeID] = {\r\n\t\t\t\t\tname: rawStacks[nodeID].attrName,\r\n\t\t\t\t\tlayer: layer\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn rawClips;\r\n\r\n\t\t}\r\n\r\n\t\taddClip(rawClip) {\r\n\r\n\t\t\tlet tracks = [];\r\n\t\t\tconst scope = this;\r\n\t\t\trawClip.layer.forEach(function (rawTracks) {\r\n\r\n\t\t\t\ttracks = tracks.concat(scope.generateTracks(rawTracks));\r\n\r\n\t\t\t});\r\n\t\t\treturn new THREE.AnimationClip(rawClip.name, - 1, tracks);\r\n\r\n\t\t}\r\n\r\n\t\tgenerateTracks(rawTracks) {\r\n\r\n\t\t\tconst tracks = [];\r\n\t\t\tlet initialPosition = new THREE.Vector3();\r\n\t\t\tlet initialRotation = new THREE.Quaternion();\r\n\t\t\tlet initialScale = new THREE.Vector3();\r\n\t\t\tif (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\r\n\t\t\tinitialPosition = initialPosition.toArray();\r\n\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\r\n\t\t\tinitialScale = initialScale.toArray();\r\n\r\n\t\t\tif (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\r\n\r\n\t\t\t\tconst positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\r\n\t\t\t\tif (positionTrack !== undefined) tracks.push(positionTrack);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\r\n\r\n\t\t\t\tconst rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\r\n\t\t\t\tif (rotationTrack !== undefined) tracks.push(rotationTrack);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\r\n\r\n\t\t\t\tconst scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\r\n\t\t\t\tif (scaleTrack !== undefined) tracks.push(scaleTrack);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (rawTracks.DeformPercent !== undefined) {\r\n\r\n\t\t\t\tconst morphTrack = this.generateMorphTrack(rawTracks);\r\n\t\t\t\tif (morphTrack !== undefined) tracks.push(morphTrack);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn tracks;\r\n\r\n\t\t}\r\n\r\n\t\tgenerateVectorTrack(modelName, curves, initialValue, type) {\r\n\r\n\t\t\tconst times = this.getTimesForAllAxes(curves);\r\n\t\t\tconst values = this.getKeyframeTrackValues(times, curves, initialValue);\r\n\t\t\treturn new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\r\n\r\n\t\t}\r\n\r\n\t\tgenerateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\r\n\r\n\t\t\tif (curves.x !== undefined) {\r\n\r\n\t\t\t\tthis.interpolateRotations(curves.x);\r\n\t\t\t\tcurves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (curves.y !== undefined) {\r\n\r\n\t\t\t\tthis.interpolateRotations(curves.y);\r\n\t\t\t\tcurves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (curves.z !== undefined) {\r\n\r\n\t\t\t\tthis.interpolateRotations(curves.z);\r\n\t\t\t\tcurves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst times = this.getTimesForAllAxes(curves);\r\n\t\t\tconst values = this.getKeyframeTrackValues(times, curves, initialValue);\r\n\r\n\t\t\tif (preRotation !== undefined) {\r\n\r\n\t\t\t\tpreRotation = preRotation.map(THREE.MathUtils.degToRad);\r\n\t\t\t\tpreRotation.push(eulerOrder);\r\n\t\t\t\tpreRotation = new THREE.Euler().fromArray(preRotation);\r\n\t\t\t\tpreRotation = new THREE.Quaternion().setFromEuler(preRotation);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (postRotation !== undefined) {\r\n\r\n\t\t\t\tpostRotation = postRotation.map(THREE.MathUtils.degToRad);\r\n\t\t\t\tpostRotation.push(eulerOrder);\r\n\t\t\t\tpostRotation = new THREE.Euler().fromArray(postRotation);\r\n\t\t\t\tpostRotation = new THREE.Quaternion().setFromEuler(postRotation).invert();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst quaternion = new THREE.Quaternion();\r\n\t\t\tconst euler = new THREE.Euler();\r\n\t\t\tconst quaternionValues = [];\r\n\r\n\t\t\tfor (let i = 0; i < values.length; i += 3) {\r\n\r\n\t\t\t\teuler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\r\n\t\t\t\tquaternion.setFromEuler(euler);\r\n\t\t\t\tif (preRotation !== undefined) quaternion.premultiply(preRotation);\r\n\t\t\t\tif (postRotation !== undefined) quaternion.multiply(postRotation);\r\n\t\t\t\tquaternion.toArray(quaternionValues, i / 3 * 4);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\r\n\r\n\t\t}\r\n\r\n\t\tgenerateMorphTrack(rawTracks) {\r\n\r\n\t\t\tconst curves = rawTracks.DeformPercent.curves.morph;\r\n\t\t\tconst values = curves.values.map(function (val) {\r\n\r\n\t\t\t\treturn val / 100;\r\n\r\n\t\t\t});\r\n\t\t\tconst morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\r\n\t\t\treturn new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\r\n\r\n\t\t} // For all animated objects, times are defined separately for each axis\r\n\t\t// Here we'll combine the times into one sorted array without duplicates\r\n\r\n\r\n\t\tgetTimesForAllAxes(curves) {\r\n\r\n\t\t\tlet times = []; // first join together the times for each axis, if defined\r\n\r\n\t\t\tif (curves.x !== undefined) times = times.concat(curves.x.times);\r\n\t\t\tif (curves.y !== undefined) times = times.concat(curves.y.times);\r\n\t\t\tif (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\r\n\r\n\t\t\ttimes = times.sort(function (a, b) {\r\n\r\n\t\t\t\treturn a - b;\r\n\r\n\t\t\t}); // and remove duplicates\r\n\r\n\t\t\tif (times.length > 1) {\r\n\r\n\t\t\t\tlet targetIndex = 1;\r\n\t\t\t\tlet lastValue = times[0];\r\n\r\n\t\t\t\tfor (let i = 1; i < times.length; i++) {\r\n\r\n\t\t\t\t\tconst currentValue = times[i];\r\n\r\n\t\t\t\t\tif (currentValue !== lastValue) {\r\n\r\n\t\t\t\t\t\ttimes[targetIndex] = currentValue;\r\n\t\t\t\t\t\tlastValue = currentValue;\r\n\t\t\t\t\t\ttargetIndex++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttimes = times.slice(0, targetIndex);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn times;\r\n\r\n\t\t}\r\n\r\n\t\tgetKeyframeTrackValues(times, curves, initialValue) {\r\n\r\n\t\t\tconst prevValue = initialValue;\r\n\t\t\tconst values = [];\r\n\t\t\tlet xIndex = - 1;\r\n\t\t\tlet yIndex = - 1;\r\n\t\t\tlet zIndex = - 1;\r\n\t\t\ttimes.forEach(function (time) {\r\n\r\n\t\t\t\tif (curves.x) xIndex = curves.x.times.indexOf(time);\r\n\t\t\t\tif (curves.y) yIndex = curves.y.times.indexOf(time);\r\n\t\t\t\tif (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\r\n\r\n\t\t\t\tif (xIndex !== - 1) {\r\n\r\n\t\t\t\t\tconst xValue = curves.x.values[xIndex];\r\n\t\t\t\t\tvalues.push(xValue);\r\n\t\t\t\t\tprevValue[0] = xValue;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// otherwise use the x value from the previous frame\r\n\t\t\t\t\tvalues.push(prevValue[0]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yIndex !== - 1) {\r\n\r\n\t\t\t\t\tconst yValue = curves.y.values[yIndex];\r\n\t\t\t\t\tvalues.push(yValue);\r\n\t\t\t\t\tprevValue[1] = yValue;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvalues.push(prevValue[1]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (zIndex !== - 1) {\r\n\r\n\t\t\t\t\tconst zValue = curves.z.values[zIndex];\r\n\t\t\t\t\tvalues.push(zValue);\r\n\t\t\t\t\tprevValue[2] = zValue;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvalues.push(prevValue[2]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\treturn values;\r\n\r\n\t\t} // Rotations are defined as THREE.Euler angles which can have values  of any size\r\n\t\t// These will be converted to quaternions which don't support values greater than\r\n\t\t// PI, so we'll interpolate large rotations\r\n\r\n\r\n\t\tinterpolateRotations(curve) {\r\n\r\n\t\t\tfor (let i = 1; i < curve.values.length; i++) {\r\n\r\n\t\t\t\tconst initialValue = curve.values[i - 1];\r\n\t\t\t\tconst valuesSpan = curve.values[i] - initialValue;\r\n\t\t\t\tconst absoluteSpan = Math.abs(valuesSpan);\r\n\r\n\t\t\t\tif (absoluteSpan >= 180) {\r\n\r\n\t\t\t\t\tconst numSubIntervals = absoluteSpan / 180;\r\n\t\t\t\t\tconst step = valuesSpan / numSubIntervals;\r\n\t\t\t\t\tlet nextValue = initialValue + step;\r\n\t\t\t\t\tconst initialTime = curve.times[i - 1];\r\n\t\t\t\t\tconst timeSpan = curve.times[i] - initialTime;\r\n\t\t\t\t\tconst interval = timeSpan / numSubIntervals;\r\n\t\t\t\t\tlet nextTime = initialTime + interval;\r\n\t\t\t\t\tconst interpolatedTimes = [];\r\n\t\t\t\t\tconst interpolatedValues = [];\r\n\r\n\t\t\t\t\twhile (nextTime < curve.times[i]) {\r\n\r\n\t\t\t\t\t\tinterpolatedTimes.push(nextTime);\r\n\t\t\t\t\t\tnextTime += interval;\r\n\t\t\t\t\t\tinterpolatedValues.push(nextValue);\r\n\t\t\t\t\t\tnextValue += step;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurve.times = inject(curve.times, i, interpolatedTimes);\r\n\t\t\t\t\tcurve.values = inject(curve.values, i, interpolatedValues);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} // parse an FBX file in ASCII format\r\n\r\n\r\n\tclass TextParser {\r\n\r\n\t\tgetPrevNode() {\r\n\r\n\t\t\treturn this.nodeStack[this.currentIndent - 2];\r\n\r\n\t\t}\r\n\r\n\t\tgetCurrentNode() {\r\n\r\n\t\t\treturn this.nodeStack[this.currentIndent - 1];\r\n\r\n\t\t}\r\n\r\n\t\tgetCurrentProp() {\r\n\r\n\t\t\treturn this.currentProp;\r\n\r\n\t\t}\r\n\r\n\t\tpushStack(node) {\r\n\r\n\t\t\tthis.nodeStack.push(node);\r\n\t\t\tthis.currentIndent += 1;\r\n\r\n\t\t}\r\n\r\n\t\tpopStack() {\r\n\r\n\t\t\tthis.nodeStack.pop();\r\n\t\t\tthis.currentIndent -= 1;\r\n\r\n\t\t}\r\n\r\n\t\tsetCurrentProp(val, name) {\r\n\r\n\t\t\tthis.currentProp = val;\r\n\t\t\tthis.currentPropName = name;\r\n\r\n\t\t}\r\n\r\n\t\tparse(text) {\r\n\r\n\t\t\tthis.currentIndent = 0;\r\n\t\t\tthis.allNodes = new FBXTree();\r\n\t\t\tthis.nodeStack = [];\r\n\t\t\tthis.currentProp = [];\r\n\t\t\tthis.currentPropName = '';\r\n\t\t\tconst scope = this;\r\n\t\t\tconst split = text.split(/[\\r\\n]+/);\r\n\t\t\tsplit.forEach(function (line, i) {\r\n\r\n\t\t\t\tconst matchComment = line.match(/^[\\s\\t]*;/);\r\n\t\t\t\tconst matchEmpty = line.match(/^[\\s\\t]*$/);\r\n\t\t\t\tif (matchComment || matchEmpty) return;\r\n\t\t\t\tconst matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\r\n\t\t\t\tconst matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\r\n\t\t\t\tconst matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\r\n\r\n\t\t\t\tif (matchBeginning) {\r\n\r\n\t\t\t\t\tscope.parseNodeBegin(line, matchBeginning);\r\n\r\n\t\t\t\t} else if (matchProperty) {\r\n\r\n\t\t\t\t\tscope.parseNodeProperty(line, matchProperty, split[++i]);\r\n\r\n\t\t\t\t} else if (matchEnd) {\r\n\r\n\t\t\t\t\tscope.popStack();\r\n\r\n\t\t\t\t} else if (line.match(/^[^\\s\\t}]/)) {\r\n\r\n\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\r\n\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\r\n\t\t\t\t\tscope.parseNodePropertyContinued(line);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\treturn this.allNodes;\r\n\r\n\t\t}\r\n\r\n\t\tparseNodeBegin(line, property) {\r\n\r\n\t\t\tconst nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\r\n\t\t\tconst nodeAttrs = property[2].split(',').map(function (attr) {\r\n\r\n\t\t\t\treturn attr.trim().replace(/^\"/, '').replace(/\"$/, '');\r\n\r\n\t\t\t});\r\n\t\t\tconst node = {\r\n\t\t\t\tname: nodeName\r\n\t\t\t};\r\n\t\t\tconst attrs = this.parseNodeAttr(nodeAttrs);\r\n\t\t\tconst currentNode = this.getCurrentNode(); // a top node\r\n\r\n\t\t\tif (this.currentIndent === 0) {\r\n\r\n\t\t\t\tthis.allNodes.add(nodeName, node);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// a subnode\r\n\t\t\t\t// if the subnode already exists, append it\r\n\t\t\t\tif (nodeName in currentNode) {\r\n\r\n\t\t\t\t\t// special case Pose needs PoseNodes as an array\r\n\t\t\t\t\tif (nodeName === 'PoseNode') {\r\n\r\n\t\t\t\t\t\tcurrentNode.PoseNode.push(node);\r\n\r\n\t\t\t\t\t} else if (currentNode[nodeName].id !== undefined) {\r\n\r\n\t\t\t\t\t\tcurrentNode[nodeName] = {};\r\n\t\t\t\t\t\tcurrentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\r\n\r\n\t\t\t\t} else if (typeof attrs.id === 'number') {\r\n\r\n\t\t\t\t\tcurrentNode[nodeName] = {};\r\n\t\t\t\t\tcurrentNode[nodeName][attrs.id] = node;\r\n\r\n\t\t\t\t} else if (nodeName !== 'Properties70') {\r\n\r\n\t\t\t\t\tif (nodeName === 'PoseNode') currentNode[nodeName] = [node]; else currentNode[nodeName] = node;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof attrs.id === 'number') node.id = attrs.id;\r\n\t\t\tif (attrs.name !== '') node.attrName = attrs.name;\r\n\t\t\tif (attrs.type !== '') node.attrType = attrs.type;\r\n\t\t\tthis.pushStack(node);\r\n\r\n\t\t}\r\n\r\n\t\tparseNodeAttr(attrs) {\r\n\r\n\t\t\tlet id = attrs[0];\r\n\r\n\t\t\tif (attrs[0] !== '') {\r\n\r\n\t\t\t\tid = parseInt(attrs[0]);\r\n\r\n\t\t\t\tif (isNaN(id)) {\r\n\r\n\t\t\t\t\tid = attrs[0];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet name = '',\r\n\t\t\t\ttype = '';\r\n\r\n\t\t\tif (attrs.length > 1) {\r\n\r\n\t\t\t\tname = attrs[1].replace(/^(\\w+)::/, '');\r\n\t\t\t\ttype = attrs[2];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tid: id,\r\n\t\t\t\tname: name,\r\n\t\t\t\ttype: type\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tparseNodeProperty(line, property, contentLine) {\r\n\r\n\t\t\tlet propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\r\n\t\t\tlet propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\r\n\t\t\t//\tContent: ,\r\n\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\r\n\r\n\t\t\tif (propName === 'Content' && propValue === ',') {\r\n\r\n\t\t\t\tpropValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst currentNode = this.getCurrentNode();\r\n\t\t\tconst parentName = currentNode.name;\r\n\r\n\t\t\tif (parentName === 'Properties70') {\r\n\r\n\t\t\t\tthis.parseNodeSpecialProperty(line, propName, propValue);\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} // Connections\r\n\r\n\r\n\t\t\tif (propName === 'C') {\r\n\r\n\t\t\t\tconst connProps = propValue.split(',').slice(1);\r\n\t\t\t\tconst from = parseInt(connProps[0]);\r\n\t\t\t\tconst to = parseInt(connProps[1]);\r\n\t\t\t\tlet rest = propValue.split(',').slice(3);\r\n\t\t\t\trest = rest.map(function (elem) {\r\n\r\n\t\t\t\t\treturn elem.trim().replace(/^\"/, '');\r\n\r\n\t\t\t\t});\r\n\t\t\t\tpropName = 'connections';\r\n\t\t\t\tpropValue = [from, to];\r\n\t\t\t\tappend(propValue, rest);\r\n\r\n\t\t\t\tif (currentNode[propName] === undefined) {\r\n\r\n\t\t\t\t\tcurrentNode[propName] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // Node\r\n\r\n\r\n\t\t\tif (propName === 'Node') currentNode.id = propValue; // connections\r\n\r\n\t\t\tif (propName in currentNode && Array.isArray(currentNode[propName])) {\r\n\r\n\t\t\t\tcurrentNode[propName].push(propValue);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (propName !== 'a') currentNode[propName] = propValue; else currentNode.a = propValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\r\n\r\n\t\t\tif (propName === 'a' && propValue.slice(- 1) !== ',') {\r\n\r\n\t\t\t\tcurrentNode.a = parseNumberArray(propValue);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tparseNodePropertyContinued(line) {\r\n\r\n\t\t\tconst currentNode = this.getCurrentNode();\r\n\t\t\tcurrentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\r\n\t\t\t// so convert the string to an array\r\n\r\n\t\t\tif (line.slice(- 1) !== ',') {\r\n\r\n\t\t\t\tcurrentNode.a = parseNumberArray(currentNode.a);\r\n\r\n\t\t\t}\r\n\r\n\t\t} // parse \"Property70\"\r\n\r\n\r\n\t\tparseNodeSpecialProperty(line, propName, propValue) {\r\n\r\n\t\t\t// split this\r\n\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\r\n\t\t\t// into array like below\r\n\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\r\n\t\t\tconst props = propValue.split('\",').map(function (prop) {\r\n\r\n\t\t\t\treturn prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\r\n\r\n\t\t\t});\r\n\t\t\tconst innerPropName = props[0];\r\n\t\t\tconst innerPropType1 = props[1];\r\n\t\t\tconst innerPropType2 = props[2];\r\n\t\t\tconst innerPropFlag = props[3];\r\n\t\t\tlet innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\r\n\r\n\t\t\tswitch (innerPropType1) {\r\n\r\n\t\t\t\tcase 'int':\r\n\t\t\t\tcase 'enum':\r\n\t\t\t\tcase 'bool':\r\n\t\t\t\tcase 'ULongLong':\r\n\t\t\t\tcase 'double':\r\n\t\t\t\tcase 'Number':\r\n\t\t\t\tcase 'FieldOfView':\r\n\t\t\t\t\tinnerPropValue = parseFloat(innerPropValue);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Color':\r\n\t\t\t\tcase 'ColorRGB':\r\n\t\t\t\tcase 'Vector3D':\r\n\t\t\t\tcase 'Lcl_Translation':\r\n\t\t\t\tcase 'Lcl_Rotation':\r\n\t\t\t\tcase 'Lcl_Scaling':\r\n\t\t\t\t\tinnerPropValue = parseNumberArray(innerPropValue);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t} // CAUTION: these props must append to parent's parent\r\n\r\n\r\n\t\t\tthis.getPrevNode()[innerPropName] = {\r\n\t\t\t\t'type': innerPropType1,\r\n\t\t\t\t'type2': innerPropType2,\r\n\t\t\t\t'flag': innerPropFlag,\r\n\t\t\t\t'value': innerPropValue\r\n\t\t\t};\r\n\t\t\tthis.setCurrentProp(this.getPrevNode(), innerPropName);\r\n\r\n\t\t}\r\n\r\n\t} // Parse an FBX file in Binary format\r\n\r\n\r\n\tclass BinaryParser {\r\n\r\n\t\tparse(buffer) {\r\n\r\n\t\t\tconst reader = new BinaryReader(buffer);\r\n\t\t\treader.skip(23); // skip magic 23 bytes\r\n\r\n\t\t\tconst version = reader.getUint32();\r\n\r\n\t\t\tif (version < 6400) {\r\n\r\n\t\t\t\tthrow new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst allNodes = new FBXTree();\r\n\r\n\t\t\twhile (!this.endOfContent(reader)) {\r\n\r\n\t\t\t\tconst node = this.parseNode(reader, version);\r\n\t\t\t\tif (node !== null) allNodes.add(node.name, node);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn allNodes;\r\n\r\n\t\t} // Check if reader has reached the end of content.\r\n\r\n\r\n\t\tendOfContent(reader) {\r\n\r\n\t\t\t// footer size: 160bytes + 16-byte alignment padding\r\n\t\t\t// - 16bytes: magic\r\n\t\t\t// - padding til 16-byte alignment (at least 1byte?)\r\n\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\r\n\t\t\t// - 4bytes: magic\r\n\t\t\t// - 4bytes: version\r\n\t\t\t// - 120bytes: zero\r\n\t\t\t// - 16bytes: magic\r\n\t\t\tif (reader.size() % 16 === 0) {\r\n\r\n\t\t\t\treturn (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\r\n\r\n\t\t\t}\r\n\r\n\t\t} // recursively parse nodes until the end of the file is reached\r\n\r\n\r\n\t\tparseNode(reader, version) {\r\n\r\n\t\t\tconst node = {}; // The first three data sizes depends on version.\r\n\r\n\t\t\tconst endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n\t\t\tconst numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n\t\t\tversion >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\r\n\r\n\t\t\tconst nameLen = reader.getUint8();\r\n\t\t\tconst name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\r\n\r\n\t\t\tif (endOffset === 0) return null;\r\n\t\t\tconst propertyList = [];\r\n\r\n\t\t\tfor (let i = 0; i < numProperties; i++) {\r\n\r\n\t\t\t\tpropertyList.push(this.parseProperty(reader));\r\n\r\n\t\t\t} // Regards the first three elements in propertyList as id, attrName, and attrType\r\n\r\n\r\n\t\t\tconst id = propertyList.length > 0 ? propertyList[0] : '';\r\n\t\t\tconst attrName = propertyList.length > 1 ? propertyList[1] : '';\r\n\t\t\tconst attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\r\n\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\r\n\r\n\t\t\tnode.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\r\n\r\n\t\t\twhile (endOffset > reader.getOffset()) {\r\n\r\n\t\t\t\tconst subNode = this.parseNode(reader, version);\r\n\t\t\t\tif (subNode !== null) this.parseSubNode(name, node, subNode);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnode.propertyList = propertyList; // raw property list used by parent\r\n\r\n\t\t\tif (typeof id === 'number') node.id = id;\r\n\t\t\tif (attrName !== '') node.attrName = attrName;\r\n\t\t\tif (attrType !== '') node.attrType = attrType;\r\n\t\t\tif (name !== '') node.name = name;\r\n\t\t\treturn node;\r\n\r\n\t\t}\r\n\r\n\t\tparseSubNode(name, node, subNode) {\r\n\r\n\t\t\t// special case: child node is single property\r\n\t\t\tif (subNode.singleProperty === true) {\r\n\r\n\t\t\t\tconst value = subNode.propertyList[0];\r\n\r\n\t\t\t\tif (Array.isArray(value)) {\r\n\r\n\t\t\t\t\tnode[subNode.name] = subNode;\r\n\t\t\t\t\tsubNode.a = value;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnode[subNode.name] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (name === 'Connections' && subNode.name === 'C') {\r\n\r\n\t\t\t\tconst array = [];\r\n\t\t\t\tsubNode.propertyList.forEach(function (property, i) {\r\n\r\n\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\r\n\t\t\t\t\tif (i !== 0) array.push(property);\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (node.connections === undefined) {\r\n\r\n\t\t\t\t\tnode.connections = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.connections.push(array);\r\n\r\n\t\t\t} else if (subNode.name === 'Properties70') {\r\n\r\n\t\t\t\tconst keys = Object.keys(subNode);\r\n\t\t\t\tkeys.forEach(function (key) {\r\n\r\n\t\t\t\t\tnode[key] = subNode[key];\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t} else if (name === 'Properties70' && subNode.name === 'P') {\r\n\r\n\t\t\t\tlet innerPropName = subNode.propertyList[0];\r\n\t\t\t\tlet innerPropType1 = subNode.propertyList[1];\r\n\t\t\t\tconst innerPropType2 = subNode.propertyList[2];\r\n\t\t\t\tconst innerPropFlag = subNode.propertyList[3];\r\n\t\t\t\tlet innerPropValue;\r\n\t\t\t\tif (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\r\n\t\t\t\tif (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\r\n\r\n\t\t\t\tif (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\r\n\r\n\t\t\t\t\tinnerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinnerPropValue = subNode.propertyList[4];\r\n\r\n\t\t\t\t} // this will be copied to parent, see above\r\n\r\n\r\n\t\t\t\tnode[innerPropName] = {\r\n\t\t\t\t\t'type': innerPropType1,\r\n\t\t\t\t\t'type2': innerPropType2,\r\n\t\t\t\t\t'flag': innerPropFlag,\r\n\t\t\t\t\t'value': innerPropValue\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if (node[subNode.name] === undefined) {\r\n\r\n\t\t\t\tif (typeof subNode.id === 'number') {\r\n\r\n\t\t\t\t\tnode[subNode.name] = {};\r\n\t\t\t\t\tnode[subNode.name][subNode.id] = subNode;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnode[subNode.name] = subNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (subNode.name === 'PoseNode') {\r\n\r\n\t\t\t\t\tif (!Array.isArray(node[subNode.name])) {\r\n\r\n\t\t\t\t\t\tnode[subNode.name] = [node[subNode.name]];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode[subNode.name].push(subNode);\r\n\r\n\t\t\t\t} else if (node[subNode.name][subNode.id] === undefined) {\r\n\r\n\t\t\t\t\tnode[subNode.name][subNode.id] = subNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tparseProperty(reader) {\r\n\r\n\t\t\tconst type = reader.getString(1);\r\n\t\t\tlet length;\r\n\r\n\t\t\tswitch (type) {\r\n\r\n\t\t\t\tcase 'C':\r\n\t\t\t\t\treturn reader.getBoolean();\r\n\r\n\t\t\t\tcase 'D':\r\n\t\t\t\t\treturn reader.getFloat64();\r\n\r\n\t\t\t\tcase 'F':\r\n\t\t\t\t\treturn reader.getFloat32();\r\n\r\n\t\t\t\tcase 'I':\r\n\t\t\t\t\treturn reader.getInt32();\r\n\r\n\t\t\t\tcase 'L':\r\n\t\t\t\t\treturn reader.getInt64();\r\n\r\n\t\t\t\tcase 'R':\r\n\t\t\t\t\tlength = reader.getUint32();\r\n\t\t\t\t\treturn reader.getArrayBuffer(length);\r\n\r\n\t\t\t\tcase 'S':\r\n\t\t\t\t\tlength = reader.getUint32();\r\n\t\t\t\t\treturn reader.getString(length);\r\n\r\n\t\t\t\tcase 'Y':\r\n\t\t\t\t\treturn reader.getInt16();\r\n\r\n\t\t\t\tcase 'b':\r\n\t\t\t\tcase 'c':\r\n\t\t\t\tcase 'd':\r\n\t\t\t\tcase 'f':\r\n\t\t\t\tcase 'i':\r\n\t\t\t\tcase 'l':\r\n\t\t\t\t\tconst arrayLength = reader.getUint32();\r\n\t\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\r\n\r\n\t\t\t\t\tconst compressedLength = reader.getUint32();\r\n\r\n\t\t\t\t\tif (encoding === 0) {\r\n\r\n\t\t\t\t\t\tswitch (type) {\r\n\r\n\t\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\t\treturn reader.getBooleanArray(arrayLength);\r\n\r\n\t\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\t\treturn reader.getFloat64Array(arrayLength);\r\n\r\n\t\t\t\t\t\t\tcase 'f':\r\n\t\t\t\t\t\t\t\treturn reader.getFloat32Array(arrayLength);\r\n\r\n\t\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\t\treturn reader.getInt32Array(arrayLength);\r\n\r\n\t\t\t\t\t\t\tcase 'l':\r\n\t\t\t\t\t\t\t\treturn reader.getInt64Array(arrayLength);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (typeof fflate === 'undefined') {\r\n\r\n\t\t\t\t\t\tconsole.error('THREE.FBXLoader: External library fflate.min.js required.');\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\r\n\r\n\t\t\t\t\tconst reader2 = new BinaryReader(data.buffer);\r\n\r\n\t\t\t\t\tswitch (type) {\r\n\r\n\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\treturn reader2.getBooleanArray(arrayLength);\r\n\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\treturn reader2.getFloat64Array(arrayLength);\r\n\r\n\t\t\t\t\t\tcase 'f':\r\n\t\t\t\t\t\t\treturn reader2.getFloat32Array(arrayLength);\r\n\r\n\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\treturn reader2.getInt32Array(arrayLength);\r\n\r\n\t\t\t\t\t\tcase 'l':\r\n\t\t\t\t\t\t\treturn reader2.getInt64Array(arrayLength);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error('THREE.FBXLoader: Unknown property type ' + type);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass BinaryReader {\r\n\r\n\t\tconstructor(buffer, littleEndian) {\r\n\r\n\t\t\tthis.dv = new DataView(buffer);\r\n\t\t\tthis.offset = 0;\r\n\t\t\tthis.littleEndian = littleEndian !== undefined ? littleEndian : true;\r\n\r\n\t\t}\r\n\r\n\t\tgetOffset() {\r\n\r\n\t\t\treturn this.offset;\r\n\r\n\t\t}\r\n\r\n\t\tsize() {\r\n\r\n\t\t\treturn this.dv.buffer.byteLength;\r\n\r\n\t\t}\r\n\r\n\t\tskip(length) {\r\n\r\n\t\t\tthis.offset += length;\r\n\r\n\t\t} // seems like true/false representation depends on exporter.\r\n\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\r\n\t\t// then sees LSB.\r\n\r\n\r\n\t\tgetBoolean() {\r\n\r\n\t\t\treturn (this.getUint8() & 1) === 1;\r\n\r\n\t\t}\r\n\r\n\t\tgetBooleanArray(size) {\r\n\r\n\t\t\tconst a = [];\r\n\r\n\t\t\tfor (let i = 0; i < size; i++) {\r\n\r\n\t\t\t\ta.push(this.getBoolean());\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t}\r\n\r\n\t\tgetUint8() {\r\n\r\n\t\t\tconst value = this.dv.getUint8(this.offset);\r\n\t\t\tthis.offset += 1;\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t\tgetInt16() {\r\n\r\n\t\t\tconst value = this.dv.getInt16(this.offset, this.littleEndian);\r\n\t\t\tthis.offset += 2;\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t\tgetInt32() {\r\n\r\n\t\t\tconst value = this.dv.getInt32(this.offset, this.littleEndian);\r\n\t\t\tthis.offset += 4;\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t\tgetInt32Array(size) {\r\n\r\n\t\t\tconst a = [];\r\n\r\n\t\t\tfor (let i = 0; i < size; i++) {\r\n\r\n\t\t\t\ta.push(this.getInt32());\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t}\r\n\r\n\t\tgetUint32() {\r\n\r\n\t\t\tconst value = this.dv.getUint32(this.offset, this.littleEndian);\r\n\t\t\tthis.offset += 4;\r\n\t\t\treturn value;\r\n\r\n\t\t} // JavaScript doesn't support 64-bit integer so calculate this here\r\n\t\t// 1 << 32 will return 1 so using multiply operation instead here.\r\n\t\t// There's a possibility that this method returns wrong value if the value\r\n\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\r\n\t\t// TODO: safely handle 64-bit integer\r\n\r\n\r\n\t\tgetInt64() {\r\n\r\n\t\t\tlet low, high;\r\n\r\n\t\t\tif (this.littleEndian) {\r\n\r\n\t\t\t\tlow = this.getUint32();\r\n\t\t\t\thigh = this.getUint32();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = this.getUint32();\r\n\t\t\t\tlow = this.getUint32();\r\n\r\n\t\t\t} // calculate negative value\r\n\r\n\r\n\t\t\tif (high & 0x80000000) {\r\n\r\n\t\t\t\thigh = ~high & 0xFFFFFFFF;\r\n\t\t\t\tlow = ~low & 0xFFFFFFFF;\r\n\t\t\t\tif (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\r\n\t\t\t\tlow = low + 1 & 0xFFFFFFFF;\r\n\t\t\t\treturn - (high * 0x100000000 + low);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn high * 0x100000000 + low;\r\n\r\n\t\t}\r\n\r\n\t\tgetInt64Array(size) {\r\n\r\n\t\t\tconst a = [];\r\n\r\n\t\t\tfor (let i = 0; i < size; i++) {\r\n\r\n\t\t\t\ta.push(this.getInt64());\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t} // Note: see getInt64() comment\r\n\r\n\r\n\t\tgetUint64() {\r\n\r\n\t\t\tlet low, high;\r\n\r\n\t\t\tif (this.littleEndian) {\r\n\r\n\t\t\t\tlow = this.getUint32();\r\n\t\t\t\thigh = this.getUint32();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = this.getUint32();\r\n\t\t\t\tlow = this.getUint32();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn high * 0x100000000 + low;\r\n\r\n\t\t}\r\n\r\n\t\tgetFloat32() {\r\n\r\n\t\t\tconst value = this.dv.getFloat32(this.offset, this.littleEndian);\r\n\t\t\tthis.offset += 4;\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t\tgetFloat32Array(size) {\r\n\r\n\t\t\tconst a = [];\r\n\r\n\t\t\tfor (let i = 0; i < size; i++) {\r\n\r\n\t\t\t\ta.push(this.getFloat32());\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t}\r\n\r\n\t\tgetFloat64() {\r\n\r\n\t\t\tconst value = this.dv.getFloat64(this.offset, this.littleEndian);\r\n\t\t\tthis.offset += 8;\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t\tgetFloat64Array(size) {\r\n\r\n\t\t\tconst a = [];\r\n\r\n\t\t\tfor (let i = 0; i < size; i++) {\r\n\r\n\t\t\t\ta.push(this.getFloat64());\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t}\r\n\r\n\t\tgetArrayBuffer(size) {\r\n\r\n\t\t\tconst value = this.dv.buffer.slice(this.offset, this.offset + size);\r\n\t\t\tthis.offset += size;\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t\tgetString(size) {\r\n\r\n\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\r\n\t\t\tlet a = [];\r\n\r\n\t\t\tfor (let i = 0; i < size; i++) {\r\n\r\n\t\t\t\ta[i] = this.getUint8();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nullByte = a.indexOf(0);\r\n\t\t\tif (nullByte >= 0) a = a.slice(0, nullByte);\r\n\t\t\treturn THREE.LoaderUtils.decodeText(new Uint8Array(a));\r\n\r\n\t\t}\r\n\r\n\t} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\r\n\t// and BinaryParser( FBX Binary format)\r\n\r\n\r\n\tclass FBXTree {\r\n\r\n\t\tadd(key, val) {\r\n\r\n\t\t\tthis[key] = val;\r\n\r\n\t\t}\r\n\r\n\t} // ************** UTILITY FUNCTIONS **************\r\n\r\n\r\n\tfunction isFbxFormatBinary(buffer) {\r\n\r\n\t\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\r\n\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\r\n\r\n\t}\r\n\r\n\tfunction isFbxFormatASCII(text) {\r\n\r\n\t\tconst CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\r\n\t\tlet cursor = 0;\r\n\r\n\t\tfunction read(offset) {\r\n\r\n\t\t\tconst result = text[offset - 1];\r\n\t\t\ttext = text.slice(cursor + offset);\r\n\t\t\tcursor++;\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < CORRECT.length; ++i) {\r\n\r\n\t\t\tconst num = read(1);\r\n\r\n\t\t\tif (num === CORRECT[i]) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction getFbxVersion(text) {\r\n\r\n\t\tconst versionRegExp = /FBXVersion: (\\d+)/;\r\n\t\tconst match = text.match(versionRegExp);\r\n\r\n\t\tif (match) {\r\n\r\n\t\t\tconst version = parseInt(match[1]);\r\n\t\t\treturn version;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\r\n\r\n\t} // Converts FBX ticks into real time seconds.\r\n\r\n\r\n\tfunction convertFBXTimeToSeconds(time) {\r\n\r\n\t\treturn time / 46186158000;\r\n\r\n\t}\r\n\r\n\tconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\r\n\r\n\tfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\r\n\r\n\t\tlet index;\r\n\r\n\t\tswitch (infoObject.mappingType) {\r\n\r\n\t\t\tcase 'ByPolygonVertex':\r\n\t\t\t\tindex = polygonVertexIndex;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ByPolygon':\r\n\t\t\t\tindex = polygonIndex;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ByVertice':\r\n\t\t\t\tindex = vertexIndex;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'AllSame':\r\n\t\t\t\tindex = infoObject.indices[0];\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\r\n\r\n\t\t}\r\n\r\n\t\tif (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\r\n\t\tconst from = index * infoObject.dataSize;\r\n\t\tconst to = from + infoObject.dataSize;\r\n\t\treturn slice(dataArray, infoObject.buffer, from, to);\r\n\r\n\t}\r\n\r\n\tconst tempEuler = new THREE.Euler();\r\n\tconst tempVec = new THREE.Vector3(); // generate transformation from FBX transform data\r\n\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\r\n\t// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\r\n\r\n\tfunction generateTransform(transformData) {\r\n\r\n\t\tconst lTranslationM = new THREE.Matrix4();\r\n\t\tconst lPreRotationM = new THREE.Matrix4();\r\n\t\tconst lRotationM = new THREE.Matrix4();\r\n\t\tconst lPostRotationM = new THREE.Matrix4();\r\n\t\tconst lScalingM = new THREE.Matrix4();\r\n\t\tconst lScalingPivotM = new THREE.Matrix4();\r\n\t\tconst lScalingOffsetM = new THREE.Matrix4();\r\n\t\tconst lRotationOffsetM = new THREE.Matrix4();\r\n\t\tconst lRotationPivotM = new THREE.Matrix4();\r\n\t\tconst lParentGX = new THREE.Matrix4();\r\n\t\tconst lParentLX = new THREE.Matrix4();\r\n\t\tconst lGlobalT = new THREE.Matrix4();\r\n\t\tconst inheritType = transformData.inheritType ? transformData.inheritType : 0;\r\n\t\tif (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\r\n\r\n\t\tif (transformData.preRotation) {\r\n\r\n\t\t\tconst array = transformData.preRotation.map(THREE.MathUtils.degToRad);\r\n\t\t\tarray.push(transformData.eulerOrder);\r\n\t\t\tlPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n\r\n\t\t}\r\n\r\n\t\tif (transformData.rotation) {\r\n\r\n\t\t\tconst array = transformData.rotation.map(THREE.MathUtils.degToRad);\r\n\t\t\tarray.push(transformData.eulerOrder);\r\n\t\t\tlRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n\r\n\t\t}\r\n\r\n\t\tif (transformData.postRotation) {\r\n\r\n\t\t\tconst array = transformData.postRotation.map(THREE.MathUtils.degToRad);\r\n\t\t\tarray.push(transformData.eulerOrder);\r\n\t\t\tlPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n\t\t\tlPostRotationM.invert();\r\n\r\n\t\t}\r\n\r\n\t\tif (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\r\n\r\n\t\tif (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\r\n\t\tif (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\r\n\t\tif (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\r\n\t\tif (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\r\n\r\n\t\tif (transformData.parentMatrixWorld) {\r\n\r\n\t\t\tlParentLX.copy(transformData.parentMatrix);\r\n\t\t\tlParentGX.copy(transformData.parentMatrixWorld);\r\n\r\n\t\t}\r\n\r\n\t\tconst lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\r\n\r\n\t\tconst lParentGRM = new THREE.Matrix4();\r\n\t\tlParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\r\n\r\n\t\tconst lParentTM = new THREE.Matrix4();\r\n\t\tlParentTM.copyPosition(lParentGX);\r\n\t\tconst lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\r\n\t\tconst lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\r\n\t\tconst lLSM = lScalingM;\r\n\t\tconst lGlobalRS = new THREE.Matrix4();\r\n\r\n\t\tif (inheritType === 0) {\r\n\r\n\t\t\tlGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\r\n\r\n\t\t} else if (inheritType === 1) {\r\n\r\n\t\t\tlGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst lParentLSM = new THREE.Matrix4().scale(new THREE.Vector3().setFromMatrixScale(lParentLX));\r\n\t\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\r\n\t\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\r\n\t\t\tlGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\r\n\r\n\t\t}\r\n\r\n\t\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\r\n\t\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\r\n\r\n\t\tlet lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\r\n\t\tconst lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\r\n\t\tconst lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\r\n\t\tlGlobalT.copyPosition(lGlobalTranslation);\r\n\t\tlTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\r\n\r\n\t\tlTransform.premultiply(lParentGX.invert());\r\n\t\treturn lTransform;\r\n\r\n\t} // Returns the three.js intrinsic THREE.Euler order corresponding to FBX extrinsic THREE.Euler order\r\n\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\r\n\r\n\r\n\tfunction getEulerOrder(order) {\r\n\r\n\t\torder = order || 0;\r\n\t\tconst enums = ['ZYX', // -> XYZ extrinsic\r\n\t\t\t'YZX', // -> XZY extrinsic\r\n\t\t\t'XZY', // -> YZX extrinsic\r\n\t\t\t'ZXY', // -> YXZ extrinsic\r\n\t\t\t'YXZ', // -> ZXY extrinsic\r\n\t\t\t'XYZ' // -> ZYX extrinsic\r\n\t\t\t//'SphericXYZ', // not possible to support\r\n\t\t];\r\n\r\n\t\tif (order === 6) {\r\n\r\n\t\t\tconsole.warn('THREE.FBXLoader: unsupported THREE.Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\r\n\t\t\treturn enums[0];\r\n\r\n\t\t}\r\n\r\n\t\treturn enums[order];\r\n\r\n\t} // Parses comma separated list of numbers and returns them an array.\r\n\t// Used internally by the TextParser\r\n\r\n\r\n\tfunction parseNumberArray(value) {\r\n\r\n\t\tconst array = value.split(',').map(function (val) {\r\n\r\n\t\t\treturn parseFloat(val);\r\n\r\n\t\t});\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfunction convertArrayBufferToString(buffer, from, to) {\r\n\r\n\t\tif (from === undefined) from = 0;\r\n\t\tif (to === undefined) to = buffer.byteLength;\r\n\t\treturn THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\r\n\r\n\t}\r\n\r\n\tfunction append(a, b) {\r\n\r\n\t\tfor (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\r\n\r\n\t\t\ta[j] = b[i];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction slice(a, b, from, to) {\r\n\r\n\t\tfor (let i = from, j = 0; i < to; i++, j++) {\r\n\r\n\t\t\ta[j] = b[i];\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t} // inject array a2 into array a1 at index\r\n\r\n\r\n\tfunction inject(a1, index, a2) {\r\n\r\n\t\treturn a1.slice(0, index).concat(a2).concat(a1.slice(index));\r\n\r\n\t}\r\n\r\n\tTHREE.FBXLoader = FBXLoader;\r\n\r\n})();\r\n\r\nmodule.exports = exports = THREE.FBXLoader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}