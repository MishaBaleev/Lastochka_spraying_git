{"ast":null,"code":"var _jsxFileName = \"/Users/mihailbaleev/Documents/GitHub/Lastochka_spraying/frontend/src/Spraying/Spraying.js\",\n  _s = $RefreshSig$();\nimport \"./Spraying.scss\";\nimport Settings from \"./Settings/Settings\";\nimport { MapManager } from \"./MapManager\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { update_modal_message } from \"../AppSlice\";\nimport { sprayManager } from \"./sprayManager\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spraying = props => {\n  _s();\n  const [MapManager_obj, setMapManager] = useState(null);\n  const spray_manager = new sprayManager();\n  const [presets, setPresets] = useState([]);\n  const getPresets = () => {\n    axios.get(\"http://localhost:8000/presets\").then(response => {\n      console.log(response);\n    });\n  };\n  const setPreset = key => {\n    let preset = presets[key];\n    let cur_zone = {\n      ...zone_settings\n    };\n    cur_zone.culture = key;\n    cur_zone.line_spacing = preset.line_spacing;\n    setZone(cur_zone);\n    let cur_move = {\n      ...move_settings\n    };\n    Object.keys(preset).forEach(item_key => {\n      cur_move[item_key] = preset[item_key];\n    });\n    setMove(cur_move);\n    MapManager_obj.changeLineSpacing(preset.line_spacing);\n    MapManager_obj.changeAlt(preset.alt);\n  };\n  const [zone_settings, setZone] = useState({\n    culture: \"wheat\",\n    start_pos: {\n      x: \"\",\n      y: \"\"\n    },\n    angle: 0,\n    line_spacing: 3,\n    is_return: true\n  });\n  const changeZone = (key, value) => {\n    let cur_zone = {\n      ...zone_settings\n    };\n    cur_zone[key] = value;\n    setZone(cur_zone);\n    if (key === \"angle\") {\n      MapManager_obj.rotatePolygon(value);\n    } else if (key === \"line_spacing\") {\n      MapManager_obj.changeLineSpacing(value);\n    } else if (key === \"is_return\") {\n      MapManager_obj.toggleRTL();\n    } else if (key === \"culture\") {\n      setPreset(value);\n    }\n  };\n  const [move_settings, setMove] = useState({\n    speed: 30,\n    alt: 3.5,\n    tank_capacity: 1,\n    liters_per_hectar: 75,\n    mode: \"spray\"\n  });\n  const changeMove = (key, value) => {\n    let cur_move = {\n      ...move_settings\n    };\n    cur_move[key] = value;\n    setMove(cur_move);\n    if (key === \"alt\") {\n      MapManager_obj.changeAlt(value);\n    }\n  };\n  const [wheather_settings, setWheather] = useState({\n    temperature: 20,\n    wind_speed: 2,\n    humidity: 90,\n    adjuvants: false,\n    wind_direction: \"N\"\n  });\n  const changeWheather = (key, value) => {\n    let cur_wheather = {\n      ...wheather_settings\n    };\n    cur_wheather[key] = value;\n    setWheather(cur_wheather);\n    if (key === \"wind_speed\" || key === \"wind_direction\") {\n      MapManager_obj.changeWind(key, value);\n    }\n  };\n  const savePlan = () => {\n    console.log(zone_settings);\n    console.log(move_settings);\n  };\n  useEffect(() => {\n    if (props.manager3D !== null) {\n      let manager = new MapManager(props.map, props.manager3D, props.update_modal_message, zone_settings);\n      setMapManager(manager);\n      props.map.on(\"mousemove\", e => {\n        if (manager.translate_cursor === true) {\n          let cur_zone = {\n            ...zone_settings\n          };\n          cur_zone.start_pos.x = e.lngLat.lng;\n          cur_zone.start_pos.y = e.lngLat.lat;\n          setZone(cur_zone);\n        }\n      });\n      props.map.on(\"click\", e => {\n        if (manager.translate_cursor === true) {\n          manager.setStartMarker([e.lngLat.lng, e.lngLat.lat]);\n        } else {\n          manager.setPolygon([e.lngLat.lng, e.lngLat.lat]);\n        }\n      });\n    }\n    getPresets();\n  }, [props.manager3D]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spraying\",\n    children: /*#__PURE__*/_jsxDEV(Settings, {\n      map_manager: MapManager_obj,\n      spray_manager: spray_manager,\n      zone_settings: zone_settings,\n      changeZone: changeZone,\n      move_settings: move_settings,\n      changeMove: changeMove,\n      wheather_settings: wheather_settings,\n      changeWheather: changeWheather,\n      savePlan: savePlan,\n      presets: presets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 12\n  }, this);\n};\n_s(Spraying, \"F1rss6LPQzHK0Oka+/JygQRyGjg=\");\n_c = Spraying;\nconst mapStateToProps = state => {\n  return state;\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    \"update_modal_message\": data => {\n      dispatch(update_modal_message(data));\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Spraying);\nvar _c;\n$RefreshReg$(_c, \"Spraying\");","map":{"version":3,"names":["Settings","MapManager","useEffect","useState","connect","update_modal_message","sprayManager","axios","jsxDEV","_jsxDEV","Spraying","props","_s","MapManager_obj","setMapManager","spray_manager","presets","setPresets","getPresets","get","then","response","console","log","setPreset","key","preset","cur_zone","zone_settings","culture","line_spacing","setZone","cur_move","move_settings","Object","keys","forEach","item_key","setMove","changeLineSpacing","changeAlt","alt","start_pos","x","y","angle","is_return","changeZone","value","rotatePolygon","toggleRTL","speed","tank_capacity","liters_per_hectar","mode","changeMove","wheather_settings","setWheather","temperature","wind_speed","humidity","adjuvants","wind_direction","changeWheather","cur_wheather","changeWind","savePlan","manager3D","manager","map","on","e","translate_cursor","lngLat","lng","lat","setStartMarker","setPolygon","className","children","map_manager","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","mapDispatchToProps","dispatch","data","$RefreshReg$"],"sources":["/Users/mihailbaleev/Documents/GitHub/Lastochka_spraying/frontend/src/Spraying/Spraying.js"],"sourcesContent":["import \"./Spraying.scss\";\nimport Settings from \"./Settings/Settings\";\nimport { MapManager } from \"./MapManager\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { update_modal_message } from \"../AppSlice\";\nimport { sprayManager } from \"./sprayManager\";\nimport axios from \"axios\";\n\nconst Spraying = (props) => {\n    const [MapManager_obj, setMapManager] = useState(null)\n    const spray_manager = new sprayManager()\n\n    const [presets, setPresets] = useState([])\n    const getPresets = () => {\n        axios.get(\"http://localhost:8000/presets\").then(response => {\n            console.log(response)\n        })\n    }\n\n    const setPreset = (key) => {\n        let preset = presets[key]\n        let cur_zone = {...zone_settings}\n        cur_zone.culture = key\n        cur_zone.line_spacing = preset.line_spacing\n        setZone(cur_zone)\n        let cur_move = {...move_settings}\n        Object.keys(preset).forEach(item_key => {\n            cur_move[item_key] = preset[item_key]\n        })\n        setMove(cur_move)\n        MapManager_obj.changeLineSpacing(preset.line_spacing)\n        MapManager_obj.changeAlt(preset.alt)\n    }\n\n    const [zone_settings, setZone] = useState({\n        culture: \"wheat\",\n        start_pos: {x: \"\", y: \"\"},\n        angle: 0,\n        line_spacing: 3,\n        is_return: true\n    })\n    const changeZone = (key, value) => {\n        let cur_zone = {...zone_settings}\n            cur_zone[key] = value \n            setZone(cur_zone)\n        if (key === \"angle\"){\n            MapManager_obj.rotatePolygon(value)\n        }else if (key === \"line_spacing\"){\n            MapManager_obj.changeLineSpacing(value)\n        }else if (key === \"is_return\"){\n            MapManager_obj.toggleRTL()\n        }else if (key === \"culture\"){\n            setPreset(value)\n        }\n    }\n    const [move_settings, setMove] = useState({\n        speed: 30,\n        alt: 3.5,\n        tank_capacity: 1,\n        liters_per_hectar: 75,\n        mode: \"spray\"\n    })\n    const changeMove = (key, value) => {\n        let cur_move = {...move_settings}\n        cur_move[key] = value \n        setMove(cur_move)\n        if (key === \"alt\"){\n            MapManager_obj.changeAlt(value)\n        }\n    }\n\n    const [wheather_settings, setWheather] = useState({\n        temperature: 20,\n        wind_speed: 2,\n        humidity: 90,\n        adjuvants: false,\n        wind_direction: \"N\"\n    })\n    const changeWheather = (key, value) => {\n        let cur_wheather = {...wheather_settings}\n        cur_wheather[key] = value \n        setWheather(cur_wheather)\n        if ((key === \"wind_speed\") || (key === \"wind_direction\")){\n            MapManager_obj.changeWind(key, value)\n        }\n    }\n\n    const savePlan = () => {\n        console.log(zone_settings)\n        console.log(move_settings)\n    }\n    useEffect(() => {\n        if (props.manager3D !== null){\n            let manager = new MapManager(props.map, props.manager3D, props.update_modal_message, zone_settings)\n            setMapManager(manager)\n            props.map.on(\"mousemove\", (e) => {\n                if (manager.translate_cursor === true){\n                    let cur_zone = {...zone_settings}\n                    cur_zone.start_pos.x = e.lngLat.lng \n                    cur_zone.start_pos.y = e.lngLat.lat\n                    setZone(cur_zone)\n                }\n            })\n            props.map.on(\"click\", (e) => {\n                if (manager.translate_cursor === true){\n                    manager.setStartMarker([e.lngLat.lng, e.lngLat.lat])\n                }else{\n                    manager.setPolygon([e.lngLat.lng, e.lngLat.lat])\n                }\n            })\n        }\n        getPresets()\n    }, [props.manager3D])\n\n    return <div className=\"spraying\">\n        <Settings \n            map_manager={MapManager_obj} \n            spray_manager={spray_manager} \n            zone_settings={zone_settings}\n            changeZone={changeZone}\n            move_settings={move_settings}\n            changeMove={changeMove}\n            wheather_settings={wheather_settings}\n            changeWheather={changeWheather}\n            savePlan={savePlan}\n            presets={presets}\n        />\n    </div>\n}\nconst mapStateToProps = (state) => {return state}\nconst mapDispatchToProps = (dispatch) => { return{\n    \"update_modal_message\": (data) => {dispatch(update_modal_message(data))}\n}}\nexport default connect(mapStateToProps, mapDispatchToProps)(Spraying)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}