{"ast":null,"code":"import takeoff_marker from \"./img/takeoff_marker.png\";\nimport point_marker from \"./img/point_marker.png\";\nimport icon_center from \"./img/icon_center.png\";\nimport mapboxgl from 'mapbox-gl';\nfunction rotateFigureCenter(cords, center, phi) {\n  phi = phi * Math.PI / 180;\n  let rotatedFigure = [];\n  for (let pair of cords) {\n    let x = pair[0] - center[0];\n    let y = pair[1] - center[1];\n    let x_rot = x * Math.cos(phi) - y * Math.sin(phi);\n    let y_rot = x * Math.sin(phi) + y * Math.cos(phi);\n    rotatedFigure.push([x_rot + center[0], y_rot + center[1]]);\n  }\n  return rotatedFigure;\n}\nfunction addTurnaroundDistance(cords, distance, direction) {\n  let turnaround_distance_y = getGeoCordsFromMeters(distance, cords[1]);\n  let cortej = [];\n  if (direction == true) {\n    cortej = [cords[0], cords[1] + turnaround_distance_y];\n  } else {\n    cortej = [cords[0], cords[1] - turnaround_distance_y];\n  }\n  return cortej;\n}\nfunction getProjective(cords) {\n  let x = cords.map(x => x[0]);\n  let y = cords.map(x => x[1]);\n  let x_projection = {\n    min: 0,\n    max: 0,\n    pr: 0\n  };\n  let y_projection = {\n    min: 0,\n    max: 0,\n    pr: 0\n  };\n  x_projection.min = Math.min(...x);\n  x_projection.max = Math.max(...x);\n  x_projection.pr = x_projection.max - x_projection.min;\n  y_projection.min = Math.min(...y);\n  y_projection.max = Math.max(...y);\n  y_projection.pr = y_projection.max - y_projection.min;\n  return {\n    x_pr: x_projection,\n    y_pr: y_projection\n  };\n}\nfunction getGeoCordsFromMeters(m, min_lng) {\n  let step = m / 1000;\n  const km_ekv = 40075.696 / 360;\n  let step_deg = step / (km_ekv * Math.cos(Math.PI * min_lng / 180));\n  return step_deg;\n}\nexport class CommonManager {\n  constructor(map, manager3D, update_modal_message) {\n    this.map = map;\n    this.manager3D = manager3D;\n    this.translate_cursor = false;\n    this.start_marker = null;\n    this.update_modal_message = update_modal_message;\n    this.polygon = null;\n    this.route_line = null;\n    this.params = {\n      angle: {\n        value: 0\n      },\n      line_distance: {\n        value: 2\n      },\n      turnaround_distance: {\n        value: 0\n      },\n      reverse: {\n        value: false\n      },\n      is_rtl: true\n    };\n    this.conture = {\n      markers: [],\n      cords: [],\n      edges: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'Polygon',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer_area: {\n        'id': \"conture\",\n        'type': 'fill',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'fill-color': '#008000',\n          'fill-opacity': 0.5\n        }\n      },\n      layer_line: {\n        'id': 'line_conture',\n        'type': 'line',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'line-color': '#000',\n          'line-width': 2\n        }\n      }\n    };\n    this.markup = {\n      cords: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer: {\n        'id': \"markup\",\n        'type': 'line',\n        'source': \"markup\",\n        'layout': {},\n        'paint': {\n          'line-color': '#fff',\n          'line-width': 2\n        }\n      }\n    };\n  }\n  toggleCursor() {\n    if (this.translate_cursor === true) {\n      this.translate_cursor = false;\n    } else {\n      this.translate_cursor = true;\n    }\n  }\n  setStartMarker(coords) {\n    if (this.start_marker === null) {\n      this.start_marker = new mapboxgl.Marker({\n        draggable: true\n      }).setLngLat(coords).addTo(this.map);\n      let icon = document.createElement('img');\n      icon.src = takeoff_marker;\n      icon.width = 35;\n      icon.height = 35;\n      this.start_marker.getElement().querySelector(\"svg\").remove();\n      this.start_marker.getElement().append(icon);\n      let indicator = document.createElement('span');\n      indicator.className = \"mapbox_gl_active_indicator\";\n      this.start_marker.getElement().append(indicator);\n      this.start_marker.getElement().classList.add(\"takeoff\");\n    } else {\n      this.start_marker.remove();\n      this.start_marker = null;\n      this.setStartMarker(coords);\n    }\n    this.updateRouteLine();\n  }\n  changeMarkerIcon(marker, Icon, width, height) {\n    let icon = document.createElement('img');\n    icon.src = Icon;\n    icon.width = width;\n    icon.height = height;\n    marker.getElement().classList.add(\"mapboxgl-marker__polygon\");\n    marker.getElement().querySelector(\"svg\").remove();\n    marker.getElement().append(icon);\n    let indicator = document.createElement('span');\n    indicator.className = \"mapbox_gl_active_indicator\";\n    marker.getElement().append(indicator);\n  }\n  changePointIcon(marker, Icon, width, height) {\n    let icon = document.createElement('img');\n    icon.src = Icon;\n    icon.width = width;\n    icon.height = height;\n    marker.getElement().querySelector(\"svg\").remove();\n    marker.getElement().append(icon);\n    let indicator = document.createElement('span');\n    indicator.className = \"mapbox_gl_active_indicator\";\n    marker.getElement().append(indicator);\n    let numContainer = document.createElement('span');\n    numContainer.className = \"mapbox_gl_num\";\n    marker.getElement().append(numContainer);\n  }\n  rotatePolygon(angle) {\n    ///real rotate\n    this.params.angle.value = Number(angle);\n    if (this.conture.cords.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n    }\n  }\n  changeLineSpacing(dist) {\n    this.params.line_distance.value = Number(dist);\n    if (this.conture.cords.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n    }\n  }\n  toggleRTL() {\n    if (this.params.is_rtl === true) {\n      this.params.is_rtl = false;\n    } else {\n      this.params.is_rtl = true;\n    }\n    if (this.conture.markers.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n    }\n  }\n  markupPolygon() {\n    let edges = [];\n    let cords_markup = this.rotate(this.conture.cords, 1);\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      edges.push([cords_markup[c], cords_markup[c + 1]]);\n    }\n    let pr = getProjective(cords_markup);\n    let step = getGeoCordsFromMeters(this.params.line_distance.value, pr.y_pr.min);\n    let steps = Math.trunc(pr.x_pr.pr / step);\n    let cords = [];\n    for (let i = 0; i < steps; i++) {\n      let x_0 = pr.x_pr.min + step * (i + 1);\n      let crossings = [];\n      let low = [1000, null];\n      let high = [-1000, null];\n      for (let j = 0; j < edges.length; j++) {\n        let A = edges[j][0];\n        let B = edges[j][1];\n        let y = (B[1] - A[1]) * (x_0 - B[0]) / (B[0] - A[0]) + B[1];\n        let min_y = Math.min(A[1], B[1]);\n        let max_y = Math.max(A[1], B[1]);\n        if (y > min_y && y < max_y) {\n          if (y > high[0]) {\n            high[0] = y;\n            high[1] = [x_0, y];\n          } else if (y < low[0]) {\n            low[0] = y;\n            low[1] = [x_0, y];\n          }\n          crossings.push([x_0, y]);\n        }\n      }\n      crossings = crossings.sort(function (a, b) {\n        return a[1] - b[1];\n      });\n      low[1] = crossings[0];\n      high[1] = crossings[crossings.length - 1];\n      low[1] = addTurnaroundDistance(low[1], this.params.turnaround_distance.value, false);\n      high[1] = addTurnaroundDistance(high[1], this.params.turnaround_distance.value, true);\n      if ((cords.length + 2) % 4 == 0) {\n        cords.push(low[1]);\n        cords.push(high[1]);\n      } else {\n        cords.push(high[1]);\n        cords.push(low[1]);\n      }\n    }\n    cords = this.rotate(cords, -1);\n    if (cords.length == 0) {\n      return this.conture.cords;\n    } else {\n      return cords;\n    }\n  }\n  addConturePoint(coords) {\n    let cords = coords;\n    let marker = new mapboxgl.Marker({\n      draggable: true\n    }).setLngLat(cords).addTo(this.map);\n    marker.conture_index = this.conture.markers.length;\n    this.conture.markers.push(marker);\n    let dragContainer = e => {\n      e.mapElement = this.polygon;\n      e.marker = marker;\n      e.evt = {};\n      this.drag(e);\n    };\n    let dragEndContainer = e => {\n      e.evt = {};\n      this.dragEndCont(e);\n    };\n    let dragStartContainer = e => {\n      e.evt = {};\n      this.dragStartCont(e);\n    };\n    marker.on(\"drag\", dragContainer);\n    marker.on(\"dragend\", dragEndContainer);\n    marker.on(\"dragstart\", dragStartContainer);\n    this.changeMarkerIcon(marker, point_marker, 35, 35);\n    if (this.conture.markers.length == 1) {\n      this.conture.cords.push(cords);\n      this.conture.cords.push(cords);\n      this.conture.source.data.geometry.coordinates = [this.conture.cords];\n      this.map.addSource(\"conture\", this.conture.source);\n      this.map.addLayer(this.conture.layer_area);\n      this.map.addLayer(this.conture.layer_line);\n    }\n    if (this.conture.markers.length > 1) {\n      this.conture.cords.pop();\n      this.conture.cords.push(cords);\n      this.conture.cords.push(this.conture.cords[0]);\n      this.conture.source.data.geometry.coordinates = [this.conture.cords];\n      this.map.getSource(\"conture\").setData(this.conture.source.data);\n    }\n    if (this.conture.markers.length == 3) {\n      this.center_marker = new mapboxgl.Marker({\n        draggable: true\n      });\n      this.changeMarkerIcon(this.center_marker, icon_center, 25, 25);\n      let cords = [0, 0];\n      for (let c = 0; c < this.conture.cords.length - 1; c++) {\n        cords[0] += this.conture.cords[c][0];\n        cords[1] += this.conture.cords[c][1];\n      }\n      cords = [cords[0] / (this.conture.cords.length - 1), cords[1] / (this.conture.cords.length - 1)];\n      this.center_marker.setLngLat(cords).addTo(this.map);\n      this.container__dragStartCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragStartCenterMarker(e);\n      };\n      this.container__dragCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragCenterMarker(e);\n      };\n      this.container__dragEndStartCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragEndStartCenterMarker(e);\n      };\n      this.center_marker.on(\"dragstart\", this.container__dragStartCenterMarker);\n      this.center_marker.on(\"drag\", this.container__dragCenterMarker);\n      this.center_marker.on(\"dragend\", this.container__dragEndStartCenterMarker);\n      let cords_markup = this.markupPolygon();\n      this.markup.cords = cords_markup;\n      // this.markup.source.data.geometry.coordinates = this.markup.cords\n      // this.map.addSource(\"markup\", this.markup.source)\n      // this.start_point = new mapboxgl.Marker({\n      //   draggable:false\n      // })\n      // this.end_point = new mapboxgl.Marker({\n      //   draggable:false\n      // })\n\n      // this.start_point.setLngLat(this.markup.cords[0]).addTo(this.map)\n      // this.end_point.setLngLat(this.markup.cords[this.markup.cords.length-1]).addTo(this.map)\n\n      // this.changePointIcon(this.start_point, point_marker, 35, 35)\n      // this.changePointIcon(this.end_point, point_marker, 35, 35)\n    }\n    if (this.conture.markers.length >= 3) {\n      let cords_markup = this.markupPolygon();\n      this.markup.cords = cords_markup;\n      this.updateRouteLine();\n    }\n  }\n  rotate(cords, factor) {\n    let centerCords = this.center_marker.getLngLat();\n    centerCords = [centerCords.lng, centerCords.lat];\n    let rotated_cords = rotateFigureCenter(cords, centerCords, factor * this.params.angle.value);\n    return rotated_cords;\n  }\n  isValid() {\n    let edges = [];\n    let cords_markup = this.rotate(this.conture.cords, 1);\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      edges.push([cords_markup[c], cords_markup[c + 1]]);\n    }\n    let pr = getProjective(cords_markup);\n    let step = getGeoCordsFromMeters(this.params.line_distance.value, pr.y_pr.min);\n    let steps = Math.trunc(pr.x_pr.pr / step);\n    if (1 > steps) return false;else return true;\n  }\n  updateMarkup() {\n    this.markup.cords = this.markupPolygon();\n    this.markup.source.data.geometry.coordinates = this.markup.cords;\n    this.updateRouteLine();\n  }\n  updatePolygonPosition() {\n    this.conture.source.data.geometry.coordinates = [this.conture.cords];\n    this.map.getSource(\"conture\").setData(this.conture.source.data);\n    this.updateMarkup();\n  }\n  dragStartCenterMarker(e) {\n    // e.evt.route.tbManager.resetCollisionObjects()\n    let center_cords = e.marker.getLngLat();\n    e.marker.diff = [];\n    for (let cords of this.conture.cords) {\n      e.marker.diff.push([cords[0] - center_cords.lng, cords[1] - center_cords.lat]);\n    }\n  }\n  dragCenterMarker(e) {\n    let center_cords = e.marker.getLngLat();\n    for (let c = 0; c < this.conture.markers.length; c++) {\n      let changed_cords = [e.marker.diff[c][0] + center_cords.lng, e.marker.diff[c][1] + center_cords.lat];\n      this.conture.cords[c] = changed_cords;\n      if (c == 0) {\n        this.conture.cords[this.conture.cords.length - 1] = changed_cords;\n      }\n      this.conture.markers[c].setLngLat(changed_cords);\n    }\n    this.updatePolygonPosition();\n    this.updateMarkup();\n\n    // e.evt.route.tbManager.deleteObject(e.mapElement.params.id)\n    // for (let coord of e.mapElement.conture.cords){\n    //   e.evt.route.tbManager.addSphere(\n    //     [coord[0], coord[1],  Number(e.mapElement.params.alt.value)],\n    //     e.mapElement.params.id\n    //   )\n    // }\n    // e.evt.route.tbManager.unitSpheres(e.evt.route)\n  }\n  dragEndStartCenterMarker(e) {\n    e.marker.diff = [];\n    // e.evt.route.tbManager.checkCollision(e.evt.route)\n  }\n  drag(e) {\n    let cords = e.marker.getLngLat();\n    let before_cords = this.conture.cords[e.marker.conture_index];\n    this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat];\n    if (!this.isValid()) {\n      this.conture.cords[e.marker.conture_index] = before_cords;\n      e.marker.setLngLat(before_cords);\n      return;\n    }\n    this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat];\n    if (e.marker.conture_index == 0) {\n      this.conture.cords[this.conture.cords.length - 1] = [cords.lng, cords.lat];\n    }\n    this.conture.source.data.geometry.coordinates = [this.conture.cords];\n    this.map.getSource(\"conture\").setData(this.conture.source.data);\n    this.updateCenterMarker();\n    this.updateMarkup();\n\n    // e.evt.route.tbManager.deleteObject(e.mapElement.params.id)\n    // for (let coord of e.mapElement.conture.cords){\n    //   e.evt.route.tbManager.addSphere(\n    //     [coord[0], coord[1],  Number(e.mapElement.params.alt.value)],\n    //     e.mapElement.params.id\n    //   )\n    // }\n    // e.evt.route.tbManager.unitSpheres(e.evt.route)\n  }\n  dragStartCont(e) {\n    // e.evt.route.tbManager.resetCollisionObjects()\n  }\n  dragEndCont(e) {\n    // e.evt.route.tbManager.checkCollision(e.evt.route)\n  }\n  dragEnd(e) {\n    // e.mapElement.setCords(e.mapElement.marker.getLngLat())\n  }\n  updateCenterMarker() {\n    let cords = [0, 0];\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      cords[0] += this.conture.cords[c][0];\n      cords[1] += this.conture.cords[c][1];\n    }\n    cords = [cords[0] / (this.conture.cords.length - 1), cords[1] / (this.conture.cords.length - 1)];\n    this.center_marker.setLngLat(cords);\n  }\n  updateRouteLine() {\n    if (this.conture.markers.length === 3) {\n      let route = [];\n      if (this.params.is_rtl === true) {\n        route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords).concat([[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]]);\n      } else {\n        route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords);\n      }\n      let source = {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'properties': {},\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': route\n          }\n        }\n      };\n      try {\n        this.map.addSource('route', source);\n      } catch {\n        this.map.removeSource(\"route\");\n        this.map.addSource('route', source);\n      }\n      let layer = {\n        'id': 'route',\n        'type': 'line',\n        'source': 'route',\n        'layout': {\n          'line-join': 'round',\n          'line-cap': 'round'\n        },\n        'paint': {\n          'line-color': 'yellow',\n          'line-width': 3\n        }\n      };\n      this.map.addLayer(layer);\n    } else if (this.conture.cords.length > 3) {\n      let route = [];\n      if (this.params.is_rtl === true) {\n        route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords).concat([[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]]);\n      } else {\n        route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords);\n      }\n      let new_data = {\n        \"type\": \"FeatureCollection\",\n        \"features\": [{\n          \"type\": \"Feature\",\n          \"geometry\": {\n            \"type\": \"LineString\",\n            \"coordinates\": route\n          }\n        }]\n      };\n      this.map.getSource(\"route\").setData(new_data);\n    }\n  }\n  setPolygon(coords) {\n    if (this.start_marker === null) {\n      this.update_modal_message({\n        active: true,\n        heading: \"Ошибка\",\n        message: \"Сначала добавьте точку старта\"\n      });\n    } else {\n      this.addConturePoint(coords);\n    }\n  }\n}","map":{"version":3,"names":["takeoff_marker","point_marker","icon_center","mapboxgl","rotateFigureCenter","cords","center","phi","Math","PI","rotatedFigure","pair","x","y","x_rot","cos","sin","y_rot","push","addTurnaroundDistance","distance","direction","turnaround_distance_y","getGeoCordsFromMeters","cortej","getProjective","map","x_projection","min","max","pr","y_projection","x_pr","y_pr","m","min_lng","step","km_ekv","step_deg","CommonManager","constructor","manager3D","update_modal_message","translate_cursor","start_marker","polygon","route_line","params","angle","value","line_distance","turnaround_distance","reverse","is_rtl","conture","markers","edges","source","layer_area","layer_line","markup","layer","toggleCursor","setStartMarker","coords","Marker","draggable","setLngLat","addTo","icon","document","createElement","src","width","height","getElement","querySelector","remove","append","indicator","className","classList","add","updateRouteLine","changeMarkerIcon","marker","Icon","changePointIcon","numContainer","rotatePolygon","Number","length","updateCenterMarker","updateMarkup","changeLineSpacing","dist","toggleRTL","markupPolygon","cords_markup","rotate","c","steps","trunc","i","x_0","crossings","low","high","j","A","B","min_y","max_y","sort","a","b","addConturePoint","conture_index","dragContainer","e","mapElement","evt","drag","dragEndContainer","dragEndCont","dragStartContainer","dragStartCont","on","data","geometry","coordinates","addSource","addLayer","pop","getSource","setData","center_marker","container__dragStartCenterMarker","dragStartCenterMarker","container__dragCenterMarker","dragCenterMarker","container__dragEndStartCenterMarker","dragEndStartCenterMarker","factor","centerCords","getLngLat","lng","lat","rotated_cords","isValid","updatePolygonPosition","center_cords","diff","changed_cords","before_cords","dragEnd","route","concat","removeSource","new_data","setPolygon","active","heading","message"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/src/Spraying/CommonManager.js"],"sourcesContent":["import takeoff_marker from \"./img/takeoff_marker.png\";\nimport point_marker from \"./img/point_marker.png\";\nimport icon_center from \"./img/icon_center.png\";\nimport mapboxgl from 'mapbox-gl';\n\nfunction rotateFigureCenter(cords, center, phi){\n    phi = phi*Math.PI/180\n    let rotatedFigure = []\n  \n    for(let pair of cords){\n        let x = pair[0]-center[0]\n        let y = pair[1]-center[1]\n        let x_rot = x*Math.cos(phi) - y*Math.sin(phi)\n        let y_rot = x*Math.sin(phi) + y*Math.cos(phi)\n        rotatedFigure.push([\n          x_rot+center[0], y_rot+center[1]\n        ])\n    }\n    return rotatedFigure\n}\n\nfunction addTurnaroundDistance(cords, distance, direction){\n    let turnaround_distance_y = getGeoCordsFromMeters(distance, cords[1])\n  \n    let cortej = []\n  \n    if(direction == true){\n      cortej = [cords[0], cords[1]+turnaround_distance_y]\n    }\n    else{\n      cortej = [cords[0], cords[1]-turnaround_distance_y]\n    }\n    return cortej\n}\n\nfunction getProjective(cords){\n    let x = cords.map(x=>x[0])\n    let y = cords.map(x=>x[1])\n  \n    let x_projection = {\n        min:0,\n        max:0,\n        pr:0\n    }\n    let y_projection = {\n        min:0,\n        max:0,\n        pr:0\n    }\n  \n    x_projection.min = Math.min(...x)\n    x_projection.max = Math.max(...x)\n    x_projection.pr = x_projection.max - x_projection.min\n    \n    y_projection.min = Math.min(...y)\n    y_projection.max = Math.max(...y)\n    y_projection.pr = y_projection.max - y_projection.min\n  \n    return {x_pr:x_projection, y_pr:y_projection}\n}\n\nfunction getGeoCordsFromMeters(m, min_lng){\n    let step = m/1000\n    const km_ekv = 40075.696/360\n    let step_deg = step/(km_ekv*Math.cos(Math.PI*min_lng/180))\n    return step_deg\n}\n\nexport class CommonManager{\n    constructor(map, manager3D, update_modal_message){\n        this.map = map \n        this.manager3D = manager3D\n        this.translate_cursor = false \n        this.start_marker = null\n        this.update_modal_message = update_modal_message\n        this.polygon = null\n        this.route_line = null\n        this.params = {\n          angle: {value: 0},\n          line_distance: {value: 2},\n          turnaround_distance: {value: 0},\n          reverse: {value: false},\n          is_rtl: true\n        }\n        this.conture = {\n            markers:[],\n            cords:[],\n            edges:[],\n            source:{\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'geometry': {\n                'type': 'Polygon',\n                'coordinates': [\n                    []\n                  ]\n                }\n              }\n            },\n            layer_area:{\n              'id': \"conture\",\n              'type': 'fill',\n              'source': \"conture\",\n              'layout': {},\n              'paint': {\n                'fill-color': '#008000',\n                'fill-opacity': 0.5\n                }\n            },\n            layer_line:{\n                'id': 'line_conture',\n                'type': 'line',\n                'source': \"conture\",\n                'layout': {},\n                'paint': {\n                'line-color': '#000',\n                'line-width': 2\n                }\n            }\n        }\n          this.markup = {\n            cords:[],\n            source:{\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'geometry': {\n                'type': 'LineString',\n                'coordinates': [\n                    []\n                  ]\n                }\n              }\n            },\n            layer:{\n              'id': \"markup\",\n              'type': 'line',\n              'source': \"markup\",\n              'layout': {},\n              'paint': {\n              'line-color': '#fff',\n              'line-width': 2\n              }\n            }\n        };\n    }\n\n    toggleCursor(){\n        if (this.translate_cursor === true){\n            this.translate_cursor = false \n        }else{\n            this.translate_cursor = true\n        }\n    }\n\n    setStartMarker(coords){\n      if (this.start_marker === null){\n        this.start_marker = new mapboxgl.Marker(\n            {\n                draggable: true\n            }\n        ).setLngLat(coords).addTo(this.map)\n        let icon = document.createElement('img');\n        icon.src = takeoff_marker;\n        icon.width = 35\n        icon.height = 35\n        this.start_marker.getElement().querySelector(\"svg\").remove()\n        this.start_marker.getElement().append(icon)\n        let indicator = document.createElement('span');\n        indicator.className = \"mapbox_gl_active_indicator\"\n        this.start_marker.getElement().append(indicator)\n        this.start_marker.getElement().classList.add(\"takeoff\")\n      }else{\n        this.start_marker.remove()\n        this.start_marker = null\n        this.setStartMarker(coords)\n      }\n      this.updateRouteLine()\n    }\n\n    changeMarkerIcon(marker, Icon, width, height) {\n      let icon = document.createElement('img');\n      icon.src = Icon;\n      icon.width = width\n      icon.height = height\n      marker.getElement().classList.add(\"mapboxgl-marker__polygon\")\n      marker.getElement().querySelector(\"svg\").remove()\n      marker.getElement().append(icon)\n  \n      let indicator = document.createElement('span');\n      indicator.className = \"mapbox_gl_active_indicator\"\n      marker.getElement().append(indicator)\n    }\n\n    changePointIcon(marker, Icon, width, height){\n        let icon = document.createElement('img');\n        icon.src = Icon;\n        icon.width = width\n        icon.height = height\n    \n        marker.getElement().querySelector(\"svg\").remove()\n        marker.getElement().append(icon)\n    \n        let indicator = document.createElement('span');\n        indicator.className = \"mapbox_gl_active_indicator\"\n        marker.getElement().append(indicator)\n    \n        let numContainer = document.createElement('span');\n        numContainer.className = \"mapbox_gl_num\"\n        marker.getElement().append(numContainer)\n    }\n\n    rotatePolygon(angle){ ///real rotate\n      this.params.angle.value = Number(angle)\n      if (this.conture.cords.length != 0){\n        this.updateCenterMarker()\n        this.updateMarkup()\n      }\n    }\n    changeLineSpacing(dist){\n      this.params.line_distance.value = Number(dist)\n      if (this.conture.cords.length != 0){\n        this.updateCenterMarker()\n        this.updateMarkup()\n      }\n    }\n    toggleRTL(){\n      if (this.params.is_rtl === true){\n        this.params.is_rtl = false\n      }else{\n        this.params.is_rtl = true \n      }\n      if (this.conture.markers.length != 0){\n        this.updateCenterMarker()\n        this.updateMarkup()\n      }\n    }\n\n    markupPolygon(){\n        let edges = []\n        let cords_markup = this.rotate(this.conture.cords, 1)\n        for(let c = 0; c < this.conture.cords.length-1; c++){\n          edges.push([cords_markup[c], cords_markup[c+1]])\n        }\n        let pr = getProjective(cords_markup)\n        let step = getGeoCordsFromMeters(this.params.line_distance.value, pr.y_pr.min)\n        let steps = Math.trunc(pr.x_pr.pr/step)\n        let cords = []\n        for(let i = 0; i < steps; i++){\n            let x_0 = pr.x_pr.min+step*(i+1)\n            let crossings = []\n            let low = [1000, null];\n            let high = [-1000, null];\n            for(let j = 0; j < edges.length; j++){\n                let A = edges[j][0]\n                let B = edges[j][1]\n                let y = (B[1]-A[1])*(x_0-B[0])/(B[0]-A[0])+B[1]\n                let min_y = Math.min(A[1],B[1])\n                let max_y = Math.max(A[1],B[1])\n                if(y>min_y && y< max_y){\n                  if(y>high[0]){\n                    high[0] = y\n                    high[1] = [x_0, y]\n                  }\n                  else if(y<low[0]){\n                    low[0] = y\n                    low[1] = [x_0, y]\n                  }\n                  crossings.push([x_0, y])\n                }\n            }\n            crossings = crossings.sort(function(a, b){return a[1]-b[1]})\n    \n            low[1] = crossings[0]\n            high[1] = crossings[crossings.length-1]\n    \n            low[1] = addTurnaroundDistance(low[1], this.params.turnaround_distance.value, false)\n            high[1] = addTurnaroundDistance(high[1], this.params.turnaround_distance.value, true)\n            if((cords.length+2)%4 == 0){\n              cords.push(low[1])\n              cords.push(high[1])\n            }\n            else{\n              cords.push(high[1])\n              cords.push(low[1])\n            }\n        }\n        cords = this.rotate(cords, -1)\n        if (cords.length == 0){\n          return this.conture.cords\n        }else{\n          return cords\n        }\n    }\n\n    addConturePoint(coords){\n        let cords = coords;\n        let marker = new mapboxgl.Marker(\n            {\n                draggable: true\n            }\n        ).setLngLat(cords).addTo(this.map);\n        marker.conture_index = this.conture.markers.length;\n        this.conture.markers.push(marker)\n        let dragContainer = (e) => {e.mapElement = this.polygon; e.marker = marker; e.evt = {}; this.drag(e)}\n        let dragEndContainer = (e) => {e.evt = {}; this.dragEndCont(e)}\n        let dragStartContainer = (e) => {e.evt = {}; this.dragStartCont(e)}\n        marker.on(\"drag\", dragContainer)\n        marker.on(\"dragend\", dragEndContainer)\n        marker.on(\"dragstart\", dragStartContainer)\n        this.changeMarkerIcon(marker, point_marker, 35, 35)\n        if(this.conture.markers.length == 1){\n          this.conture.cords.push(cords)\n          this.conture.cords.push(cords)\n          this.conture.source.data.geometry.coordinates = [this.conture.cords]\n          this.map.addSource(\"conture\", this.conture.source)\n          this.map.addLayer(this.conture.layer_area)\n          this.map.addLayer(this.conture.layer_line)\n        }\n        if(this.conture.markers.length > 1){\n            this.conture.cords.pop()\n            this.conture.cords.push(cords)\n            this.conture.cords.push(this.conture.cords[0])\n            this.conture.source.data.geometry.coordinates = [this.conture.cords]\n            this.map.getSource(\"conture\").setData(this.conture.source.data)\n        }\n        if(this.conture.markers.length == 3){\n          this.center_marker = new mapboxgl.Marker({\n            draggable:true\n          })\n          this.changeMarkerIcon(this.center_marker, icon_center, 25, 25)\n          let cords = [0,0]\n          for(let c = 0; c < this.conture.cords.length-1; c++){\n            cords[0] += this.conture.cords[c][0]\n            cords[1] += this.conture.cords[c][1]\n          }\n          cords = [cords[0]/(this.conture.cords.length-1), cords[1]/(this.conture.cords.length-1)]\n          this.center_marker.setLngLat(cords).addTo(this.map);\n    \n          this.container__dragStartCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragStartCenterMarker(e)}\n          this.container__dragCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragCenterMarker(e)}\n          this.container__dragEndStartCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragEndStartCenterMarker(e)}\n      \n          this.center_marker.on(\"dragstart\", this.container__dragStartCenterMarker)\n          this.center_marker.on(\"drag\", this.container__dragCenterMarker)\n          this.center_marker.on(\"dragend\", this.container__dragEndStartCenterMarker)\n          let cords_markup = this.markupPolygon()\n          this.markup.cords = cords_markup\n          // this.markup.source.data.geometry.coordinates = this.markup.cords\n          // this.map.addSource(\"markup\", this.markup.source)\n          // this.start_point = new mapboxgl.Marker({\n          //   draggable:false\n          // })\n          // this.end_point = new mapboxgl.Marker({\n          //   draggable:false\n          // })\n          \n          // this.start_point.setLngLat(this.markup.cords[0]).addTo(this.map)\n          // this.end_point.setLngLat(this.markup.cords[this.markup.cords.length-1]).addTo(this.map)\n          \n          // this.changePointIcon(this.start_point, point_marker, 35, 35)\n          // this.changePointIcon(this.end_point, point_marker, 35, 35)\n        }\n        if (this.conture.markers.length >= 3){\n            let cords_markup = this.markupPolygon()\n            this.markup.cords = cords_markup\n            this.updateRouteLine()\n        }\n    }\n\n    rotate(cords, factor){\n      let centerCords = this.center_marker.getLngLat()\n      centerCords = [centerCords.lng, centerCords.lat]\n      let rotated_cords = rotateFigureCenter(cords, centerCords, factor*this.params.angle.value)\n      return rotated_cords\n    }\n    isValid(){\n      let edges = []\n      let cords_markup = this.rotate(this.conture.cords, 1)\n      for(let c = 0; c < this.conture.cords.length-1; c++){\n        edges.push([cords_markup[c], cords_markup[c+1]])\n      }\n      let pr = getProjective(cords_markup)\n      let step = getGeoCordsFromMeters(this.params.line_distance.value, pr.y_pr.min)\n      let steps = Math.trunc(pr.x_pr.pr/step)\n      if(1 > steps) return false\n      else return true\n    }\n\n    updateMarkup(){\n      this.markup.cords = this.markupPolygon()\n      this.markup.source.data.geometry.coordinates = this.markup.cords\n      this.updateRouteLine()\n    }\n\n    updatePolygonPosition(){\n      this.conture.source.data.geometry.coordinates = [this.conture.cords]\n      this.map.getSource(\"conture\").setData(this.conture.source.data)\n      this.updateMarkup()\n    }\n\n    dragStartCenterMarker(e){\n      // e.evt.route.tbManager.resetCollisionObjects()\n      let center_cords = e.marker.getLngLat()\n      e.marker.diff = []\n      for(let cords of this.conture.cords){\n        e.marker.diff.push(\n          [cords[0]-center_cords.lng, cords[1]-center_cords.lat]\n        )\n      }\n    }\n    dragCenterMarker(e){\n      let center_cords = e.marker.getLngLat()\n      \n      for(let c = 0; c < this.conture.markers.length; c++){\n        let changed_cords = [e.marker.diff[c][0]+center_cords.lng, e.marker.diff[c][1]+center_cords.lat]\n        this.conture.cords[c] = changed_cords\n        if(c == 0){\n          this.conture.cords[this.conture.cords.length-1] = changed_cords\n        }\n        this.conture.markers[c].setLngLat(changed_cords)\n      }\n      this.updatePolygonPosition()\n      this.updateMarkup()\n  \n      // e.evt.route.tbManager.deleteObject(e.mapElement.params.id)\n      // for (let coord of e.mapElement.conture.cords){\n      //   e.evt.route.tbManager.addSphere(\n      //     [coord[0], coord[1],  Number(e.mapElement.params.alt.value)],\n      //     e.mapElement.params.id\n      //   )\n      // }\n      // e.evt.route.tbManager.unitSpheres(e.evt.route)\n    }\n    dragEndStartCenterMarker(e){\n      e.marker.diff = []\n      // e.evt.route.tbManager.checkCollision(e.evt.route)\n    }\n    drag(e){\n      let cords = e.marker.getLngLat()\n      let before_cords = this.conture.cords[e.marker.conture_index]\n      this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat]\n      if(!this.isValid()){\n        this.conture.cords[e.marker.conture_index] = before_cords\n        e.marker.setLngLat(before_cords)\n        return\n      }\n  \n      this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat]\n      if(e.marker.conture_index == 0){\n        this.conture.cords[this.conture.cords.length-1] = [cords.lng, cords.lat]\n      }\n      this.conture.source.data.geometry.coordinates = [this.conture.cords]\n      this.map.getSource(\"conture\").setData(this.conture.source.data)\n      this.updateCenterMarker()\n      this.updateMarkup()\n  \n      // e.evt.route.tbManager.deleteObject(e.mapElement.params.id)\n      // for (let coord of e.mapElement.conture.cords){\n      //   e.evt.route.tbManager.addSphere(\n      //     [coord[0], coord[1],  Number(e.mapElement.params.alt.value)],\n      //     e.mapElement.params.id\n      //   )\n      // }\n      // e.evt.route.tbManager.unitSpheres(e.evt.route)\n    }\n    dragStartCont(e){\n      // e.evt.route.tbManager.resetCollisionObjects()\n    }\n    dragEndCont(e){\n      // e.evt.route.tbManager.checkCollision(e.evt.route)\n    }\n    dragEnd(e){\n      // e.mapElement.setCords(e.mapElement.marker.getLngLat())\n    }\n\n    updateCenterMarker(){\n      let cords = [0,0]\n      for(let c = 0; c < this.conture.cords.length-1; c++){\n        cords[0] += this.conture.cords[c][0]\n        cords[1] += this.conture.cords[c][1]\n      }\n      cords = [cords[0]/(this.conture.cords.length-1), cords[1]/(this.conture.cords.length-1)]\n      this.center_marker.setLngLat(cords)\n    }\n\n    updateRouteLine(){\n        if (this.conture.markers.length === 3){\n          let route = []\n          if (this.params.is_rtl === true){\n            route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords).concat([[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]])\n          }else{\n            route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords)\n          }\n          let source = {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': route\n                }\n            }\n          }\n          try{\n            this.map.addSource('route', source)\n          }catch{\n            this.map.removeSource(\"route\")\n            this.map.addSource('route', source)\n          }\n          let layer = {\n              'id': 'route',\n              'type': 'line',\n              'source': 'route',\n              'layout': {\n                  'line-join': 'round',\n                  'line-cap': 'round'\n              },\n              'paint': {\n                  'line-color': 'yellow',\n                  'line-width': 3\n              }\n          }\n          this.map.addLayer(layer);\n        }else if (this.conture.cords.length > 3){\n          let route = []\n          if (this.params.is_rtl === true){\n            route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords).concat([[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]])\n          }else{\n            route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat]].concat(this.markup.cords)\n          }\n          let new_data = {\n              \"type\": \"FeatureCollection\",\n              \"features\": [\n                  {\n                      \"type\": \"Feature\",\n                      \"geometry\": {\n                          \"type\": \"LineString\",\n                          \"coordinates\": route\n                      }\n                  }\n              ]\n          }\n          this.map.getSource(\"route\").setData(new_data)\n        }\n    }\n\n    setPolygon(coords){\n        if (this.start_marker === null){\n            this.update_modal_message({active: true, heading: \"Ошибка\", message: \"Сначала добавьте точку старта\"})\n        }else{\n            this.addConturePoint(coords)\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}