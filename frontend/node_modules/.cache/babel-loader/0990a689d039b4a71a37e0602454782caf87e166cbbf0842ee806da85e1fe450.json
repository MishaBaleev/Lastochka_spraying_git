{"ast":null,"code":"import { Threebox } from \"threebox-plugin\";\nexport class manager3D {\n  constructor(map) {\n    this.map = map;\n    this.firstMapScale = this.map.transform.scale;\n    this.available_meshes = {\n      drone: {\n        obj: window.location.origin + '/media/drone/drone.glb',\n        type: 'gltf',\n        scale: 0.7,\n        rotation: {\n          x: 90,\n          y: 0,\n          z: 0\n        },\n        anchor: 'center',\n        // fixedZoom: 10,\n        name: 'drone',\n        clone: false\n      },\n      sphere_1: {\n        radius: 0.5,\n        units: \"meters\",\n        color: '#ff9900',\n        adjustment: {\n          x: 0.5,\n          y: 0.5,\n          z: -0.5\n        }\n      },\n      line_1: {\n        width: 5,\n        color: '#daa520'\n      },\n      line_help: {\n        width: 5,\n        color: \"#00ff00\"\n      },\n      tube_1: {\n        width: 20,\n        color: '#800080',\n        opacity: 0.4\n      },\n      line_2: {\n        width: 5,\n        color: '#d10303'\n      },\n      line_3: {\n        width: 2,\n        color: '#bababa'\n      },\n      line_4: {\n        width: 5,\n        color: '#daa520'\n      },\n      tube_2: {\n        width: 20,\n        color: '#800080',\n        opacity: 0.4\n      }\n    };\n    window.tb = new Threebox(this.map, this.map.getCanvas().getContext('webgl'), {\n      // realSunlight: true, \n      defaultLights: true\n    });\n    this.map.addLayer({\n      id: \"3d-threebox-layer\",\n      type: \"custom\",\n      renderingMode: \"3d\",\n      onAdd: (map, mbxContext) => {},\n      render: () => {\n        window.tb.update();\n      }\n    });\n\n    // let modelOptions = {\n    //     obj: window.location.origin+'/media/drone/drone.glb',\n    //     type: 'glb',\n    //     scale: 15,\n    //     rotation: { x: 90, y: 0, z: 0 },\n    //     anchor: 'center',\n    //     fixedZoom: 15,\n    //     name: 'drone',\n    //     clone: false\n    // }\n    // tb.loadObj(modelOptions, (model1) => {\n    //     // this.available_meshes['drone'] = model1\n    //     console.log(model1)\n    // })\n    this.managers = {};\n    this.getMeshOptions = this.getMeshOptions.bind(this);\n    this.getAMS = this.getAMS.bind(this);\n    this.getAMSline = this.getAMSline.bind(this);\n    this.changeScale = this.changeScale.bind(this);\n    this.map.on('zoom', this.changeScale);\n    this.addManager = this.addManager.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n  }\n  getMeshOptions(key) {\n    if (key in this.available_meshes) return this.available_meshes[key];else return null;\n  }\n  getAMS(cords) {\n    // console.log(this.map.queryTerrainElevation(cords))\n    return this.map.queryTerrainElevation(cords);\n  }\n  getAMSline(traectory) {\n    let cords = [...lineChunk({\n      type: 'Feature',\n      geometry: {\n        type: 'LineString',\n        coordinates: traectory.map(c => {\n          return [c[0], c[1]];\n        })\n      },\n      properties: {}\n    }, 0.005).features.map(feature => {\n      return [...feature.geometry.coordinates[0], this.map.queryTerrainElevation(feature.geometry.coordinates[0])];\n    })];\n    return cords;\n  }\n\n  // initThreebox(){\n  //     this.tb = new Threebox(this.map,\n  //         this.map.getCanvas().getContext('webgl'),\n  //         { }    \n  //     );\n  //     window.tb = this.tb;\n  //     self = this\n  //     this.map.addLayer({\n  //         id:\"3d-threebox-layer\",\n  //         type:\"custom\",\n  //         renderingMode:\"3d\",\n  //         onAdd: (map, mbxContext) => {\n  //             let modelOptions = {\n  //                 obj: 'media/drone/drone.glb',\n  //                 type: 'glb',\n  //                 scale: 15,\n  //                 rotation: { x: 90, y: 0, z: 0 },\n  //                 anchor: 'center',\n  //                 fixedZoom: 15,\n  //                 name: 'drone',\n  //                 clone: false\n  //             }\n  //             tb.loadObj(modelOptions, (model1) => {\n  //                 this.available_meshes['drone'] = model1\n  //                 console.log(11111111)\n  //             })\n  //         },\n  //         render: () => {\n  //             tb.update();\n  //         }\n  //     })\n  // }\n  addMesh(key, cords) {\n    let model = this.available_meshes[key].setCoords(cords);\n    tb.add(model);\n  }\n  addManager(manager, key) {\n    this.managers[key] = manager;\n  }\n  changeMode(mode) {\n    console.log(this.managers);\n    for (let key in this.managers) {\n      let manager = this.managers[key];\n      manager.changeMode(mode);\n      manager.changeScale(this.map.getZoom(), this.firstMapScale, this.map.transform.scale);\n    }\n    this.map.setZoom(this.map.getZoom());\n  }\n  changeScale() {\n    // let manager = this.managers[\"monitoring\"]\n    // manager.changeScale(this.map.getZoom(), this.firstMapScale, this.map.transform.scale)\n\n    for (let key in this.managers) {\n      let manager = this.managers[key];\n      manager.changeScale(this.map.getZoom(), this.firstMapScale, this.map.transform.scale);\n    }\n  }\n}","map":{"version":3,"names":["Threebox","manager3D","constructor","map","firstMapScale","transform","scale","available_meshes","drone","obj","window","location","origin","type","rotation","x","y","z","anchor","name","clone","sphere_1","radius","units","color","adjustment","line_1","width","line_help","tube_1","opacity","line_2","line_3","line_4","tube_2","tb","getCanvas","getContext","defaultLights","addLayer","id","renderingMode","onAdd","mbxContext","render","update","managers","getMeshOptions","bind","getAMS","getAMSline","changeScale","on","addManager","changeMode","key","cords","queryTerrainElevation","traectory","lineChunk","geometry","coordinates","c","properties","features","feature","addMesh","model","setCoords","add","manager","mode","console","log","getZoom","setZoom"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/src/manager3D.js"],"sourcesContent":["import { Threebox } from \"threebox-plugin\";\nexport class manager3D{\n    constructor(map){\n        this.map = map\n        this.firstMapScale = this.map.transform.scale\n        this.available_meshes = {\n            drone:{\n                obj: window.location.origin+'/media/drone/drone.glb',\n                type: 'gltf',\n                scale: 0.7,\n                rotation: { x: 90, y: 0, z: 0 },\n                anchor: 'center',\n                // fixedZoom: 10,\n                name: 'drone',\n                clone: false\n            },\n            sphere_1:{\n                radius: 0.5,\n                units:\"meters\",\n                color: '#ff9900',\n                adjustment: {x: 0.5, y: 0.5, z: -0.5}\n            },\n            line_1:{\n                width: 5,\n                color: '#daa520'\n            },\n            line_help:{\n                width: 5,\n                color: \"#00ff00\"\n            },\n            tube_1:{\n                width: 20,\n                color: '#800080',\n                opacity: 0.4\n            },\n            line_2:{\n                width: 5,\n                color: '#d10303',\n            },\n            line_3:{\n                width: 2,\n                color: '#bababa',\n            },\n            line_4:{\n                width: 5,\n                color: '#daa520'\n            },\n            tube_2:{\n                width: 20,\n                color: '#800080',\n                opacity: 0.4\n            }\n        }\n\n        window.tb = new Threebox(this.map,\n            this.map.getCanvas().getContext('webgl'),\n            {\n                // realSunlight: true, \n                defaultLights: true\n            }    \n        );\n\n        this.map.addLayer({\n            id:\"3d-threebox-layer\",\n            type:\"custom\",\n            renderingMode:\"3d\",\n            onAdd: (map, mbxContext) => {\n\n            },\n            render: () => {\n                window.tb.update();\n            }\n        })\n\n        // let modelOptions = {\n        //     obj: window.location.origin+'/media/drone/drone.glb',\n        //     type: 'glb',\n        //     scale: 15,\n        //     rotation: { x: 90, y: 0, z: 0 },\n        //     anchor: 'center',\n        //     fixedZoom: 15,\n        //     name: 'drone',\n        //     clone: false\n        // }\n        // tb.loadObj(modelOptions, (model1) => {\n        //     // this.available_meshes['drone'] = model1\n        //     console.log(model1)\n        // })\n        this.managers = {}\n        \n        this.getMeshOptions = this.getMeshOptions.bind(this);\n        this.getAMS = this.getAMS.bind(this);\n        this.getAMSline = this.getAMSline.bind(this);\n        this.changeScale = this.changeScale.bind(this);\n\n        this.map.on('zoom', this.changeScale);\n        this.addManager = this.addManager.bind(this);\n        this.changeMode = this.changeMode.bind(this);\n    }\n    getMeshOptions(key){\n        if(key in this.available_meshes) return this.available_meshes[key]\n        else return null\n    }\n    getAMS(cords){\n        // console.log(this.map.queryTerrainElevation(cords))\n        return this.map.queryTerrainElevation(cords)\n    }\n    getAMSline(traectory){\n        let cords = [...lineChunk({\n                type: 'Feature',\n                geometry: {\n                    type: 'LineString',\n                    coordinates: traectory.map((c) => {\n                        return [c[0], c[1]]\n                    })\n                },\n                properties: {}\n            }, 0.005).features.map((feature) => {\n            return [\n                ...feature.geometry.coordinates[0],\n                this.map.queryTerrainElevation(feature.geometry.coordinates[0])\n            ]\n            })]\n\n        return cords\n    }\n\n    // initThreebox(){\n    //     this.tb = new Threebox(this.map,\n    //         this.map.getCanvas().getContext('webgl'),\n    //         { }    \n    //     );\n    //     window.tb = this.tb;\n    //     self = this\n    //     this.map.addLayer({\n    //         id:\"3d-threebox-layer\",\n    //         type:\"custom\",\n    //         renderingMode:\"3d\",\n    //         onAdd: (map, mbxContext) => {\n    //             let modelOptions = {\n    //                 obj: 'media/drone/drone.glb',\n    //                 type: 'glb',\n    //                 scale: 15,\n    //                 rotation: { x: 90, y: 0, z: 0 },\n    //                 anchor: 'center',\n    //                 fixedZoom: 15,\n    //                 name: 'drone',\n    //                 clone: false\n    //             }\n    //             tb.loadObj(modelOptions, (model1) => {\n    //                 this.available_meshes['drone'] = model1\n    //                 console.log(11111111)\n    //             })\n    //         },\n    //         render: () => {\n    //             tb.update();\n    //         }\n    //     })\n    // }\n    addMesh(key, cords){\n        let model = this.available_meshes[key].setCoords(cords);\n        tb.add(model);\n    }\n    addManager(manager, key){\n        this.managers[key] = manager\n    }\n    changeMode(mode){\n        console.log(this.managers)\n        for(let key in this.managers){\n            let manager = this.managers[key]\n            manager.changeMode(mode)\n            manager.changeScale(this.map.getZoom(), this.firstMapScale, this.map.transform.scale)\n        }\n        this.map.setZoom(this.map.getZoom())\n    }\n    changeScale(){\n        // let manager = this.managers[\"monitoring\"]\n        // manager.changeScale(this.map.getZoom(), this.firstMapScale, this.map.transform.scale)\n    \n        for(let key in this.managers){\n            let manager = this.managers[key]\n            manager.changeScale(this.map.getZoom(), this.firstMapScale, this.map.transform.scale)\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}