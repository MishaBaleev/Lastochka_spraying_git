{"ast":null,"code":"// Type validator\n\nfunction Validate() {}\n;\nValidate.prototype = {\n  Coords: function (input) {\n    if (input.constructor !== Array) {\n      console.error(\"Coords must be an array\");\n      return;\n    }\n    if (input.length < 2) {\n      console.error(\"Coords length must be at least 2\");\n      return;\n    }\n    for (const member of input) {\n      if (member.constructor !== Number) {\n        console.error(\"Coords values must be numbers\");\n        return;\n      }\n    }\n    if (Math.abs(input[1]) > 90) {\n      console.error(\"Latitude must be between -90 and 90\");\n      return;\n    }\n    return input;\n  },\n  Line: function (input) {\n    var scope = this;\n    if (input.constructor !== Array) {\n      console.error(\"Line must be an array\");\n      return;\n    }\n    for (const coord of input) {\n      if (!scope.Coords(coord)) {\n        console.error(\"Each coordinate in a line must be a valid Coords type\");\n        return;\n      }\n    }\n    return input;\n  },\n  Rotation: function (input) {\n    if (input.constructor === Number) input = {\n      z: input\n    };else if (input.constructor === Object) {\n      for (const key of Object.keys(input)) {\n        if (!['x', 'y', 'z'].includes(key)) {\n          console.error('Rotation parameters must be x, y, or z');\n          return;\n        }\n        if (input[key].constructor !== Number) {\n          console.error('Individual rotation values must be numbers');\n          return;\n        }\n      }\n    } else {\n      console.error('Rotation must be an object or a number');\n      return;\n    }\n    return input;\n  },\n  Scale: function (input) {\n    if (input.constructor === Number) {\n      input = {\n        x: input,\n        y: input,\n        z: input\n      };\n    } else if (input.constructor === Object) {\n      for (const key of Object.keys(input)) {\n        if (!['x', 'y', 'z'].includes(key)) {\n          console.error('Scale parameters must be x, y, or z');\n          return;\n        }\n        if (input[key].constructor !== Number) {\n          console.error('Individual scale values must be numbers');\n          return;\n        }\n      }\n    } else {\n      console.error('Scale must be an object or a number');\n      return;\n    }\n    return input;\n  }\n};\nmodule.exports = exports = Validate;","map":{"version":3,"names":["Validate","prototype","Coords","input","constructor","Array","console","error","length","member","Number","Math","abs","Line","scope","coord","Rotation","z","Object","key","keys","includes","Scale","x","y","module","exports"],"sources":["/Users/mihailbaleev/Documents/GitHub/Lastochka_spraying/frontend/node_modules/threebox-plugin/src/utils/validate.js"],"sourcesContent":["// Type validator\r\n\r\nfunction Validate(){\r\n\r\n};\r\n\r\nValidate.prototype = {\r\n\r\n    Coords: function(input) {\r\n\r\n        if (input.constructor !== Array) {\r\n            console.error(\"Coords must be an array\")\r\n            return\r\n        }\r\n\r\n        if (input.length < 2) {\r\n            console.error(\"Coords length must be at least 2\")\r\n            return\r\n        }\r\n    \r\n        for (const member of input) {\r\n            if (member.constructor !== Number) {\r\n                console.error(\"Coords values must be numbers\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (Math.abs(input[1]) > 90) {\r\n            console.error(\"Latitude must be between -90 and 90\")\r\n            return                    \r\n        }\r\n\r\n        return input\r\n    },\r\n\r\n    Line: function(input) {\r\n\r\n        var scope = this;\r\n\r\n        if (input.constructor !== Array) {\r\n            console.error(\"Line must be an array\")\r\n            return\r\n        }\r\n\r\n        for (const coord of input){\r\n            if (!scope.Coords(coord)) {\r\n                console.error(\"Each coordinate in a line must be a valid Coords type\")\r\n                return                    \r\n            }\r\n\r\n        }\r\n\r\n        return input\r\n    },\r\n\r\n    Rotation: function(input) {\r\n\r\n        if (input.constructor === Number) input = {z: input}\r\n\r\n        else if (input.constructor === Object) {\r\n\r\n            for (const key of Object.keys(input)){\r\n\r\n                if (!['x', 'y', 'z'].includes(key)) {\r\n                    console.error('Rotation parameters must be x, y, or z')\r\n                    return                            \r\n                }\r\n                if (input[key].constructor !== Number) {\r\n                    console.error('Individual rotation values must be numbers')\r\n                    return\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            console.error('Rotation must be an object or a number')\r\n            return\r\n        }\r\n\r\n        return input\r\n    },\r\n\r\n    Scale: function(input) {\r\n\r\n        if (input.constructor === Number) {\r\n            input = {x:input, y:input, z: input}\r\n        }\r\n        \r\n        else if (input.constructor === Object) {\r\n\r\n            for (const key of Object.keys(input)){\r\n\r\n                if (!['x', 'y', 'z'].includes(key)) {\r\n                    console.error('Scale parameters must be x, y, or z')\r\n                    return                            \r\n                }\r\n                if (input[key].constructor !== Number) {\r\n                    console.error('Individual scale values must be numbers')\r\n                    return\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            console.error('Scale must be an object or a number')\r\n            return\r\n        }\r\n\r\n        return input\r\n    }\r\n\r\n}\r\n\r\n\r\nmodule.exports = exports = Validate;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}