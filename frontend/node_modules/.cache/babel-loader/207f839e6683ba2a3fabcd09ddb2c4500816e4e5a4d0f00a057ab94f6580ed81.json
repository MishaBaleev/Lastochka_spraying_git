{"ast":null,"code":"// import waypointIcon from '../RouteConstructor/BRM/Waypoint/icon_map_waypoint.png';\n\nimport { lineChunk, lineString, lineIntersect, lineSlice, length, point, polygon } from '@turf/turf';\nfunction getIntersectAlt(l1, l2, l3) {\n  if (l1[0] != l2[0]) {\n    let line1 = lineString([[l1[0], l1[2]], [l2[0], l2[2]]]);\n    let line2 = lineString([[l3[0], 0], [l3[0], Math.max(l1[2], l2[2])]]);\n    let intersects = lineIntersect(line1, line2);\n    return intersects.features[0].geometry.coordinates[1];\n  } else if (l1[1] != l2[1]) {\n    let line1 = lineString([[l1[1], l1[2]], [l2[1], l2[2]]]);\n    let line2 = lineString([[l3[1], 0], [l3[1], Math.max(l1[2], l2[2])]]);\n    let intersects = lineIntersect(line1, line2);\n    return intersects.features[0].geometry.coordinates[1];\n  }\n}\nfunction calcDistance(point1, point2) {\n  var line = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [point1, point2]\n      }\n    }]\n  };\n  var start = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": point1\n    }\n  };\n  var stop = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": point2\n    }\n  };\n  return length(lineSlice(start, stop, line.features[0]), {\n    units: 'meters'\n  });\n}\nfunction segmentateLine(point1, point2, segmentProcent, manager3D, flag = false) {\n  let pwa1 = [point1[0], point1[1]];\n  let pwa2 = [point2[0], point2[1]];\n  let distance = calcDistance(pwa1, pwa2);\n  let interval = 0;\n  if (flag) {\n    interval = 1 / 1000;\n  } else {\n    interval = distance / 1000 * (segmentProcent / 100);\n  }\n  let cords = [];\n  let cords_AMS = [];\n  cords.push(point2);\n  cords_AMS.push([point2[0], point2[1], point2[2] + manager3D.getAMS({\n    lng: point2[0],\n    lat: point2[1]\n  })]);\n  return {\n    cords: cords,\n    cords_AMS: cords_AMS\n  };\n}\nexport class SprayManager3d {\n  constructor(manager3d) {\n    this.manager3d = manager3d;\n    this.objects = [];\n    this.sphereArr = [];\n    this.routeLine = null;\n    this.changeMode = this.changeMode.bind(this);\n    this.last_id = 0;\n  }\n  addSphere(coords, id) {\n    let sphereOptions = this.manager3d.getMeshOptions(\"sphere_1\");\n    let pointSphere = window.tb.sphere(sphereOptions);\n    let alt_ams = this.manager3d.getAMS({\n      lng: coords[0],\n      lat: coords[1]\n    });\n    if (alt_ams === null) {\n      alt_ams = 0;\n    }\n    console.log(alt_ams);\n    pointSphere.setCoords([coords[0], coords[1], coords[2] + alt_ams]);\n    let sphereObject = {\n      object: pointSphere,\n      id: id,\n      baseCoords: coords\n    };\n    window.tb.add(pointSphere);\n    this.objects.push(pointSphere);\n    this.sphereArr.push(sphereObject);\n    this.manager3d.map.setZoom(this.manager3d.map.getZoom());\n  }\n  getCoordArr(route) {\n    let currentNode = route.head;\n    let coordArr = [];\n    while (currentNode != route.tail) {\n      currentNode = currentNode.next;\n      if (currentNode == route.head.next) {\n        coordArr.push([currentNode.params.lng.value, currentNode.params.lat.value, 0]);\n      }\n      if (currentNode.params.module.name == \"Polygon\") {\n        for (let coord of currentNode.params.markup.value) {\n          coordArr.push([coord[0], coord[1], Number(currentNode.params.alt.value)]);\n        }\n      } else if (currentNode.params.module.name == \"RTL\") {\n        coordArr.push(coordArr[1]);\n        coordArr.push(coordArr[0]);\n      } else {\n        coordArr.push([currentNode.params.lng.value, currentNode.params.lat.value, Number(currentNode.params.alt.value)]);\n      }\n      if (currentNode.params.module.name == \"Land\") {\n        coordArr.push([currentNode.params.lng.value, currentNode.params.lat.value, 0]);\n      }\n    }\n    this.route = route;\n    return coordArr;\n  }\n  updateLineGeometry(coord_arr) {\n    if (this.routeLine) {\n      let cords_AMS = [];\n      for (let item in coord_arr) {\n        if (item < coord_arr.length - 1) {\n          if (coord_arr[item][2] == 0) {\n            cords_AMS.push([coord_arr[item][0], coord_arr[item][1], this.manager3d.getAMS({\n              lng: coord_arr[item][0],\n              lat: coord_arr[item][1]\n            })]);\n          } else if (coord_arr[Number(item) + 1][2] == 0) {\n            cords_AMS.push([coord_arr[Number(item) + 1][0], coord_arr[Number(item) + 1][1], this.manager3d.getAMS({\n              lng: coord_arr[Number(item) + 1][0],\n              lat: coord_arr[Number(item) + 1][1]\n            })]);\n          } else if (coord_arr[item][2] != 0 && coord_arr[Number(item) + 1][2] != 0) {\n            let segmCoords = segmentateLine(coord_arr[item], coord_arr[Number(item) + 1], 10, this.manager3d);\n            cords_AMS = cords_AMS.concat(segmCoords.cords_AMS);\n          }\n        }\n      }\n      this.routeLine.setGeometry_(cords_AMS, this.routeLine);\n    }\n  }\n  unitSpheres(coord_arr) {\n    if (this.routeLine) {\n      window.tb.remove(this.routeLine);\n      for (let i in this.objects) {\n        if (this.objects[i] == this.routeLine) {\n          this.objects.splice(i, 1);\n        }\n      }\n    }\n    if (coord_arr.length > 1) {\n      let cords_AMS = [];\n      for (let index in coord_arr) {\n        if (index < coord_arr.length - 1) {\n          if (coord_arr[index][2] == 0) {\n            console.log(1);\n            cords_AMS.push([coord_arr[index][0], coord_arr[index][1], this.manager3d.getAMS({\n              lng: coord_arr[index][0],\n              lat: coord_arr[index][1]\n            })]);\n          } else if (coord_arr[Number(index) + 1][2] == 0) {\n            console.log(2);\n            cords_AMS.push([coord_arr[Number(index) + 1][0], coord_arr[Number(index) + 1][1], this.manager3d.getAMS({\n              lng: coord_arr[Number(index) + 1][0],\n              lat: coord_arr[Number(index) + 1][1]\n            })]);\n          } else if (coord_arr[index][2] != 0 && coord_arr[Number(index) + 1][2] != 0) {\n            console.log(coord_arr[index][2], coord_arr[Number(index) + 1][2]);\n            let segmCoords = segmentateLine(coord_arr[index], coord_arr[Number(index) + 1], 10, this.manager3d);\n            cords_AMS = cords_AMS.concat(segmCoords.cords_AMS);\n          }\n        }\n      }\n      console.log(coord_arr);\n      console.log(cords_AMS);\n      let routeLineOptions = this.manager3d.getMeshOptions(\"line_1\");\n      routeLineOptions.geometry = cords_AMS;\n      this.routeLine = window.tb.line(routeLineOptions);\n      window.tb.add(this.routeLine, \"custom-layer\");\n      this.objects.push(this.routeLine);\n    }\n  }\n  changeAlt(value, id, route) {\n    let sphereCoords = [];\n    for (let sphere of this.sphereArr) {\n      if (sphere.id == id) {\n        sphere.object.setCoords([sphere.object.coordinates[0], sphere.object.coordinates[1], Number(value) + this.manager3d.getAMS({\n          lng: sphere.object.coordinates[0],\n          lat: sphere.object.coordinates[1]\n        })]);\n        sphereCoords.push([sphere.object.coordinates[0], sphere.object.coordinates[1]]);\n        sphere.baseCoords[2] = Number(value);\n      }\n    }\n    this.updateLineGeometry(route);\n  }\n  changeCoords(coords, id) {\n    for (let sphere of this.sphereArr) {\n      if (sphere.id == id) {\n        sphere.object.setCoords([coords[0], coords[1], sphere.baseCoords[2] + this.manager3d.getAMS({\n          lng: coords[0],\n          lat: coords[1]\n        })]);\n        sphere.baseCoords = [coords[0], coords[1], sphere.baseCoords[2]];\n      }\n    }\n  }\n  clearTb(deleteAll = false) {\n    for (let object of this.objects) {\n      window.tb.remove(object);\n    }\n    ;\n    this.idSphereArr = [];\n    this.routeLine = null;\n    this.sphereArr = [];\n    this.objects = [];\n    if (deleteAll) {\n      this.map.removeLayer('custom_layer');\n    }\n  }\n  deleteObject(id) {\n    for (let element of this.sphereArr) {\n      if (element.id == id) {\n        window.tb.remove(element.object);\n      }\n    }\n  }\n  changeMode() {\n    for (let id in this.sphereArr) {\n      let z = [this.sphereArr[id].baseCoords[0], this.sphereArr[id].baseCoords[1], this.sphereArr[id].baseCoords[2] + this.manager3d.getAMS({\n        lng: this.sphereArr[id].baseCoords[0],\n        lat: this.sphereArr[id].baseCoords[1]\n      })];\n      this.sphereArr[id].object.setCoords(z);\n    }\n    if (this.route) {\n      this.unitSpheres(this.route);\n    }\n  }\n  changeScale() {}\n}","map":{"version":3,"names":["lineChunk","lineString","lineIntersect","lineSlice","length","point","polygon","getIntersectAlt","l1","l2","l3","line1","line2","Math","max","intersects","features","geometry","coordinates","calcDistance","point1","point2","line","start","stop","units","segmentateLine","segmentProcent","manager3D","flag","pwa1","pwa2","distance","interval","cords","cords_AMS","push","getAMS","lng","lat","SprayManager3d","constructor","manager3d","objects","sphereArr","routeLine","changeMode","bind","last_id","addSphere","coords","id","sphereOptions","getMeshOptions","pointSphere","window","tb","sphere","alt_ams","console","log","setCoords","sphereObject","object","baseCoords","add","map","setZoom","getZoom","getCoordArr","route","currentNode","head","coordArr","tail","next","params","value","module","name","coord","markup","Number","alt","updateLineGeometry","coord_arr","item","segmCoords","concat","setGeometry_","unitSpheres","remove","i","splice","index","routeLineOptions","changeAlt","sphereCoords","changeCoords","clearTb","deleteAll","idSphereArr","removeLayer","deleteObject","element","z","changeScale"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/src/Spraying/manager3D.js"],"sourcesContent":["// import waypointIcon from '../RouteConstructor/BRM/Waypoint/icon_map_waypoint.png';\n\nimport { lineChunk, lineString, lineIntersect, lineSlice, length, point, polygon } from '@turf/turf'\nfunction getIntersectAlt(l1, l2, l3) {\n    if(l1[0] != l2[0]){\n        let line1 = lineString([\n            [l1[0], l1[2]],\n            [l2[0], l2[2]]\n        ])\n        let line2 = lineString([\n            [l3[0], 0],\n            [l3[0], Math.max(l1[2], l2[2])]\n        ])\n        let intersects = lineIntersect(line1, line2)\n        return intersects.features[0].geometry.coordinates[1]\n    }\n    else if(l1[1] != l2[1]){\n        let line1 = lineString([\n            [l1[1], l1[2]],\n            [l2[1], l2[2]]\n        ])\n        let line2 = lineString([\n            [l3[1], 0],\n            [l3[1], Math.max(l1[2], l2[2])]\n        ])\n        let intersects = lineIntersect(line1, line2)\n        return intersects.features[0].geometry.coordinates[1]\n    }\n}\n\nfunction calcDistance(point1, point2) {\n    var line = {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": [\n                point1, \n                point2\n              ]\n            }\n          }\n        ]\n      };\n      \n      var start = {\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": point1\n        }\n      };\n      var stop = {\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": point2\n        }\n      };\n      return length(lineSlice(start, stop, line.features[0]), {units: 'meters'})\n}\nfunction segmentateLine(point1, point2, segmentProcent, manager3D, flag=false) {\n    let pwa1 = [\n        point1[0],\n        point1[1]\n    ]\n    let pwa2 = [\n        point2[0],\n        point2[1]\n    ]\n\n    let distance = calcDistance(\n        pwa1, \n        pwa2\n        )\n    let interval = 0;\n    if(flag){\n        interval = 1/1000\n    }\n    else{\n        interval = distance/1000*(segmentProcent/100)\n    }\n    let cords = []\n    let cords_AMS = []\n\n    cords.push(point2)\n    cords_AMS.push([\n        point2[0],\n        point2[1],\n        point2[2]+manager3D.getAMS({\n            lng:point2[0],\n            lat:point2[1]\n        })\n    ])\n\n    return {\n        cords:cords,\n        cords_AMS:cords_AMS\n    }\n}\n\nexport class SprayManager3d{\n    constructor(manager3d){\n        this.manager3d = manager3d;\n        this.objects = [];\n        this.sphereArr = [];\n        this.routeLine = null;\n        this.changeMode = this.changeMode.bind(this);\n        this.last_id = 0\n    }\n\n    addSphere(coords, id){\n        let sphereOptions = this.manager3d.getMeshOptions(\"sphere_1\")\n        let pointSphere = window.tb.sphere(sphereOptions)\n        let alt_ams = this.manager3d.getAMS({\n            lng:coords[0],\n            lat:coords[1]\n        })\n        if (alt_ams===null){alt_ams=0}\n        console.log(alt_ams)\n        pointSphere.setCoords([\n            coords[0],\n            coords[1], \n            coords[2]+alt_ams\n        ])\n\n        let sphereObject = {\n            object: pointSphere,\n            id: id,\n            baseCoords: coords\n        }\n        \n        window.tb.add(pointSphere)\n        this.objects.push(pointSphere)\n        this.sphereArr.push(sphereObject)\n\n        this.manager3d.map.setZoom(this.manager3d.map.getZoom())\n    }\n\n    getCoordArr(route){\n        let currentNode = route.head\n        let coordArr = [] \n        while (currentNode != route.tail){\n            currentNode = currentNode.next \n            if(currentNode == route.head.next){\n                coordArr.push([\n                    currentNode.params.lng.value,\n                    currentNode.params.lat.value,\n                    0\n                ])\n            }\n\n            if (currentNode.params.module.name == \"Polygon\"){\n                for (let coord of currentNode.params.markup.value){\n                    coordArr.push([\n                        coord[0], \n                        coord[1], \n                        Number(currentNode.params.alt.value)\n                    ])\n                }\n            }else if (currentNode.params.module.name == \"RTL\"){\n             coordArr.push(coordArr[1])\n             coordArr.push(coordArr[0])\n            }else{\n                coordArr.push([\n                    currentNode.params.lng.value,\n                    currentNode.params.lat.value,\n                    Number(currentNode.params.alt.value)\n                ])\n            }\n            if(currentNode.params.module.name == \"Land\"){\n                coordArr.push([\n                    currentNode.params.lng.value,\n                    currentNode.params.lat.value,\n                    0\n                ])\n            }\n        }\n        this.route = route\n        return coordArr\n    }\n\n    updateLineGeometry(coord_arr){\n        if (this.routeLine){\n            let cords_AMS = []\n            for (let item in coord_arr){\n                if (item < coord_arr.length-1){\n                    if(coord_arr[item][2] == 0){\n                        cords_AMS.push([\n                            coord_arr[item][0],\n                            coord_arr[item][1],\n                            this.manager3d.getAMS({\n                                lng:coord_arr[item][0],\n                                lat:coord_arr[item][1]\n                            })\n                        ])\n                    }\n                    else if(coord_arr[Number(item)+1][2] == 0){\n                        cords_AMS.push([\n                            coord_arr[Number(item)+1][0],\n                            coord_arr[Number(item)+1][1],\n                            this.manager3d.getAMS({\n                                lng:coord_arr[Number(item)+1][0],\n                                lat:coord_arr[Number(item)+1][1]\n                            })\n                        ])\n                    }\n                    else if(coord_arr[item][2] != 0 && coord_arr[Number(item)+1][2] != 0){\n                        let segmCoords = segmentateLine(coord_arr[item], coord_arr[Number(item)+1], 10, this.manager3d)\n                        cords_AMS = cords_AMS.concat(segmCoords.cords_AMS)\n                    }\n                }\n            }\n            this.routeLine.setGeometry_(cords_AMS, this.routeLine)\n        }\n    }\n\n    unitSpheres(coord_arr){\n        if (this.routeLine){\n            window.tb.remove(this.routeLine)\n            for (let i in this.objects){\n                if (this.objects[i] == this.routeLine){\n                    this.objects.splice(i, 1)\n                }\n            }\n        }\n        if (coord_arr.length > 1){\n            let cords_AMS = []\n            for (let index in coord_arr){\n                if (index < coord_arr.length-1){\n                    if(coord_arr[index][2] == 0){\n                        console.log(1)\n                        cords_AMS.push([\n                            coord_arr[index][0],\n                            coord_arr[index][1],\n                            this.manager3d.getAMS({\n                                lng:coord_arr[index][0],\n                                lat:coord_arr[index][1]\n                            })\n                        ])\n                    }\n                    else if(coord_arr[Number(index)+1][2] == 0){\n                        console.log(2)\n                        cords_AMS.push([\n                            coord_arr[Number(index)+1][0],\n                            coord_arr[Number(index)+1][1],\n                            this.manager3d.getAMS({\n                                lng:coord_arr[Number(index)+1][0],\n                                lat:coord_arr[Number(index)+1][1]\n                            })\n                        ])\n                    }\n                    else if(coord_arr[index][2] != 0 && coord_arr[Number(index)+1][2] != 0){\n                        console.log(coord_arr[index][2], coord_arr[Number(index)+1][2])\n                        let segmCoords = segmentateLine(coord_arr[index], coord_arr[Number(index)+1], 10, this.manager3d)\n                        cords_AMS = cords_AMS.concat(segmCoords.cords_AMS)\n                    }\n                }\n            }\n            console.log(coord_arr)\n            console.log(cords_AMS)\n            let routeLineOptions = this.manager3d.getMeshOptions(\"line_1\")\n            routeLineOptions.geometry = cords_AMS\n            this.routeLine = window.tb.line(routeLineOptions)\n            window.tb.add(this.routeLine, \"custom-layer\")\n            this.objects.push(this.routeLine)\n        }\n    }\n\n    changeAlt(value, id, route){\n        let sphereCoords = []\n        for (let sphere of this.sphereArr){\n            if (sphere.id == id){\n                sphere.object.setCoords([\n                    sphere.object.coordinates[0], \n                    sphere.object.coordinates[1], \n                    Number(value)+this.manager3d.getAMS({\n                        lng: sphere.object.coordinates[0],\n                        lat: sphere.object.coordinates[1]\n                    })])\n                sphereCoords.push([sphere.object.coordinates[0], sphere.object.coordinates[1]])\n                sphere.baseCoords[2] = Number(value)\n            }\n        }\n        this.updateLineGeometry(route)\n    }\n    changeCoords(coords, id){\n        for (let sphere of this.sphereArr){\n            if (sphere.id == id){\n                sphere.object.setCoords([\n                    coords[0], \n                    coords[1], \n                    sphere.baseCoords[2]+this.manager3d.getAMS({\n                        lng:coords[0],\n                        lat:coords[1]\n                    })\n                ])\n                sphere.baseCoords = [coords[0], coords[1], sphere.baseCoords[2]]\n            }\n        }\n    }\n    clearTb(deleteAll = false){\n        for (let object of this.objects){\n            window.tb.remove(object)\n        };\n        this.idSphereArr = []\n        this.routeLine = null;\n        this.sphereArr = []\n        this.objects = []\n        if (deleteAll){\n            this.map.removeLayer('custom_layer')\n        }\n    }\n    deleteObject(id){\n        for (let element of this.sphereArr){\n            if (element.id == id){\n                window.tb.remove(element.object)\n            }\n        }\n    }\n    changeMode(){\n        for (let id in this.sphereArr){\n            let z = [\n                this.sphereArr[id].baseCoords[0],\n                this.sphereArr[id].baseCoords[1],\n                this.sphereArr[id].baseCoords[2]+this.manager3d.getAMS({\n                    lng:this.sphereArr[id].baseCoords[0],\n                    lat:this.sphereArr[id].baseCoords[1]\n                })\n            ]\n            this.sphereArr[id].object.setCoords(z)\n        }\n        if (this.route){\n            this.unitSpheres(this.route)\n        }\n    }\n    changeScale(){\n        \n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}