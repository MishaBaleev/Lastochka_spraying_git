{"ast":null,"code":"// import waypointIcon from '../RouteConstructor/BRM/Waypoint/icon_map_waypoint.png';\n\nimport { lineChunk, lineString, lineIntersect, lineSlice, length, point, polygon } from '@turf/turf';\nfunction getIntersectAlt(l1, l2, l3) {\n  if (l1[0] != l2[0]) {\n    let line1 = lineString([[l1[0], l1[2]], [l2[0], l2[2]]]);\n    let line2 = lineString([[l3[0], 0], [l3[0], Math.max(l1[2], l2[2])]]);\n    let intersects = lineIntersect(line1, line2);\n    return intersects.features[0].geometry.coordinates[1];\n  } else if (l1[1] != l2[1]) {\n    let line1 = lineString([[l1[1], l1[2]], [l2[1], l2[2]]]);\n    let line2 = lineString([[l3[1], 0], [l3[1], Math.max(l1[2], l2[2])]]);\n    let intersects = lineIntersect(line1, line2);\n    return intersects.features[0].geometry.coordinates[1];\n  }\n}\nfunction calcDistance(point1, point2) {\n  var line = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [point1, point2]\n      }\n    }]\n  };\n  var start = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": point1\n    }\n  };\n  var stop = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": point2\n    }\n  };\n  return length(lineSlice(start, stop, line.features[0]), {\n    units: 'meters'\n  });\n}\nfunction segmentateLine(point1, point2, segmentProcent, manager3D, flag = false) {\n  let pwa1 = [point1[0], point1[1]];\n  let pwa2 = [point2[0], point2[1]];\n  let distance = calcDistance(pwa1, pwa2);\n  let interval = 0;\n  if (flag) {\n    interval = 1 / 1000;\n  } else {\n    interval = distance / 1000 * (segmentProcent / 100);\n  }\n  let cords = [];\n  let cords_AMS = [];\n  let z = [...lineChunk({\n    type: 'Feature',\n    geometry: {\n      type: 'LineString',\n      coordinates: [pwa1, pwa2]\n    },\n    properties: {}\n  }, distance / 1000 * (segmentProcent / 100)).features.map(feature => {\n    let alt;\n    //console.log(pwa1, pwa2, feature.geometry.coordinates[0])\n    if (pwa1[0] == feature.geometry.coordinates[0][0] && pwa1[1] == feature.geometry.coordinates[0][1]) {\n      alt = point1[2];\n    } else if (pwa2[0] == feature.geometry.coordinates[0][0] && pwa2[1] == feature.geometry.coordinates[0][1]) {\n      alt = point2[2];\n    } else if (point1[2] == point2[2]) {\n      alt = point1[2];\n    } else {\n      alt = getIntersectAlt(point1, point2, feature.geometry.coordinates[0]);\n    }\n    cords.push([...feature.geometry.coordinates[0], alt]);\n    cords_AMS.push([...feature.geometry.coordinates[0], alt + manager3D.getAMS({\n      lng: feature.geometry.coordinates[0][0],\n      lat: feature.geometry.coordinates[0][1]\n    })]);\n    return;\n  })];\n  cords.push(point2);\n  cords_AMS.push([point2[0], point2[1], point2[2] + manager3D.getAMS({\n    lng: point2[0],\n    lat: point2[1]\n  })]);\n  return {\n    cords: cords,\n    cords_AMS: cords_AMS\n  };\n}\nexport class SprayManager3d {\n  constructor(manager3d) {\n    this.manager3d = manager3d;\n    this.objects = [];\n    this.sphereArr = [];\n    this.routeLine = null;\n    this.selected_features = [];\n    this.warnings = [];\n    this.warningsBuildings = [];\n    this.helpLines = [];\n    this.changeMode = this.changeMode.bind(this);\n  }\n  addSphere(coords, elementID) {\n    let sphereOptions = this.manager3d.getMeshOptions(\"sphere_1\");\n    let pointSphere = window.tb.sphere(sphereOptions);\n    pointSphere.setCoords([coords[0], coords[1], coords[2] + this.manager3d.getAMS({\n      lng: coords[0],\n      lat: coords[1]\n    })]);\n    let sphereObject = {\n      object: pointSphere,\n      id: elementID,\n      baseCoords: coords\n    };\n    window.tb.add(pointSphere);\n    this.objects.push(pointSphere);\n    this.sphereArr.push(sphereObject);\n    this.setCurrentSphere(elementID);\n    this.manager3d.map.setZoom(this.manager3d.map.getZoom());\n  }\n  getCoordArr(route) {\n    let currentNode = route.head;\n    let coordArr = [];\n    while (currentNode != route.tail) {\n      currentNode = currentNode.next;\n      if (currentNode == route.head.next) {\n        coordArr.push([currentNode.params.lng.value, currentNode.params.lat.value, 0]);\n      }\n      if (currentNode.params.module.name == \"Polygon\") {\n        for (let coord of currentNode.params.markup.value) {\n          coordArr.push([coord[0], coord[1], Number(currentNode.params.alt.value)]);\n        }\n      } else if (currentNode.params.module.name == \"RTL\") {\n        coordArr.push(coordArr[1]);\n        coordArr.push(coordArr[0]);\n      } else {\n        coordArr.push([currentNode.params.lng.value, currentNode.params.lat.value, Number(currentNode.params.alt.value)]);\n      }\n      if (currentNode.params.module.name == \"Land\") {\n        coordArr.push([currentNode.params.lng.value, currentNode.params.lat.value, 0]);\n      }\n    }\n    this.route = route;\n    return coordArr;\n  }\n  updateLineGeometry(route) {\n    if (this.routeLine) {\n      let coordsArr = this.getCoordArr(route);\n      let cords_AMS = [];\n      for (let item in coordsArr) {\n        if (item < coordsArr.length - 1) {\n          if (coordsArr[item][2] == 0) {\n            cords_AMS.push([coordsArr[item][0], coordsArr[item][1], this.manager3d.getAMS({\n              lng: coordsArr[item][0],\n              lat: coordsArr[item][1]\n            })]);\n          } else if (coordsArr[Number(item) + 1][2] == 0) {\n            cords_AMS.push([coordsArr[Number(item) + 1][0], coordsArr[Number(item) + 1][1], this.manager3d.getAMS({\n              lng: coordsArr[Number(item) + 1][0],\n              lat: coordsArr[Number(item) + 1][1]\n            })]);\n          } else if (coordsArr[item][2] != 0 && coordsArr[Number(item) + 1][2] != 0) {\n            let segmCoords = segmentateLine(coordsArr[item], coordsArr[Number(item) + 1], 10, this.manager3d);\n            cords_AMS = cords_AMS.concat(segmCoords.cords_AMS);\n          }\n        }\n      }\n      this.routeLine.setGeometry_(cords_AMS, this.routeLine);\n    }\n  }\n  unitSpheres(route, arr = null) {\n    let coordsArr = arr ? arr : this.getCoordArr(route);\n    if (this.routeLine) {\n      window.tb.remove(this.routeLine);\n      for (let i in this.objects) {\n        if (this.objects[i] == this.routeLine) {\n          this.objects.splice(i, 1);\n        }\n      }\n    }\n    if (coordsArr.length > 1) {\n      let cords_AMS = [];\n      for (let item in coordsArr) {\n        if (item < coordsArr.length - 1) {\n          if (coordsArr[item][2] == 0) {\n            cords_AMS.push([coordsArr[item][0], coordsArr[item][1], this.manager3d.getAMS({\n              lng: coordsArr[item][0],\n              lat: coordsArr[item][1]\n            })]);\n          } else if (coordsArr[Number(item) + 1][2] == 0) {\n            cords_AMS.push([coordsArr[Number(item) + 1][0], coordsArr[Number(item) + 1][1], this.manager3d.getAMS({\n              lng: coordsArr[Number(item) + 1][0],\n              lat: coordsArr[Number(item) + 1][1]\n            })]);\n          } else if (coordsArr[item][2] != 0 && coordsArr[Number(item) + 1][2] != 0) {\n            let segmCoords = segmentateLine(coordsArr[item], coordsArr[Number(item) + 1], 10, this.manager3d);\n            cords_AMS = cords_AMS.concat(segmCoords.cords_AMS);\n          }\n        }\n      }\n      let routeLineOptions = this.manager3d.getMeshOptions(\"line_1\");\n      routeLineOptions.geometry = cords_AMS;\n      this.routeLine = window.tb.line(routeLineOptions);\n      window.tb.add(this.routeLine, \"custom-layer\");\n      this.objects.push(this.routeLine);\n    }\n  }\n  changeAlt(value, id, route) {\n    let sphereCoords = [];\n    for (let sphere of this.sphereArr) {\n      if (sphere.id == id) {\n        sphere.object.setCoords([sphere.object.coordinates[0], sphere.object.coordinates[1], Number(value) + this.manager3d.getAMS({\n          lng: sphere.object.coordinates[0],\n          lat: sphere.object.coordinates[1]\n        })]);\n        sphereCoords.push([sphere.object.coordinates[0], sphere.object.coordinates[1]]);\n        sphere.baseCoords[2] = Number(value);\n      }\n    }\n    this.updateLineGeometry(route);\n  }\n  changeCoords(coords, id) {\n    for (let sphere of this.sphereArr) {\n      if (sphere.id == id) {\n        sphere.object.setCoords([coords[0], coords[1], sphere.baseCoords[2] + this.manager3d.getAMS({\n          lng: coords[0],\n          lat: coords[1]\n        })]);\n        sphere.baseCoords = [coords[0], coords[1], sphere.baseCoords[2]];\n      }\n    }\n  }\n  clearTb(deleteAll = false) {\n    for (let object of this.objects) {\n      window.tb.remove(object);\n    }\n    ;\n    this.idSphereArr = [];\n    this.routeLine = null;\n    this.sphereArr = [];\n    this.objects = [];\n    if (deleteAll) {\n      this.map.removeLayer('custom_layer');\n    }\n  }\n  deleteObject(id) {\n    for (let element of this.sphereArr) {\n      if (element.id == id) {\n        window.tb.remove(element.object);\n      }\n    }\n  }\n  changeMode() {\n    for (let id in this.sphereArr) {\n      let z = [this.sphereArr[id].baseCoords[0], this.sphereArr[id].baseCoords[1], this.sphereArr[id].baseCoords[2] + this.manager3d.getAMS({\n        lng: this.sphereArr[id].baseCoords[0],\n        lat: this.sphereArr[id].baseCoords[1]\n      })];\n      this.sphereArr[id].object.setCoords(z);\n    }\n    if (this.route) {\n      this.unitSpheres(this.route);\n    }\n  }\n  changeScale() {}\n}","map":{"version":3,"names":["lineChunk","lineString","lineIntersect","lineSlice","length","point","polygon","getIntersectAlt","l1","l2","l3","line1","line2","Math","max","intersects","features","geometry","coordinates","calcDistance","point1","point2","line","start","stop","units","segmentateLine","segmentProcent","manager3D","flag","pwa1","pwa2","distance","interval","cords","cords_AMS","z","type","properties","map","feature","alt","push","getAMS","lng","lat","SprayManager3d","constructor","manager3d","objects","sphereArr","routeLine","selected_features","warnings","warningsBuildings","helpLines","changeMode","bind","addSphere","coords","elementID","sphereOptions","getMeshOptions","pointSphere","window","tb","sphere","setCoords","sphereObject","object","id","baseCoords","add","setCurrentSphere","setZoom","getZoom","getCoordArr","route","currentNode","head","coordArr","tail","next","params","value","module","name","coord","markup","Number","updateLineGeometry","coordsArr","item","segmCoords","concat","setGeometry_","unitSpheres","arr","remove","i","splice","routeLineOptions","changeAlt","sphereCoords","changeCoords","clearTb","deleteAll","idSphereArr","removeLayer","deleteObject","element","changeScale"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/src/Spraying/manager3D.js"],"sourcesContent":["// import waypointIcon from '../RouteConstructor/BRM/Waypoint/icon_map_waypoint.png';\n\nimport { lineChunk, lineString, lineIntersect, lineSlice, length, point, polygon } from '@turf/turf'\nfunction getIntersectAlt(l1, l2, l3) {\n    if(l1[0] != l2[0]){\n        let line1 = lineString([\n            [l1[0], l1[2]],\n            [l2[0], l2[2]]\n        ])\n        let line2 = lineString([\n            [l3[0], 0],\n            [l3[0], Math.max(l1[2], l2[2])]\n        ])\n        let intersects = lineIntersect(line1, line2)\n        return intersects.features[0].geometry.coordinates[1]\n    }\n    else if(l1[1] != l2[1]){\n        let line1 = lineString([\n            [l1[1], l1[2]],\n            [l2[1], l2[2]]\n        ])\n        let line2 = lineString([\n            [l3[1], 0],\n            [l3[1], Math.max(l1[2], l2[2])]\n        ])\n        let intersects = lineIntersect(line1, line2)\n        return intersects.features[0].geometry.coordinates[1]\n    }\n}\n\nfunction calcDistance(point1, point2) {\n    var line = {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": [\n                point1, \n                point2\n              ]\n            }\n          }\n        ]\n      };\n      \n      var start = {\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": point1\n        }\n      };\n      var stop = {\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": point2\n        }\n      };\n      return length(lineSlice(start, stop, line.features[0]), {units: 'meters'})\n}\nfunction segmentateLine(point1, point2, segmentProcent, manager3D, flag=false) {\n    let pwa1 = [\n        point1[0],\n        point1[1]\n    ]\n    let pwa2 = [\n        point2[0],\n        point2[1]\n    ]\n\n    let distance = calcDistance(\n        pwa1, \n        pwa2\n        )\n    let interval = 0;\n    if(flag){\n        interval = 1/1000\n    }\n    else{\n        interval = distance/1000*(segmentProcent/100)\n    }\n    let cords = []\n    let cords_AMS = []\n\n    let z = [...lineChunk({\n        type: 'Feature',\n        geometry: {\n            type: 'LineString',\n            coordinates: [\n                pwa1,\n                pwa2\n            ]\n        },\n        properties: {}\n        }, distance/1000*(segmentProcent/100)).features.map((feature) => {\n            let alt;\n            //console.log(pwa1, pwa2, feature.geometry.coordinates[0])\n            if(pwa1[0] == feature.geometry.coordinates[0][0] && pwa1[1] == feature.geometry.coordinates[0][1]){\n                alt = point1[2]\n            }\n            else if(pwa2[0] == feature.geometry.coordinates[0][0] && pwa2[1] == feature.geometry.coordinates[0][1]){\n                alt = point2[2]\n            }\n            else if(point1[2] == point2[2]){\n                alt = point1[2]\n            }\n            else{\n                alt = getIntersectAlt(\n                    point1, \n                    point2, \n                    feature.geometry.coordinates[0]\n                )\n            }\n\n            cords.push([\n                ...feature.geometry.coordinates[0],\n                alt\n            ])\n            cords_AMS.push([\n                ...feature.geometry.coordinates[0],\n                alt+manager3D.getAMS({\n                    lng:feature.geometry.coordinates[0][0],\n                    lat:feature.geometry.coordinates[0][1]\n                })\n            ])\n            return \n        })\n    ]\n\n    cords.push(point2)\n    cords_AMS.push([\n        point2[0],\n        point2[1],\n        point2[2]+manager3D.getAMS({\n            lng:point2[0],\n            lat:point2[1]\n        })\n    ])\n\n    return {\n        cords:cords,\n        cords_AMS:cords_AMS\n    }\n}\n\nexport class SprayManager3d{\n    constructor(manager3d){\n        this.manager3d = manager3d;\n        this.objects = [];\n        this.sphereArr = [];\n        this.routeLine = null;\n        this.selected_features = []\n        this.warnings = []\n        this.warningsBuildings = []\n        this.helpLines = []\n        this.changeMode = this.changeMode.bind(this);\n    }\n\n    addSphere(coords, elementID){\n        let sphereOptions = this.manager3d.getMeshOptions(\"sphere_1\")\n        let pointSphere = window.tb.sphere(sphereOptions)\n        pointSphere.setCoords([\n            coords[0],\n            coords[1], \n            coords[2]+this.manager3d.getAMS({\n                lng:coords[0],\n                lat:coords[1]\n            })\n        ])\n\n        let sphereObject = {\n            object: pointSphere,\n            id: elementID,\n            baseCoords: coords\n        }\n        \n        window.tb.add(pointSphere)\n        this.objects.push(pointSphere)\n        this.sphereArr.push(sphereObject)\n        this.setCurrentSphere(elementID);\n\n        this.manager3d.map.setZoom(this.manager3d.map.getZoom())\n    }\n\n    getCoordArr(route){\n        let currentNode = route.head\n        let coordArr = [] \n        while (currentNode != route.tail){\n            currentNode = currentNode.next \n            if(currentNode == route.head.next){\n                coordArr.push([\n                    currentNode.params.lng.value,\n                    currentNode.params.lat.value,\n                    0\n                ])\n            }\n\n            if (currentNode.params.module.name == \"Polygon\"){\n                for (let coord of currentNode.params.markup.value){\n                    coordArr.push([\n                        coord[0], \n                        coord[1], \n                        Number(currentNode.params.alt.value)\n                    ])\n                }\n            }else if (currentNode.params.module.name == \"RTL\"){\n             coordArr.push(coordArr[1])\n             coordArr.push(coordArr[0])\n            }else{\n                coordArr.push([\n                    currentNode.params.lng.value,\n                    currentNode.params.lat.value,\n                    Number(currentNode.params.alt.value)\n                ])\n            }\n            if(currentNode.params.module.name == \"Land\"){\n                coordArr.push([\n                    currentNode.params.lng.value,\n                    currentNode.params.lat.value,\n                    0\n                ])\n            }\n        }\n        this.route = route\n        return coordArr\n    }\n\n    updateLineGeometry(route){\n        if (this.routeLine){\n            let coordsArr = this.getCoordArr(route)\n            let cords_AMS = []\n            for (let item in coordsArr){\n                if (item < coordsArr.length-1){\n                    \n                    \n                    if(coordsArr[item][2] == 0){\n                        cords_AMS.push([\n                            coordsArr[item][0],\n                            coordsArr[item][1],\n                            this.manager3d.getAMS({\n                                lng:coordsArr[item][0],\n                                lat:coordsArr[item][1]\n                            })\n                        ])\n                    }\n                    else if(coordsArr[Number(item)+1][2] == 0){\n                        cords_AMS.push([\n                            coordsArr[Number(item)+1][0],\n                            coordsArr[Number(item)+1][1],\n                            this.manager3d.getAMS({\n                                lng:coordsArr[Number(item)+1][0],\n                                lat:coordsArr[Number(item)+1][1]\n                            })\n                        ])\n                    }\n                    else if(coordsArr[item][2] != 0 && coordsArr[Number(item)+1][2] != 0){\n                        let segmCoords = segmentateLine(coordsArr[item], coordsArr[Number(item)+1], 10, this.manager3d)\n                        cords_AMS = cords_AMS.concat(segmCoords.cords_AMS)\n                    }\n                }\n            }\n            this.routeLine.setGeometry_(cords_AMS, this.routeLine)\n        }\n    }\n\n    unitSpheres(route, arr = null){\n        let coordsArr = (arr)?arr:this.getCoordArr(route)\n        if (this.routeLine){\n            window.tb.remove(this.routeLine)\n            for (let i in this.objects){\n                if (this.objects[i] == this.routeLine){\n                    this.objects.splice(i, 1)\n                }\n            }\n        }\n        if (coordsArr.length > 1){\n            let cords_AMS = []\n            for (let item in coordsArr){\n                if (item < coordsArr.length-1){\n                    if(coordsArr[item][2] == 0){\n                        cords_AMS.push([\n                            coordsArr[item][0],\n                            coordsArr[item][1],\n                            this.manager3d.getAMS({\n                                lng:coordsArr[item][0],\n                                lat:coordsArr[item][1]\n                            })\n                        ])\n                    }\n                    else if(coordsArr[Number(item)+1][2] == 0){\n                        cords_AMS.push([\n                            coordsArr[Number(item)+1][0],\n                            coordsArr[Number(item)+1][1],\n                            this.manager3d.getAMS({\n                                lng:coordsArr[Number(item)+1][0],\n                                lat:coordsArr[Number(item)+1][1]\n                            })\n                        ])\n                    }\n                    else if(coordsArr[item][2] != 0 && coordsArr[Number(item)+1][2] != 0){\n                        let segmCoords = segmentateLine(coordsArr[item], coordsArr[Number(item)+1], 10, this.manager3d)\n                        cords_AMS = cords_AMS.concat(segmCoords.cords_AMS)\n                    }\n                }\n            }\n            let routeLineOptions = this.manager3d.getMeshOptions(\"line_1\")\n            routeLineOptions.geometry = cords_AMS\n            this.routeLine = window.tb.line(routeLineOptions)\n            window.tb.add(this.routeLine, \"custom-layer\")\n            this.objects.push(this.routeLine)\n        }\n    }\n\n    changeAlt(value, id, route){\n        let sphereCoords = []\n        for (let sphere of this.sphereArr){\n            if (sphere.id == id){\n                sphere.object.setCoords([\n                    sphere.object.coordinates[0], \n                    sphere.object.coordinates[1], \n                    Number(value)+this.manager3d.getAMS({\n                        lng: sphere.object.coordinates[0],\n                        lat: sphere.object.coordinates[1]\n                    })])\n                sphereCoords.push([sphere.object.coordinates[0], sphere.object.coordinates[1]])\n                sphere.baseCoords[2] = Number(value)\n            }\n        }\n        this.updateLineGeometry(route)\n    }\n    changeCoords(coords, id){\n        for (let sphere of this.sphereArr){\n            if (sphere.id == id){\n                sphere.object.setCoords([\n                    coords[0], \n                    coords[1], \n                    sphere.baseCoords[2]+this.manager3d.getAMS({\n                        lng:coords[0],\n                        lat:coords[1]\n                    })\n                ])\n                sphere.baseCoords = [coords[0], coords[1], sphere.baseCoords[2]]\n            }\n        }\n    }\n    clearTb(deleteAll = false){\n        for (let object of this.objects){\n            window.tb.remove(object)\n        };\n        this.idSphereArr = []\n        this.routeLine = null;\n        this.sphereArr = []\n        this.objects = []\n        if (deleteAll){\n            this.map.removeLayer('custom_layer')\n        }\n    }\n    deleteObject(id){\n        for (let element of this.sphereArr){\n            if (element.id == id){\n                window.tb.remove(element.object)\n            }\n        }\n    }\n    changeMode(){\n        for (let id in this.sphereArr){\n            let z = [\n                this.sphereArr[id].baseCoords[0],\n                this.sphereArr[id].baseCoords[1],\n                this.sphereArr[id].baseCoords[2]+this.manager3d.getAMS({\n                    lng:this.sphereArr[id].baseCoords[0],\n                    lat:this.sphereArr[id].baseCoords[1]\n                })\n            ]\n            this.sphereArr[id].object.setCoords(z)\n        }\n        if (this.route){\n            this.unitSpheres(this.route)\n        }\n    }\n    changeScale(){\n        \n    }\n}\n"],"mappings":"AAAA;;AAEA,SAASA,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,QAAQ,YAAY;AACpG,SAASC,eAAeA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACjC,IAAGF,EAAE,CAAC,CAAC,CAAC,IAAIC,EAAE,CAAC,CAAC,CAAC,EAAC;IACd,IAAIE,KAAK,GAAGV,UAAU,CAAC,CACnB,CAACO,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC,EACd,CAACC,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC,CACjB,CAAC;IACF,IAAIG,KAAK,GAAGX,UAAU,CAAC,CACnB,CAACS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACV,CAACA,EAAE,CAAC,CAAC,CAAC,EAAEG,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAClC,CAAC;IACF,IAAIM,UAAU,GAAGb,aAAa,CAACS,KAAK,EAAEC,KAAK,CAAC;IAC5C,OAAOG,UAAU,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;EACzD,CAAC,MACI,IAAGV,EAAE,CAAC,CAAC,CAAC,IAAIC,EAAE,CAAC,CAAC,CAAC,EAAC;IACnB,IAAIE,KAAK,GAAGV,UAAU,CAAC,CACnB,CAACO,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC,EACd,CAACC,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC,CACjB,CAAC;IACF,IAAIG,KAAK,GAAGX,UAAU,CAAC,CACnB,CAACS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACV,CAACA,EAAE,CAAC,CAAC,CAAC,EAAEG,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAClC,CAAC;IACF,IAAIM,UAAU,GAAGb,aAAa,CAACS,KAAK,EAAEC,KAAK,CAAC;IAC5C,OAAOG,UAAU,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;EACzD;AACJ;AAEA,SAASC,YAAYA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAClC,IAAIC,IAAI,GAAG;IACP,MAAM,EAAE,mBAAmB;IAC3B,UAAU,EAAE,CACV;MACE,MAAM,EAAE,SAAS;MACjB,YAAY,EAAE,CAAC,CAAC;MAChB,UAAU,EAAE;QACV,MAAM,EAAE,YAAY;QACpB,aAAa,EAAE,CACbF,MAAM,EACNC,MAAM;MAEV;IACF,CAAC;EAEL,CAAC;EAED,IAAIE,KAAK,GAAG;IACV,MAAM,EAAE,SAAS;IACjB,YAAY,EAAE,CAAC,CAAC;IAChB,UAAU,EAAE;MACV,MAAM,EAAE,OAAO;MACf,aAAa,EAAEH;IACjB;EACF,CAAC;EACD,IAAII,IAAI,GAAG;IACT,MAAM,EAAE,SAAS;IACjB,YAAY,EAAE,CAAC,CAAC;IAChB,UAAU,EAAE;MACV,MAAM,EAAE,OAAO;MACf,aAAa,EAAEH;IACjB;EACF,CAAC;EACD,OAAOjB,MAAM,CAACD,SAAS,CAACoB,KAAK,EAAEC,IAAI,EAAEF,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;IAACS,KAAK,EAAE;EAAQ,CAAC,CAAC;AAChF;AACA,SAASC,cAAcA,CAACN,MAAM,EAAEC,MAAM,EAAEM,cAAc,EAAEC,SAAS,EAAEC,IAAI,GAAC,KAAK,EAAE;EAC3E,IAAIC,IAAI,GAAG,CACPV,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,CACZ;EACD,IAAIW,IAAI,GAAG,CACPV,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,CACZ;EAED,IAAIW,QAAQ,GAAGb,YAAY,CACvBW,IAAI,EACJC,IACA,CAAC;EACL,IAAIE,QAAQ,GAAG,CAAC;EAChB,IAAGJ,IAAI,EAAC;IACJI,QAAQ,GAAG,CAAC,GAAC,IAAI;EACrB,CAAC,MACG;IACAA,QAAQ,GAAGD,QAAQ,GAAC,IAAI,IAAEL,cAAc,GAAC,GAAG,CAAC;EACjD;EACA,IAAIO,KAAK,GAAG,EAAE;EACd,IAAIC,SAAS,GAAG,EAAE;EAElB,IAAIC,CAAC,GAAG,CAAC,GAAGpC,SAAS,CAAC;IAClBqC,IAAI,EAAE,SAAS;IACfpB,QAAQ,EAAE;MACNoB,IAAI,EAAE,YAAY;MAClBnB,WAAW,EAAE,CACTY,IAAI,EACJC,IAAI;IAEZ,CAAC;IACDO,UAAU,EAAE,CAAC;EACb,CAAC,EAAEN,QAAQ,GAAC,IAAI,IAAEL,cAAc,GAAC,GAAG,CAAC,CAAC,CAACX,QAAQ,CAACuB,GAAG,CAAEC,OAAO,IAAK;IAC7D,IAAIC,GAAG;IACP;IACA,IAAGX,IAAI,CAAC,CAAC,CAAC,IAAIU,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC,IAAIU,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC;MAC9FuB,GAAG,GAAGrB,MAAM,CAAC,CAAC,CAAC;IACnB,CAAC,MACI,IAAGW,IAAI,CAAC,CAAC,CAAC,IAAIS,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIa,IAAI,CAAC,CAAC,CAAC,IAAIS,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC;MACnGuB,GAAG,GAAGpB,MAAM,CAAC,CAAC,CAAC;IACnB,CAAC,MACI,IAAGD,MAAM,CAAC,CAAC,CAAC,IAAIC,MAAM,CAAC,CAAC,CAAC,EAAC;MAC3BoB,GAAG,GAAGrB,MAAM,CAAC,CAAC,CAAC;IACnB,CAAC,MACG;MACAqB,GAAG,GAAGlC,eAAe,CACjBa,MAAM,EACNC,MAAM,EACNmB,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAClC,CAAC;IACL;IAEAgB,KAAK,CAACQ,IAAI,CAAC,CACP,GAAGF,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,EAClCuB,GAAG,CACN,CAAC;IACFN,SAAS,CAACO,IAAI,CAAC,CACX,GAAGF,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,EAClCuB,GAAG,GAACb,SAAS,CAACe,MAAM,CAAC;MACjBC,GAAG,EAACJ,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC2B,GAAG,EAACL,OAAO,CAACvB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CACL,CAAC;IACF;EACJ,CAAC,CAAC,CACL;EAEDgB,KAAK,CAACQ,IAAI,CAACrB,MAAM,CAAC;EAClBc,SAAS,CAACO,IAAI,CAAC,CACXrB,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,GAACO,SAAS,CAACe,MAAM,CAAC;IACvBC,GAAG,EAACvB,MAAM,CAAC,CAAC,CAAC;IACbwB,GAAG,EAACxB,MAAM,CAAC,CAAC;EAChB,CAAC,CAAC,CACL,CAAC;EAEF,OAAO;IACHa,KAAK,EAACA,KAAK;IACXC,SAAS,EAACA;EACd,CAAC;AACL;AAEA,OAAO,MAAMW,cAAc;EACvBC,WAAWA,CAACC,SAAS,EAAC;IAClB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;EAChD;EAEAC,SAASA,CAACC,MAAM,EAAEC,SAAS,EAAC;IACxB,IAAIC,aAAa,GAAG,IAAI,CAACb,SAAS,CAACc,cAAc,CAAC,UAAU,CAAC;IAC7D,IAAIC,WAAW,GAAGC,MAAM,CAACC,EAAE,CAACC,MAAM,CAACL,aAAa,CAAC;IACjDE,WAAW,CAACI,SAAS,CAAC,CAClBR,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,GAAC,IAAI,CAACX,SAAS,CAACL,MAAM,CAAC;MAC5BC,GAAG,EAACe,MAAM,CAAC,CAAC,CAAC;MACbd,GAAG,EAACc,MAAM,CAAC,CAAC;IAChB,CAAC,CAAC,CACL,CAAC;IAEF,IAAIS,YAAY,GAAG;MACfC,MAAM,EAAEN,WAAW;MACnBO,EAAE,EAAEV,SAAS;MACbW,UAAU,EAAEZ;IAChB,CAAC;IAEDK,MAAM,CAACC,EAAE,CAACO,GAAG,CAACT,WAAW,CAAC;IAC1B,IAAI,CAACd,OAAO,CAACP,IAAI,CAACqB,WAAW,CAAC;IAC9B,IAAI,CAACb,SAAS,CAACR,IAAI,CAAC0B,YAAY,CAAC;IACjC,IAAI,CAACK,gBAAgB,CAACb,SAAS,CAAC;IAEhC,IAAI,CAACZ,SAAS,CAACT,GAAG,CAACmC,OAAO,CAAC,IAAI,CAAC1B,SAAS,CAACT,GAAG,CAACoC,OAAO,CAAC,CAAC,CAAC;EAC5D;EAEAC,WAAWA,CAACC,KAAK,EAAC;IACd,IAAIC,WAAW,GAAGD,KAAK,CAACE,IAAI;IAC5B,IAAIC,QAAQ,GAAG,EAAE;IACjB,OAAOF,WAAW,IAAID,KAAK,CAACI,IAAI,EAAC;MAC7BH,WAAW,GAAGA,WAAW,CAACI,IAAI;MAC9B,IAAGJ,WAAW,IAAID,KAAK,CAACE,IAAI,CAACG,IAAI,EAAC;QAC9BF,QAAQ,CAACtC,IAAI,CAAC,CACVoC,WAAW,CAACK,MAAM,CAACvC,GAAG,CAACwC,KAAK,EAC5BN,WAAW,CAACK,MAAM,CAACtC,GAAG,CAACuC,KAAK,EAC5B,CAAC,CACJ,CAAC;MACN;MAEA,IAAIN,WAAW,CAACK,MAAM,CAACE,MAAM,CAACC,IAAI,IAAI,SAAS,EAAC;QAC5C,KAAK,IAAIC,KAAK,IAAIT,WAAW,CAACK,MAAM,CAACK,MAAM,CAACJ,KAAK,EAAC;UAC9CJ,QAAQ,CAACtC,IAAI,CAAC,CACV6C,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CAAC,EACRE,MAAM,CAACX,WAAW,CAACK,MAAM,CAAC1C,GAAG,CAAC2C,KAAK,CAAC,CACvC,CAAC;QACN;MACJ,CAAC,MAAK,IAAIN,WAAW,CAACK,MAAM,CAACE,MAAM,CAACC,IAAI,IAAI,KAAK,EAAC;QACjDN,QAAQ,CAACtC,IAAI,CAACsC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1BA,QAAQ,CAACtC,IAAI,CAACsC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC3B,CAAC,MAAI;QACDA,QAAQ,CAACtC,IAAI,CAAC,CACVoC,WAAW,CAACK,MAAM,CAACvC,GAAG,CAACwC,KAAK,EAC5BN,WAAW,CAACK,MAAM,CAACtC,GAAG,CAACuC,KAAK,EAC5BK,MAAM,CAACX,WAAW,CAACK,MAAM,CAAC1C,GAAG,CAAC2C,KAAK,CAAC,CACvC,CAAC;MACN;MACA,IAAGN,WAAW,CAACK,MAAM,CAACE,MAAM,CAACC,IAAI,IAAI,MAAM,EAAC;QACxCN,QAAQ,CAACtC,IAAI,CAAC,CACVoC,WAAW,CAACK,MAAM,CAACvC,GAAG,CAACwC,KAAK,EAC5BN,WAAW,CAACK,MAAM,CAACtC,GAAG,CAACuC,KAAK,EAC5B,CAAC,CACJ,CAAC;MACN;IACJ;IACA,IAAI,CAACP,KAAK,GAAGA,KAAK;IAClB,OAAOG,QAAQ;EACnB;EAEAU,kBAAkBA,CAACb,KAAK,EAAC;IACrB,IAAI,IAAI,CAAC1B,SAAS,EAAC;MACf,IAAIwC,SAAS,GAAG,IAAI,CAACf,WAAW,CAACC,KAAK,CAAC;MACvC,IAAI1C,SAAS,GAAG,EAAE;MAClB,KAAK,IAAIyD,IAAI,IAAID,SAAS,EAAC;QACvB,IAAIC,IAAI,GAAGD,SAAS,CAACvF,MAAM,GAAC,CAAC,EAAC;UAG1B,IAAGuF,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC;YACvBzD,SAAS,CAACO,IAAI,CAAC,CACXiD,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,EAClBD,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,EAClB,IAAI,CAAC5C,SAAS,CAACL,MAAM,CAAC;cAClBC,GAAG,EAAC+C,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;cACtB/C,GAAG,EAAC8C,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CACL,CAAC;UACN,CAAC,MACI,IAAGD,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC;YACtCzD,SAAS,CAACO,IAAI,CAAC,CACXiD,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5BD,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5B,IAAI,CAAC5C,SAAS,CAACL,MAAM,CAAC;cAClBC,GAAG,EAAC+C,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAChC/C,GAAG,EAAC8C,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC,CAAC,CACL,CAAC;UACN,CAAC,MACI,IAAGD,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAID,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC;YACjE,IAAIC,UAAU,GAAGnE,cAAc,CAACiE,SAAS,CAACC,IAAI,CAAC,EAAED,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC5C,SAAS,CAAC;YAC/Fb,SAAS,GAAGA,SAAS,CAAC2D,MAAM,CAACD,UAAU,CAAC1D,SAAS,CAAC;UACtD;QACJ;MACJ;MACA,IAAI,CAACgB,SAAS,CAAC4C,YAAY,CAAC5D,SAAS,EAAE,IAAI,CAACgB,SAAS,CAAC;IAC1D;EACJ;EAEA6C,WAAWA,CAACnB,KAAK,EAAEoB,GAAG,GAAG,IAAI,EAAC;IAC1B,IAAIN,SAAS,GAAIM,GAAG,GAAEA,GAAG,GAAC,IAAI,CAACrB,WAAW,CAACC,KAAK,CAAC;IACjD,IAAI,IAAI,CAAC1B,SAAS,EAAC;MACfa,MAAM,CAACC,EAAE,CAACiC,MAAM,CAAC,IAAI,CAAC/C,SAAS,CAAC;MAChC,KAAK,IAAIgD,CAAC,IAAI,IAAI,CAAClD,OAAO,EAAC;QACvB,IAAI,IAAI,CAACA,OAAO,CAACkD,CAAC,CAAC,IAAI,IAAI,CAAChD,SAAS,EAAC;UAClC,IAAI,CAACF,OAAO,CAACmD,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;QAC7B;MACJ;IACJ;IACA,IAAIR,SAAS,CAACvF,MAAM,GAAG,CAAC,EAAC;MACrB,IAAI+B,SAAS,GAAG,EAAE;MAClB,KAAK,IAAIyD,IAAI,IAAID,SAAS,EAAC;QACvB,IAAIC,IAAI,GAAGD,SAAS,CAACvF,MAAM,GAAC,CAAC,EAAC;UAC1B,IAAGuF,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC;YACvBzD,SAAS,CAACO,IAAI,CAAC,CACXiD,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,EAClBD,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,EAClB,IAAI,CAAC5C,SAAS,CAACL,MAAM,CAAC;cAClBC,GAAG,EAAC+C,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;cACtB/C,GAAG,EAAC8C,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CACL,CAAC;UACN,CAAC,MACI,IAAGD,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC;YACtCzD,SAAS,CAACO,IAAI,CAAC,CACXiD,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5BD,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5B,IAAI,CAAC5C,SAAS,CAACL,MAAM,CAAC;cAClBC,GAAG,EAAC+C,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAChC/C,GAAG,EAAC8C,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC,CAAC,CACL,CAAC;UACN,CAAC,MACI,IAAGD,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAID,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC;YACjE,IAAIC,UAAU,GAAGnE,cAAc,CAACiE,SAAS,CAACC,IAAI,CAAC,EAAED,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,GAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC5C,SAAS,CAAC;YAC/Fb,SAAS,GAAGA,SAAS,CAAC2D,MAAM,CAACD,UAAU,CAAC1D,SAAS,CAAC;UACtD;QACJ;MACJ;MACA,IAAIkE,gBAAgB,GAAG,IAAI,CAACrD,SAAS,CAACc,cAAc,CAAC,QAAQ,CAAC;MAC9DuC,gBAAgB,CAACpF,QAAQ,GAAGkB,SAAS;MACrC,IAAI,CAACgB,SAAS,GAAGa,MAAM,CAACC,EAAE,CAAC3C,IAAI,CAAC+E,gBAAgB,CAAC;MACjDrC,MAAM,CAACC,EAAE,CAACO,GAAG,CAAC,IAAI,CAACrB,SAAS,EAAE,cAAc,CAAC;MAC7C,IAAI,CAACF,OAAO,CAACP,IAAI,CAAC,IAAI,CAACS,SAAS,CAAC;IACrC;EACJ;EAEAmD,SAASA,CAAClB,KAAK,EAAEd,EAAE,EAAEO,KAAK,EAAC;IACvB,IAAI0B,YAAY,GAAG,EAAE;IACrB,KAAK,IAAIrC,MAAM,IAAI,IAAI,CAAChB,SAAS,EAAC;MAC9B,IAAIgB,MAAM,CAACI,EAAE,IAAIA,EAAE,EAAC;QAChBJ,MAAM,CAACG,MAAM,CAACF,SAAS,CAAC,CACpBD,MAAM,CAACG,MAAM,CAACnD,WAAW,CAAC,CAAC,CAAC,EAC5BgD,MAAM,CAACG,MAAM,CAACnD,WAAW,CAAC,CAAC,CAAC,EAC5BuE,MAAM,CAACL,KAAK,CAAC,GAAC,IAAI,CAACpC,SAAS,CAACL,MAAM,CAAC;UAChCC,GAAG,EAAEsB,MAAM,CAACG,MAAM,CAACnD,WAAW,CAAC,CAAC,CAAC;UACjC2B,GAAG,EAAEqB,MAAM,CAACG,MAAM,CAACnD,WAAW,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC,CAAC;QACRqF,YAAY,CAAC7D,IAAI,CAAC,CAACwB,MAAM,CAACG,MAAM,CAACnD,WAAW,CAAC,CAAC,CAAC,EAAEgD,MAAM,CAACG,MAAM,CAACnD,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/EgD,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,GAAGkB,MAAM,CAACL,KAAK,CAAC;MACxC;IACJ;IACA,IAAI,CAACM,kBAAkB,CAACb,KAAK,CAAC;EAClC;EACA2B,YAAYA,CAAC7C,MAAM,EAAEW,EAAE,EAAC;IACpB,KAAK,IAAIJ,MAAM,IAAI,IAAI,CAAChB,SAAS,EAAC;MAC9B,IAAIgB,MAAM,CAACI,EAAE,IAAIA,EAAE,EAAC;QAChBJ,MAAM,CAACG,MAAM,CAACF,SAAS,CAAC,CACpBR,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTO,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,GAAC,IAAI,CAACvB,SAAS,CAACL,MAAM,CAAC;UACvCC,GAAG,EAACe,MAAM,CAAC,CAAC,CAAC;UACbd,GAAG,EAACc,MAAM,CAAC,CAAC;QAChB,CAAC,CAAC,CACL,CAAC;QACFO,MAAM,CAACK,UAAU,GAAG,CAACZ,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEO,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;MACpE;IACJ;EACJ;EACAkC,OAAOA,CAACC,SAAS,GAAG,KAAK,EAAC;IACtB,KAAK,IAAIrC,MAAM,IAAI,IAAI,CAACpB,OAAO,EAAC;MAC5Be,MAAM,CAACC,EAAE,CAACiC,MAAM,CAAC7B,MAAM,CAAC;IAC5B;IAAC;IACD,IAAI,CAACsC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACxD,SAAS,GAAG,IAAI;IACrB,IAAI,CAACD,SAAS,GAAG,EAAE;IACnB,IAAI,CAACD,OAAO,GAAG,EAAE;IACjB,IAAIyD,SAAS,EAAC;MACV,IAAI,CAACnE,GAAG,CAACqE,WAAW,CAAC,cAAc,CAAC;IACxC;EACJ;EACAC,YAAYA,CAACvC,EAAE,EAAC;IACZ,KAAK,IAAIwC,OAAO,IAAI,IAAI,CAAC5D,SAAS,EAAC;MAC/B,IAAI4D,OAAO,CAACxC,EAAE,IAAIA,EAAE,EAAC;QACjBN,MAAM,CAACC,EAAE,CAACiC,MAAM,CAACY,OAAO,CAACzC,MAAM,CAAC;MACpC;IACJ;EACJ;EACAb,UAAUA,CAAA,EAAE;IACR,KAAK,IAAIc,EAAE,IAAI,IAAI,CAACpB,SAAS,EAAC;MAC1B,IAAId,CAAC,GAAG,CACJ,IAAI,CAACc,SAAS,CAACoB,EAAE,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,EAChC,IAAI,CAACrB,SAAS,CAACoB,EAAE,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,EAChC,IAAI,CAACrB,SAAS,CAACoB,EAAE,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,GAAC,IAAI,CAACvB,SAAS,CAACL,MAAM,CAAC;QACnDC,GAAG,EAAC,IAAI,CAACM,SAAS,CAACoB,EAAE,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC;QACpC1B,GAAG,EAAC,IAAI,CAACK,SAAS,CAACoB,EAAE,CAAC,CAACC,UAAU,CAAC,CAAC;MACvC,CAAC,CAAC,CACL;MACD,IAAI,CAACrB,SAAS,CAACoB,EAAE,CAAC,CAACD,MAAM,CAACF,SAAS,CAAC/B,CAAC,CAAC;IAC1C;IACA,IAAI,IAAI,CAACyC,KAAK,EAAC;MACX,IAAI,CAACmB,WAAW,CAAC,IAAI,CAACnB,KAAK,CAAC;IAChC;EACJ;EACAkC,WAAWA,CAAA,EAAE,CAEb;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}