{"ast":null,"code":"var THREE = require(\"../three.js\");\nvar Constants = require(\"./constants.js\");\nvar validate = require(\"./validate.js\");\nvar utils = {\n  prettyPrintMatrix: function (uglymatrix) {\n    for (var s = 0; s < 4; s++) {\n      var quartet = [uglymatrix[s], uglymatrix[s + 4], uglymatrix[s + 8], uglymatrix[s + 12]];\n      console.log(quartet.map(function (num) {\n        return num.toFixed(4);\n      }));\n    }\n  },\n  makePerspectiveMatrix: function (fovy, aspect, near, far) {\n    var out = new THREE.Matrix4();\n    var f = 1.0 / Math.tan(fovy / 2),\n      nf = 1 / (near - far);\n    var newMatrix = [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (far + near) * nf, -1, 0, 0, 2 * far * near * nf, 0];\n    out.elements = newMatrix;\n    return out;\n  },\n  //[jscastro] new orthographic matrix calculations https://en.wikipedia.org/wiki/Orthographic_projection and validated with https://bit.ly/3rPvB9Y\n  makeOrthographicMatrix: function (left, right, top, bottom, near, far) {\n    var out = new THREE.Matrix4();\n    const w = 1.0 / (right - left);\n    const h = 1.0 / (top - bottom);\n    const p = 1.0 / (far - near);\n    const x = (right + left) * w;\n    const y = (top + bottom) * h;\n    const z = near * p;\n    var newMatrix = [2 * w, 0, 0, 0, 0, 2 * h, 0, 0, 0, 0, -1 * p, 0, -x, -y, -z, 1];\n    out.elements = newMatrix;\n    return out;\n  },\n  //gimme radians\n  radify: function (deg) {\n    function convert(degrees) {\n      degrees = degrees || 0;\n      return Math.PI * 2 * degrees / 360;\n    }\n    if (typeof deg === 'object') {\n      //if [x,y,z] array of rotations\n      if (deg.length > 0) {\n        return deg.map(function (degree) {\n          return convert(degree);\n        });\n      }\n\n      // if {x: y: z:} rotation object\n      else {\n        return [convert(deg.x), convert(deg.y), convert(deg.z)];\n      }\n    }\n\n    //if just a number\n    else return convert(deg);\n  },\n  //gimme degrees\n  degreeify: function (rad) {\n    function convert(radians) {\n      radians = radians || 0;\n      return radians * 360 / (Math.PI * 2);\n    }\n    if (typeof rad === 'object') {\n      return [convert(rad.x), convert(rad.y), convert(rad.z)];\n    } else return convert(rad);\n  },\n  projectToWorld: function (coords) {\n    // Spherical mercator forward projection, re-scaling to WORLD_SIZE\n\n    var projected = [-Constants.MERCATOR_A * Constants.DEG2RAD * coords[0] * Constants.PROJECTION_WORLD_SIZE, -Constants.MERCATOR_A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * Constants.DEG2RAD * coords[1])) * Constants.PROJECTION_WORLD_SIZE];\n\n    //z dimension, defaulting to 0 if not provided\n\n    if (!coords[2]) projected.push(0);else {\n      var pixelsPerMeter = this.projectedUnitsPerMeter(coords[1]);\n      projected.push(coords[2] * pixelsPerMeter);\n    }\n    var result = new THREE.Vector3(projected[0], projected[1], projected[2]);\n    return result;\n  },\n  projectedUnitsPerMeter: function (latitude) {\n    return Math.abs(Constants.WORLD_SIZE / Math.cos(Constants.DEG2RAD * latitude) / Constants.EARTH_CIRCUMFERENCE);\n  },\n  _circumferenceAtLatitude: function (latitude) {\n    return Constants.EARTH_CIRCUMFERENCE * Math.cos(latitude * Math.PI / 180);\n  },\n  mercatorZfromAltitude: function (altitude, lat) {\n    return altitude / this._circumferenceAtLatitude(lat);\n  },\n  _scaleVerticesToMeters: function (centerLatLng, vertices) {\n    var pixelsPerMeter = this.projectedUnitsPerMeter(centerLatLng[1]);\n    var centerProjected = this.projectToWorld(centerLatLng);\n    for (var i = 0; i < vertices.length; i++) {\n      vertices[i].multiplyScalar(pixelsPerMeter);\n    }\n    return vertices;\n  },\n  projectToScreen: function (coords) {\n    console.log(\"WARNING: Projecting to screen coordinates is not yet implemented\");\n  },\n  unprojectFromScreen: function (pixel) {\n    console.log(\"WARNING: unproject is not yet implemented\");\n  },\n  //world units to lnglat\n  unprojectFromWorld: function (worldUnits) {\n    var unprojected = [-worldUnits.x / (Constants.MERCATOR_A * Constants.DEG2RAD * Constants.PROJECTION_WORLD_SIZE), 2 * (Math.atan(Math.exp(worldUnits.y / (Constants.PROJECTION_WORLD_SIZE * -Constants.MERCATOR_A))) - Math.PI / 4) / Constants.DEG2RAD];\n    var pixelsPerMeter = this.projectedUnitsPerMeter(unprojected[1]);\n\n    //z dimension\n    var height = worldUnits.z || 0;\n    unprojected.push(height / pixelsPerMeter);\n    return unprojected;\n  },\n  toScreenPosition: function (obj, camera) {\n    var vector = new THREE.Vector3();\n    var widthHalf = 0.5 * renderer.context.canvas.width;\n    var heightHalf = 0.5 * renderer.context.canvas.height;\n    obj.updateMatrixWorld();\n    vector.setFromMatrixPosition(obj.matrixWorld);\n    vector.project(camera);\n    vector.x = vector.x * widthHalf + widthHalf;\n    vector.y = -(vector.y * heightHalf) + heightHalf;\n    return {\n      x: vector.x,\n      y: vector.y\n    };\n  },\n  //get the center point of a feature\n  getFeatureCenter: function getFeatureCenter(feature, model, level) {\n    let center = [];\n    let latitude = 0;\n    let longitude = 0;\n    let height = 0;\n    //deep copy to avoid modifying the original array\n    let coordinates = [...feature.geometry.coordinates[0]];\n    if (feature.geometry.type === \"Point\") {\n      center = [...coordinates[0]]; //deep copy\n    } else {\n      //features in mapbox repeat the first coordinates at the end. We remove it.\n      if (feature.geometry.type === \"MultiPolygon\") coordinates = coordinates[0];\n      coordinates.splice(-1, 1);\n      coordinates.forEach(function (c) {\n        latitude += c[0];\n        longitude += c[1];\n      });\n      center = [latitude / coordinates.length, longitude / coordinates.length];\n    }\n    height = this.getObjectHeightOnFloor(feature, model, level);\n    center.length < 3 ? center.push(height) : center[2] = height;\n    return center;\n  },\n  getObjectHeightOnFloor: function (feature, obj, level = feature.properties.level || 0) {\n    let floorHeightMin = level * (feature.properties.levelHeight || 0);\n    //object height is modelSize.z + base_height or min_height configured for this object\n    let base = feature.properties.base_height || feature.properties.min_height || 0;\n    //let height = ((obj && obj.model) ? obj.modelSize.z : (feature.properties.height - base));\n    let height = obj && obj.model ? 0 : feature.properties.height - base;\n    let objectHeight = height + base;\n    let modelHeightFloor = floorHeightMin + objectHeight;\n    return modelHeightFloor;\n  },\n  _flipMaterialSides: function (obj) {},\n  // to improve precision, normalize a series of vector3's to their collective center, and move the resultant mesh to that center\n  normalizeVertices(vertices) {\n    let geometry = new THREE.BufferGeometry();\n    let positions = [];\n    for (var j = 0; j < vertices.length; j++) {\n      let p = vertices[j];\n      positions.push(p.x, p.y, p.z);\n      positions.push(p.x, p.y, p.z);\n    }\n    geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n    geometry.computeBoundingSphere();\n    var center = geometry.boundingSphere.center;\n    var scaled = vertices.map(function (v3) {\n      var normalized = v3.sub(center);\n      return normalized;\n    });\n    return {\n      vertices: scaled,\n      position: center\n    };\n  },\n  //flatten an array of Vector3's into a shallow array of values in x-y-z order, for bufferGeometry\n  flattenVectors(vectors) {\n    var flattenedArray = [];\n    for (let vertex of vectors) {\n      flattenedArray.push(vertex.x, vertex.y, vertex.z);\n    }\n    return flattenedArray;\n  },\n  //convert a line/polygon to Vector3's\n\n  lnglatsToWorld: function (coords) {\n    var vector3 = coords.map(function (pt) {\n      var p = utils.projectToWorld(pt);\n      var v3 = new THREE.Vector3(p.x, p.y, p.z);\n      return v3;\n    });\n    return vector3;\n  },\n  extend: function (original, addition) {\n    for (let key in addition) original[key] = addition[key];\n  },\n  clone: function (original) {\n    var clone = {};\n    for (let key in original) clone[key] = original[key];\n    return clone;\n  },\n  clamp: function (n, min, max) {\n    return Math.min(max, Math.max(min, n));\n  },\n  // retrieve object parameters from an options object\n  types: {\n    rotation: function (r, currentRotation) {\n      //[jscastro] rotation default 0\n      if (!r) {\n        r = 0;\n      }\n      ;\n\n      // if number provided, rotate only in Z by that amount\n      if (typeof r === 'number') r = {\n        z: r\n      };\n      var degrees = this.applyDefault([r.x, r.y, r.z], currentRotation);\n      var radians = utils.radify(degrees);\n      return radians;\n    },\n    scale: function (s, currentScale) {\n      //[jscastro] scale default 1\n      if (!s) {\n        s = 1;\n      }\n      ;\n      if (typeof s === 'number') return s = [s, s, s];else return this.applyDefault([s.x, s.y, s.z], currentScale);\n    },\n    applyDefault: function (array, current) {\n      var output = array.map(function (item, index) {\n        item = item || current[index];\n        return item;\n      });\n      return output;\n    }\n  },\n  toDecimal: function (n, d) {\n    return Number(n.toFixed(d));\n  },\n  equal: function (obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    if (keys1.length == 0 && keys2.length == 0 && keys1 !== keys2) {\n      return false;\n    }\n    for (const key of keys1) {\n      const val1 = obj1[key];\n      const val2 = obj2[key];\n      const areObjects = this.isObject(val1) && this.isObject(val2);\n      if (areObjects && !equal(val1, val2) || !areObjects && val1 !== val2) {\n        return false;\n      }\n    }\n    return true;\n  },\n  isObject: function (object) {\n    return object != null && typeof object === 'object';\n  },\n  curveToLine: (curve, params) => {\n    let {\n      width,\n      color\n    } = params;\n    let geometry = new THREE.BufferGeometry().setFromPoints(curve.getPoints(100));\n    let material = new THREE.LineBasicMaterial({\n      color: color,\n      linewidth: width\n    });\n    let line = new THREE.Line(geometry, material);\n    return line;\n  },\n  curvesToLines: curves => {\n    var colors = [0xff0000, 0x1eff00, 0x2600ff];\n    var lines = curves.map((curve, i) => {\n      let params = {\n        width: 3,\n        color: colors[i] || 'purple'\n      };\n      let curveline = curveToLine(curve, params);\n      return curveline;\n    });\n    return lines;\n  },\n  _validate: function (userInputs, defaults) {\n    userInputs = userInputs || {};\n    var validatedOutput = {};\n    utils.extend(validatedOutput, userInputs);\n    for (let key of Object.keys(defaults)) {\n      if (userInputs[key] === undefined) {\n        //make sure required params are present\n        if (defaults[key] === null) {\n          console.error(key + ' is required');\n          return;\n        } else validatedOutput[key] = defaults[key];\n      } else validatedOutput[key] = userInputs[key];\n    }\n    return validatedOutput;\n  },\n  Validator: new validate(),\n  exposedMethods: ['projectToWorld', 'projectedUnitsPerMeter', 'extend', 'unprojectFromWorld']\n};\nmodule.exports = exports = utils;","map":{"version":3,"names":["THREE","require","Constants","validate","utils","prettyPrintMatrix","uglymatrix","s","quartet","console","log","map","num","toFixed","makePerspectiveMatrix","fovy","aspect","near","far","out","Matrix4","f","Math","tan","nf","newMatrix","elements","makeOrthographicMatrix","left","right","top","bottom","w","h","p","x","y","z","radify","deg","convert","degrees","PI","length","degree","degreeify","rad","radians","projectToWorld","coords","projected","MERCATOR_A","DEG2RAD","PROJECTION_WORLD_SIZE","push","pixelsPerMeter","projectedUnitsPerMeter","result","Vector3","latitude","abs","WORLD_SIZE","cos","EARTH_CIRCUMFERENCE","_circumferenceAtLatitude","mercatorZfromAltitude","altitude","lat","_scaleVerticesToMeters","centerLatLng","vertices","centerProjected","i","multiplyScalar","projectToScreen","unprojectFromScreen","pixel","unprojectFromWorld","worldUnits","unprojected","atan","exp","height","toScreenPosition","obj","camera","vector","widthHalf","renderer","context","canvas","width","heightHalf","updateMatrixWorld","setFromMatrixPosition","matrixWorld","project","getFeatureCenter","feature","model","level","center","longitude","coordinates","geometry","type","splice","forEach","c","getObjectHeightOnFloor","properties","floorHeightMin","levelHeight","base","base_height","min_height","objectHeight","modelHeightFloor","_flipMaterialSides","normalizeVertices","BufferGeometry","positions","j","setAttribute","BufferAttribute","Float32Array","computeBoundingSphere","boundingSphere","scaled","v3","normalized","sub","position","flattenVectors","vectors","flattenedArray","vertex","lnglatsToWorld","vector3","pt","extend","original","addition","key","clone","clamp","n","min","max","types","rotation","r","currentRotation","applyDefault","scale","currentScale","array","current","output","item","index","toDecimal","d","Number","equal","obj1","obj2","keys1","Object","keys","keys2","val1","val2","areObjects","isObject","object","curveToLine","curve","params","color","setFromPoints","getPoints","material","LineBasicMaterial","linewidth","line","Line","curvesToLines","curves","colors","lines","curveline","_validate","userInputs","defaults","validatedOutput","undefined","error","Validator","exposedMethods","module","exports"],"sources":["/Users/mihailbaleev/Documents/GitHub/lastochka_spraying/node_modules/threebox-plugin/src/utils/utils.js"],"sourcesContent":["var THREE = require(\"../three.js\");\r\nvar Constants = require(\"./constants.js\");\r\nvar validate = require(\"./validate.js\");\r\n\r\nvar utils = {\r\n\r\n\tprettyPrintMatrix: function (uglymatrix) {\r\n\t\tfor (var s = 0; s < 4; s++) {\r\n\t\t\tvar quartet = [uglymatrix[s],\r\n\t\t\tuglymatrix[s + 4],\r\n\t\t\tuglymatrix[s + 8],\r\n\t\t\tuglymatrix[s + 12]];\r\n\t\t\tconsole.log(quartet.map(function (num) { return num.toFixed(4) }))\r\n\t\t}\r\n\t},\r\n\r\n\tmakePerspectiveMatrix: function (fovy, aspect, near, far) {\r\n\r\n\t\tvar out = new THREE.Matrix4();\r\n\t\tvar f = 1.0 / Math.tan(fovy / 2),\r\n\t\t\tnf = 1 / (near - far);\r\n\r\n\t\tvar newMatrix = [\r\n\t\t\tf / aspect, 0, 0, 0,\r\n\t\t\t0, f, 0, 0,\r\n\t\t\t0, 0, (far + near) * nf, -1,\r\n\t\t\t0, 0, (2 * far * near) * nf, 0\r\n\t\t]\r\n\r\n\t\tout.elements = newMatrix\r\n\t\treturn out;\r\n\t},\r\n\r\n\t//[jscastro] new orthographic matrix calculations https://en.wikipedia.org/wiki/Orthographic_projection and validated with https://bit.ly/3rPvB9Y\r\n\tmakeOrthographicMatrix: function (left, right, top, bottom, near, far) {\r\n\t\tvar out = new THREE.Matrix4();\r\n\r\n\t\tconst w = 1.0 / (right - left);\r\n\t\tconst h = 1.0 / (top - bottom);\r\n\t\tconst p = 1.0 / (far - near);\r\n\r\n\t\tconst x = (right + left) * w;\r\n\t\tconst y = (top + bottom) * h;\r\n\t\tconst z = near * p;\r\n\r\n\t\tvar newMatrix = [\r\n\t\t\t2 * w, 0, 0, 0,\r\n\t\t\t0, 2 * h, 0, 0,\r\n\t\t\t0, 0, - 1 * p, 0,\r\n\t\t\t- x, -y, -z, 1\r\n\t\t]\r\n\r\n\t\tout.elements = newMatrix\r\n\t\treturn out;\r\n\t},\r\n\r\n\t//gimme radians\r\n\tradify: function (deg) {\r\n\r\n\t\tfunction convert(degrees) {\r\n\t\t\tdegrees = degrees || 0;\r\n\t\t\treturn Math.PI * 2 * degrees / 360\r\n\t\t}\r\n\r\n\t\tif (typeof deg === 'object') {\r\n\r\n\t\t\t//if [x,y,z] array of rotations\r\n\t\t\tif (deg.length > 0) {\r\n\t\t\t\treturn deg.map(function (degree) {\r\n\t\t\t\t\treturn convert(degree)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t// if {x: y: z:} rotation object\r\n\t\t\telse {\r\n\t\t\t\treturn [convert(deg.x), convert(deg.y), convert(deg.z)]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if just a number\r\n\t\telse return convert(deg)\r\n\t},\r\n\r\n\t//gimme degrees\r\n\tdegreeify: function (rad) {\r\n\t\tfunction convert(radians) {\r\n\t\t\tradians = radians || 0;\r\n\t\t\treturn radians * 360 / (Math.PI * 2)\r\n\t\t}\r\n\r\n\t\tif (typeof rad === 'object') {\r\n\t\t\treturn [convert(rad.x), convert(rad.y), convert(rad.z)]\r\n\t\t}\r\n\r\n\t\telse return convert(rad)\r\n\t},\r\n\r\n\tprojectToWorld: function (coords) {\r\n\r\n\t\t// Spherical mercator forward projection, re-scaling to WORLD_SIZE\r\n\r\n\t\tvar projected = [\r\n\t\t\t-Constants.MERCATOR_A * Constants.DEG2RAD * coords[0] * Constants.PROJECTION_WORLD_SIZE,\r\n\t\t\t-Constants.MERCATOR_A * Math.log(Math.tan((Math.PI * 0.25) + (0.5 * Constants.DEG2RAD * coords[1]))) * Constants.PROJECTION_WORLD_SIZE\r\n\t\t];\r\n\r\n\t\t//z dimension, defaulting to 0 if not provided\r\n\r\n\t\tif (!coords[2]) projected.push(0)\r\n\t\telse {\r\n\t\t\tvar pixelsPerMeter = this.projectedUnitsPerMeter(coords[1]);\r\n\t\t\tprojected.push(coords[2] * pixelsPerMeter);\r\n\t\t}\r\n\r\n\t\tvar result = new THREE.Vector3(projected[0], projected[1], projected[2]);\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\tprojectedUnitsPerMeter: function (latitude) {\r\n\t\treturn Math.abs(Constants.WORLD_SIZE / Math.cos(Constants.DEG2RAD * latitude) / Constants.EARTH_CIRCUMFERENCE);\r\n\t},\r\n\r\n\t_circumferenceAtLatitude: function (latitude) {\r\n\t\treturn Constants.EARTH_CIRCUMFERENCE * Math.cos(latitude * Math.PI / 180);\r\n\t},\r\n\r\n\tmercatorZfromAltitude: function (altitude, lat) {\r\n\t\treturn altitude / this._circumferenceAtLatitude(lat);\r\n\t},\r\n\r\n\t_scaleVerticesToMeters: function (centerLatLng, vertices) {\r\n\t\tvar pixelsPerMeter = this.projectedUnitsPerMeter(centerLatLng[1]);\r\n\t\tvar centerProjected = this.projectToWorld(centerLatLng);\r\n\r\n\t\tfor (var i = 0; i < vertices.length; i++) {\r\n\t\t\tvertices[i].multiplyScalar(pixelsPerMeter);\r\n\t\t}\r\n\r\n\t\treturn vertices;\r\n\t},\r\n\r\n\tprojectToScreen: function (coords) {\r\n\t\tconsole.log(\"WARNING: Projecting to screen coordinates is not yet implemented\");\r\n\t},\r\n\r\n\tunprojectFromScreen: function (pixel) {\r\n\t\tconsole.log(\"WARNING: unproject is not yet implemented\");\r\n\t},\r\n\r\n\t//world units to lnglat\r\n\tunprojectFromWorld: function (worldUnits) {\r\n\r\n\t\tvar unprojected = [\r\n\t\t\t-worldUnits.x / (Constants.MERCATOR_A * Constants.DEG2RAD * Constants.PROJECTION_WORLD_SIZE),\r\n\t\t\t2 * (Math.atan(Math.exp(worldUnits.y / (Constants.PROJECTION_WORLD_SIZE * (-Constants.MERCATOR_A)))) - Math.PI / 4) / Constants.DEG2RAD\r\n\t\t];\r\n\r\n\t\tvar pixelsPerMeter = this.projectedUnitsPerMeter(unprojected[1]);\r\n\r\n\t\t//z dimension\r\n\t\tvar height = worldUnits.z || 0;\r\n\t\tunprojected.push(height / pixelsPerMeter);\r\n\r\n\t\treturn unprojected;\r\n\t},\r\n\r\n\ttoScreenPosition: function (obj, camera) {\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\tvar widthHalf = 0.5 * renderer.context.canvas.width;\r\n\t\tvar heightHalf = 0.5 * renderer.context.canvas.height;\r\n\r\n\t\tobj.updateMatrixWorld();\r\n\t\tvector.setFromMatrixPosition(obj.matrixWorld);\r\n\t\tvector.project(camera);\r\n\r\n\t\tvector.x = (vector.x * widthHalf) + widthHalf;\r\n\t\tvector.y = - (vector.y * heightHalf) + heightHalf;\r\n\r\n\t\treturn {\r\n\t\t\tx: vector.x,\r\n\t\t\ty: vector.y\r\n\t\t};\r\n\r\n\t},\r\n\r\n\t//get the center point of a feature\r\n\tgetFeatureCenter: function getFeatureCenter(feature, model, level) {\r\n\t\tlet center = [];\r\n\t\tlet latitude = 0;\r\n\t\tlet longitude = 0;\r\n\t\tlet height = 0;\r\n\t\t//deep copy to avoid modifying the original array\r\n\t\tlet coordinates = [...feature.geometry.coordinates[0]];\r\n\t\tif (feature.geometry.type === \"Point\") {\r\n\t\t\tcenter = [...coordinates[0]];//deep copy\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//features in mapbox repeat the first coordinates at the end. We remove it.\r\n\t\t\tif (feature.geometry.type === \"MultiPolygon\") coordinates = coordinates[0];\r\n\t\t\tcoordinates.splice(-1, 1);\r\n\t\t\tcoordinates.forEach(function (c) {\r\n\t\t\t\tlatitude += c[0];\r\n\t\t\t\tlongitude += c[1];\r\n\t\t\t});\r\n\t\t\tcenter = [latitude / coordinates.length, longitude / coordinates.length];\r\n\t\t}\r\n\t\theight = this.getObjectHeightOnFloor(feature, model, level);\r\n\r\n\t\t(center.length < 3 ? center.push(height) : center[2] = height);\r\n\r\n\t\treturn center;\r\n\t},\r\n\r\n\tgetObjectHeightOnFloor: function (feature, obj, level = feature.properties.level || 0) {\r\n\t\tlet floorHeightMin = (level * (feature.properties.levelHeight || 0));\r\n\t\t//object height is modelSize.z + base_height or min_height configured for this object\r\n\t\tlet base = (feature.properties.base_height || feature.properties.min_height || 0);\r\n\t\t//let height = ((obj && obj.model) ? obj.modelSize.z : (feature.properties.height - base));\r\n\t\tlet height = ((obj && obj.model) ? 0 : (feature.properties.height - base));\r\n\t\tlet objectHeight = height + base;\r\n\t\tlet modelHeightFloor = floorHeightMin + objectHeight;\r\n\t\treturn modelHeightFloor;\r\n\t},\r\n\r\n\t_flipMaterialSides: function (obj) {\r\n\r\n\t},\r\n\r\n\t// to improve precision, normalize a series of vector3's to their collective center, and move the resultant mesh to that center\r\n\tnormalizeVertices(vertices) {\r\n\r\n\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\tlet positions = [];\r\n\r\n\t\tfor (var j = 0; j < vertices.length; j++) {\r\n\t\t\tlet p = vertices[j];\r\n\t\t\tpositions.push(p.x, p.y, p.z);\r\n\t\t\tpositions.push(p.x, p.y, p.z);\r\n\t\t}\r\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\r\n\t\tgeometry.computeBoundingSphere();\r\n\t\tvar center = geometry.boundingSphere.center;\r\n\r\n\t\tvar scaled = vertices.map(function (v3) {\r\n\t\t\tvar normalized = v3.sub(center);\r\n\t\t\treturn normalized;\r\n\t\t});\r\n\r\n\t\treturn { vertices: scaled, position: center }\r\n\t},\r\n\r\n\t//flatten an array of Vector3's into a shallow array of values in x-y-z order, for bufferGeometry\r\n\tflattenVectors(vectors) {\r\n\t\tvar flattenedArray = [];\r\n\t\tfor (let vertex of vectors) {\r\n\t\t\tflattenedArray.push(vertex.x, vertex.y, vertex.z);\r\n\t\t}\r\n\t\treturn flattenedArray\r\n\t},\r\n\r\n\t//convert a line/polygon to Vector3's\r\n\r\n\tlnglatsToWorld: function (coords) {\r\n\r\n\t\tvar vector3 = coords.map(\r\n\t\t\tfunction (pt) {\r\n\t\t\t\tvar p = utils.projectToWorld(pt);\r\n\t\t\t\tvar v3 = new THREE.Vector3(p.x, p.y, p.z);\r\n\t\t\t\treturn v3\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn vector3\r\n\t},\r\n\r\n\textend: function (original, addition) {\r\n\t\tfor (let key in addition) original[key] = addition[key];\r\n\t},\r\n\r\n\tclone: function (original) {\r\n\t\tvar clone = {};\r\n\t\tfor (let key in original) clone[key] = original[key];\r\n\t\treturn clone;\r\n\t},\r\n\r\n\tclamp: function(n, min, max) {\r\n\t\treturn Math.min(max, Math.max(min, n));\r\n\t},\r\n\r\n\t// retrieve object parameters from an options object\r\n\ttypes: {\r\n\r\n\t\trotation: function (r, currentRotation) {\r\n\r\n\t\t\t//[jscastro] rotation default 0\r\n\t\t\tif (!r) { r = 0; };\r\n\r\n\t\t\t// if number provided, rotate only in Z by that amount\r\n\t\t\tif (typeof r === 'number') r = { z: r };\r\n\r\n\t\t\tvar degrees = this.applyDefault([r.x, r.y, r.z], currentRotation);\r\n\t\t\tvar radians = utils.radify(degrees);\r\n\t\t\treturn radians;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function (s, currentScale) {\r\n\t\t\t//[jscastro] scale default 1\r\n\t\t\tif (!s) { s = 1; };\r\n\t\t\tif (typeof s === 'number') return s = [s, s, s];\r\n\t\t\telse return this.applyDefault([s.x, s.y, s.z], currentScale);\r\n\t\t},\r\n\r\n\t\tapplyDefault: function (array, current) {\r\n\r\n\t\t\tvar output = array.map(function (item, index) {\r\n\t\t\t\titem = item || current[index];\r\n\t\t\t\treturn item\r\n\t\t\t})\r\n\r\n\t\t\treturn output\r\n\t\t},\r\n\r\n\t},\r\n\r\n\ttoDecimal: function (n, d) {\r\n\t\treturn Number(n.toFixed(d));\r\n\t},\r\n\r\n\tequal: function (obj1, obj2) {\r\n\t\tconst keys1 = Object.keys(obj1);\r\n\t\tconst keys2 = Object.keys(obj2);\r\n\r\n\t\tif (keys1.length !== keys2.length) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (keys1.length == 0 && keys2.length == 0 && keys1 !== keys2) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfor (const key of keys1) {\r\n\t\t\tconst val1 = obj1[key];\r\n\t\t\tconst val2 = obj2[key];\r\n\t\t\tconst areObjects = this.isObject(val1) && this.isObject(val2);\r\n\t\t\tif (\r\n\t\t\t\tareObjects && !equal(val1, val2) ||\r\n\t\t\t\t!areObjects && val1 !== val2\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\tisObject: function (object) {\r\n\t\treturn object != null && typeof object === 'object';\r\n\t},\r\n\r\n\tcurveToLine: (curve, params) => {\r\n\t\tlet { width, color } = params;\r\n\t\tlet geometry = new THREE.BufferGeometry().setFromPoints(\r\n\t\t\tcurve.getPoints(100)\r\n\t\t);\r\n\r\n\t\tlet material = new THREE.LineBasicMaterial({\r\n\t\t\tcolor: color,\r\n\t\t\tlinewidth: width,\r\n\t\t});\r\n\r\n\t\tlet line = new THREE.Line(geometry, material);\r\n\r\n\t\treturn line;\r\n\t},\r\n\r\n\tcurvesToLines: (curves) => {\r\n\t\tvar colors = [0xff0000, 0x1eff00, 0x2600ff];\r\n\t\tvar lines = curves.map((curve, i) => {\r\n\t\t\tlet params = {\r\n\t\t\t\twidth: 3,\r\n\t\t\t\tcolor: colors[i] || 'purple',\r\n\t\t\t};\r\n\t\t\tlet curveline = curveToLine(curve, params);\r\n\r\n\t\t\treturn curveline;\r\n\t\t});\r\n\t\treturn lines;\r\n\t},\r\n\r\n\t_validate: function (userInputs, defaults) {\r\n\r\n\t\tuserInputs = userInputs || {};\r\n\t\tvar validatedOutput = {};\r\n\t\tutils.extend(validatedOutput, userInputs);\r\n\r\n\t\tfor (let key of Object.keys(defaults)) {\r\n\r\n\t\t\tif (userInputs[key] === undefined) {\r\n\t\t\t\t//make sure required params are present\r\n\t\t\t\tif (defaults[key] === null) {\r\n\t\t\t\t\tconsole.error(key + ' is required')\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse validatedOutput[key] = defaults[key]\r\n\r\n\t\t\t}\r\n\r\n\t\t\telse validatedOutput[key] = userInputs[key]\r\n\t\t}\r\n\r\n\t\treturn validatedOutput\r\n\t},\r\n\tValidator: new validate(),\r\n\texposedMethods: ['projectToWorld', 'projectedUnitsPerMeter', 'extend', 'unprojectFromWorld']\r\n}\r\n\r\nmodule.exports = exports = utils"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AAClC,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAe,CAAC;AAEvC,IAAIG,KAAK,GAAG;EAEXC,iBAAiB,EAAE,SAAAA,CAAUC,UAAU,EAAE;IACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAIC,OAAO,GAAG,CAACF,UAAU,CAACC,CAAC,CAAC,EAC5BD,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC,EACjBD,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC,EACjBD,UAAU,CAACC,CAAC,GAAG,EAAE,CAAC,CAAC;MACnBE,OAAO,CAACC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,UAAUC,GAAG,EAAE;QAAE,OAAOA,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC,CAAC;IACnE;EACD,CAAC;EAEDC,qBAAqB,EAAE,SAAAA,CAAUC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAE;IAEzD,IAAIC,GAAG,GAAG,IAAInB,KAAK,CAACoB,OAAO,CAAC,CAAC;IAC7B,IAAIC,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACR,IAAI,GAAG,CAAC,CAAC;MAC/BS,EAAE,GAAG,CAAC,IAAIP,IAAI,GAAGC,GAAG,CAAC;IAEtB,IAAIO,SAAS,GAAG,CACfJ,CAAC,GAAGL,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACnB,CAAC,EAAEK,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAACH,GAAG,GAAGD,IAAI,IAAIO,EAAE,EAAE,CAAC,CAAC,EAC3B,CAAC,EAAE,CAAC,EAAG,CAAC,GAAGN,GAAG,GAAGD,IAAI,GAAIO,EAAE,EAAE,CAAC,CAC9B;IAEDL,GAAG,CAACO,QAAQ,GAAGD,SAAS;IACxB,OAAON,GAAG;EACX,CAAC;EAED;EACAQ,sBAAsB,EAAE,SAAAA,CAAUC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEd,IAAI,EAAEC,GAAG,EAAE;IACtE,IAAIC,GAAG,GAAG,IAAInB,KAAK,CAACoB,OAAO,CAAC,CAAC;IAE7B,MAAMY,CAAC,GAAG,GAAG,IAAIH,KAAK,GAAGD,IAAI,CAAC;IAC9B,MAAMK,CAAC,GAAG,GAAG,IAAIH,GAAG,GAAGC,MAAM,CAAC;IAC9B,MAAMG,CAAC,GAAG,GAAG,IAAIhB,GAAG,GAAGD,IAAI,CAAC;IAE5B,MAAMkB,CAAC,GAAG,CAACN,KAAK,GAAGD,IAAI,IAAII,CAAC;IAC5B,MAAMI,CAAC,GAAG,CAACN,GAAG,GAAGC,MAAM,IAAIE,CAAC;IAC5B,MAAMI,CAAC,GAAGpB,IAAI,GAAGiB,CAAC;IAElB,IAAIT,SAAS,GAAG,CACf,CAAC,GAAGO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACd,CAAC,EAAE,CAAC,GAAGC,CAAC,EAAE,CAAC,EAAE,CAAC,EACd,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,GAAGC,CAAC,EAAE,CAAC,EAChB,CAAEC,CAAC,EAAE,CAACC,CAAC,EAAE,CAACC,CAAC,EAAE,CAAC,CACd;IAEDlB,GAAG,CAACO,QAAQ,GAAGD,SAAS;IACxB,OAAON,GAAG;EACX,CAAC;EAED;EACAmB,MAAM,EAAE,SAAAA,CAAUC,GAAG,EAAE;IAEtB,SAASC,OAAOA,CAACC,OAAO,EAAE;MACzBA,OAAO,GAAGA,OAAO,IAAI,CAAC;MACtB,OAAOnB,IAAI,CAACoB,EAAE,GAAG,CAAC,GAAGD,OAAO,GAAG,GAAG;IACnC;IAEA,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MAE5B;MACA,IAAIA,GAAG,CAACI,MAAM,GAAG,CAAC,EAAE;QACnB,OAAOJ,GAAG,CAAC5B,GAAG,CAAC,UAAUiC,MAAM,EAAE;UAChC,OAAOJ,OAAO,CAACI,MAAM,CAAC;QACvB,CAAC,CAAC;MACH;;MAEA;MAAA,KACK;QACJ,OAAO,CAACJ,OAAO,CAACD,GAAG,CAACJ,CAAC,CAAC,EAAEK,OAAO,CAACD,GAAG,CAACH,CAAC,CAAC,EAAEI,OAAO,CAACD,GAAG,CAACF,CAAC,CAAC,CAAC;MACxD;IACD;;IAEA;IAAA,KACK,OAAOG,OAAO,CAACD,GAAG,CAAC;EACzB,CAAC;EAED;EACAM,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAE;IACzB,SAASN,OAAOA,CAACO,OAAO,EAAE;MACzBA,OAAO,GAAGA,OAAO,IAAI,CAAC;MACtB,OAAOA,OAAO,GAAG,GAAG,IAAIzB,IAAI,CAACoB,EAAE,GAAG,CAAC,CAAC;IACrC;IAEA,IAAI,OAAOI,GAAG,KAAK,QAAQ,EAAE;MAC5B,OAAO,CAACN,OAAO,CAACM,GAAG,CAACX,CAAC,CAAC,EAAEK,OAAO,CAACM,GAAG,CAACV,CAAC,CAAC,EAAEI,OAAO,CAACM,GAAG,CAACT,CAAC,CAAC,CAAC;IACxD,CAAC,MAEI,OAAOG,OAAO,CAACM,GAAG,CAAC;EACzB,CAAC;EAEDE,cAAc,EAAE,SAAAA,CAAUC,MAAM,EAAE;IAEjC;;IAEA,IAAIC,SAAS,GAAG,CACf,CAAChD,SAAS,CAACiD,UAAU,GAAGjD,SAAS,CAACkD,OAAO,GAAGH,MAAM,CAAC,CAAC,CAAC,GAAG/C,SAAS,CAACmD,qBAAqB,EACvF,CAACnD,SAAS,CAACiD,UAAU,GAAG7B,IAAI,CAACZ,GAAG,CAACY,IAAI,CAACC,GAAG,CAAED,IAAI,CAACoB,EAAE,GAAG,IAAI,GAAK,GAAG,GAAGxC,SAAS,CAACkD,OAAO,GAAGH,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,GAAG/C,SAAS,CAACmD,qBAAqB,CACtI;;IAED;;IAEA,IAAI,CAACJ,MAAM,CAAC,CAAC,CAAC,EAAEC,SAAS,CAACI,IAAI,CAAC,CAAC,CAAC,MAC5B;MACJ,IAAIC,cAAc,GAAG,IAAI,CAACC,sBAAsB,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC;MAC3DC,SAAS,CAACI,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC,GAAGM,cAAc,CAAC;IAC3C;IAEA,IAAIE,MAAM,GAAG,IAAIzD,KAAK,CAAC0D,OAAO,CAACR,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;IAExE,OAAOO,MAAM;EACd,CAAC;EAEDD,sBAAsB,EAAE,SAAAA,CAAUG,QAAQ,EAAE;IAC3C,OAAOrC,IAAI,CAACsC,GAAG,CAAC1D,SAAS,CAAC2D,UAAU,GAAGvC,IAAI,CAACwC,GAAG,CAAC5D,SAAS,CAACkD,OAAO,GAAGO,QAAQ,CAAC,GAAGzD,SAAS,CAAC6D,mBAAmB,CAAC;EAC/G,CAAC;EAEDC,wBAAwB,EAAE,SAAAA,CAAUL,QAAQ,EAAE;IAC7C,OAAOzD,SAAS,CAAC6D,mBAAmB,GAAGzC,IAAI,CAACwC,GAAG,CAACH,QAAQ,GAAGrC,IAAI,CAACoB,EAAE,GAAG,GAAG,CAAC;EAC1E,CAAC;EAEDuB,qBAAqB,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,GAAG,EAAE;IAC/C,OAAOD,QAAQ,GAAG,IAAI,CAACF,wBAAwB,CAACG,GAAG,CAAC;EACrD,CAAC;EAEDC,sBAAsB,EAAE,SAAAA,CAAUC,YAAY,EAAEC,QAAQ,EAAE;IACzD,IAAIf,cAAc,GAAG,IAAI,CAACC,sBAAsB,CAACa,YAAY,CAAC,CAAC,CAAC,CAAC;IACjE,IAAIE,eAAe,GAAG,IAAI,CAACvB,cAAc,CAACqB,YAAY,CAAC;IAEvD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAAC3B,MAAM,EAAE6B,CAAC,EAAE,EAAE;MACzCF,QAAQ,CAACE,CAAC,CAAC,CAACC,cAAc,CAAClB,cAAc,CAAC;IAC3C;IAEA,OAAOe,QAAQ;EAChB,CAAC;EAEDI,eAAe,EAAE,SAAAA,CAAUzB,MAAM,EAAE;IAClCxC,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;EAChF,CAAC;EAEDiE,mBAAmB,EAAE,SAAAA,CAAUC,KAAK,EAAE;IACrCnE,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EACzD,CAAC;EAED;EACAmE,kBAAkB,EAAE,SAAAA,CAAUC,UAAU,EAAE;IAEzC,IAAIC,WAAW,GAAG,CACjB,CAACD,UAAU,CAAC3C,CAAC,IAAIjC,SAAS,CAACiD,UAAU,GAAGjD,SAAS,CAACkD,OAAO,GAAGlD,SAAS,CAACmD,qBAAqB,CAAC,EAC5F,CAAC,IAAI/B,IAAI,CAAC0D,IAAI,CAAC1D,IAAI,CAAC2D,GAAG,CAACH,UAAU,CAAC1C,CAAC,IAAIlC,SAAS,CAACmD,qBAAqB,GAAI,CAACnD,SAAS,CAACiD,UAAW,CAAC,CAAC,CAAC,GAAG7B,IAAI,CAACoB,EAAE,GAAG,CAAC,CAAC,GAAGxC,SAAS,CAACkD,OAAO,CACvI;IAED,IAAIG,cAAc,GAAG,IAAI,CAACC,sBAAsB,CAACuB,WAAW,CAAC,CAAC,CAAC,CAAC;;IAEhE;IACA,IAAIG,MAAM,GAAGJ,UAAU,CAACzC,CAAC,IAAI,CAAC;IAC9B0C,WAAW,CAACzB,IAAI,CAAC4B,MAAM,GAAG3B,cAAc,CAAC;IAEzC,OAAOwB,WAAW;EACnB,CAAC;EAEDI,gBAAgB,EAAE,SAAAA,CAAUC,GAAG,EAAEC,MAAM,EAAE;IACxC,IAAIC,MAAM,GAAG,IAAItF,KAAK,CAAC0D,OAAO,CAAC,CAAC;IAEhC,IAAI6B,SAAS,GAAG,GAAG,GAAGC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,KAAK;IACnD,IAAIC,UAAU,GAAG,GAAG,GAAGJ,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACR,MAAM;IAErDE,GAAG,CAACS,iBAAiB,CAAC,CAAC;IACvBP,MAAM,CAACQ,qBAAqB,CAACV,GAAG,CAACW,WAAW,CAAC;IAC7CT,MAAM,CAACU,OAAO,CAACX,MAAM,CAAC;IAEtBC,MAAM,CAACnD,CAAC,GAAImD,MAAM,CAACnD,CAAC,GAAGoD,SAAS,GAAIA,SAAS;IAC7CD,MAAM,CAAClD,CAAC,GAAG,EAAGkD,MAAM,CAAClD,CAAC,GAAGwD,UAAU,CAAC,GAAGA,UAAU;IAEjD,OAAO;MACNzD,CAAC,EAAEmD,MAAM,CAACnD,CAAC;MACXC,CAAC,EAAEkD,MAAM,CAAClD;IACX,CAAC;EAEF,CAAC;EAED;EACA6D,gBAAgB,EAAE,SAASA,gBAAgBA,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAClE,IAAIC,MAAM,GAAG,EAAE;IACf,IAAI1C,QAAQ,GAAG,CAAC;IAChB,IAAI2C,SAAS,GAAG,CAAC;IACjB,IAAIpB,MAAM,GAAG,CAAC;IACd;IACA,IAAIqB,WAAW,GAAG,CAAC,GAAGL,OAAO,CAACM,QAAQ,CAACD,WAAW,CAAC,CAAC,CAAC,CAAC;IACtD,IAAIL,OAAO,CAACM,QAAQ,CAACC,IAAI,KAAK,OAAO,EAAE;MACtCJ,MAAM,GAAG,CAAC,GAAGE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,MACI;MACJ;MACA,IAAIL,OAAO,CAACM,QAAQ,CAACC,IAAI,KAAK,cAAc,EAAEF,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC;MAC1EA,WAAW,CAACG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACzBH,WAAW,CAACI,OAAO,CAAC,UAAUC,CAAC,EAAE;QAChCjD,QAAQ,IAAIiD,CAAC,CAAC,CAAC,CAAC;QAChBN,SAAS,IAAIM,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC;MACFP,MAAM,GAAG,CAAC1C,QAAQ,GAAG4C,WAAW,CAAC5D,MAAM,EAAE2D,SAAS,GAAGC,WAAW,CAAC5D,MAAM,CAAC;IACzE;IACAuC,MAAM,GAAG,IAAI,CAAC2B,sBAAsB,CAACX,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;IAE1DC,MAAM,CAAC1D,MAAM,GAAG,CAAC,GAAG0D,MAAM,CAAC/C,IAAI,CAAC4B,MAAM,CAAC,GAAGmB,MAAM,CAAC,CAAC,CAAC,GAAGnB,MAAM;IAE7D,OAAOmB,MAAM;EACd,CAAC;EAEDQ,sBAAsB,EAAE,SAAAA,CAAUX,OAAO,EAAEd,GAAG,EAAEgB,KAAK,GAAGF,OAAO,CAACY,UAAU,CAACV,KAAK,IAAI,CAAC,EAAE;IACtF,IAAIW,cAAc,GAAIX,KAAK,IAAIF,OAAO,CAACY,UAAU,CAACE,WAAW,IAAI,CAAC,CAAE;IACpE;IACA,IAAIC,IAAI,GAAIf,OAAO,CAACY,UAAU,CAACI,WAAW,IAAIhB,OAAO,CAACY,UAAU,CAACK,UAAU,IAAI,CAAE;IACjF;IACA,IAAIjC,MAAM,GAAKE,GAAG,IAAIA,GAAG,CAACe,KAAK,GAAI,CAAC,GAAID,OAAO,CAACY,UAAU,CAAC5B,MAAM,GAAG+B,IAAM;IAC1E,IAAIG,YAAY,GAAGlC,MAAM,GAAG+B,IAAI;IAChC,IAAII,gBAAgB,GAAGN,cAAc,GAAGK,YAAY;IACpD,OAAOC,gBAAgB;EACxB,CAAC;EAEDC,kBAAkB,EAAE,SAAAA,CAAUlC,GAAG,EAAE,CAEnC,CAAC;EAED;EACAmC,iBAAiBA,CAACjD,QAAQ,EAAE;IAE3B,IAAIkC,QAAQ,GAAG,IAAIxG,KAAK,CAACwH,cAAc,CAAC,CAAC;IACzC,IAAIC,SAAS,GAAG,EAAE;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpD,QAAQ,CAAC3B,MAAM,EAAE+E,CAAC,EAAE,EAAE;MACzC,IAAIxF,CAAC,GAAGoC,QAAQ,CAACoD,CAAC,CAAC;MACnBD,SAAS,CAACnE,IAAI,CAACpB,CAAC,CAACC,CAAC,EAAED,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC;MAC7BoF,SAAS,CAACnE,IAAI,CAACpB,CAAC,CAACC,CAAC,EAAED,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC;IAC9B;IACAmE,QAAQ,CAACmB,YAAY,CAAC,UAAU,EAAE,IAAI3H,KAAK,CAAC4H,eAAe,CAAC,IAAIC,YAAY,CAACJ,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5FjB,QAAQ,CAACsB,qBAAqB,CAAC,CAAC;IAChC,IAAIzB,MAAM,GAAGG,QAAQ,CAACuB,cAAc,CAAC1B,MAAM;IAE3C,IAAI2B,MAAM,GAAG1D,QAAQ,CAAC3D,GAAG,CAAC,UAAUsH,EAAE,EAAE;MACvC,IAAIC,UAAU,GAAGD,EAAE,CAACE,GAAG,CAAC9B,MAAM,CAAC;MAC/B,OAAO6B,UAAU;IAClB,CAAC,CAAC;IAEF,OAAO;MAAE5D,QAAQ,EAAE0D,MAAM;MAAEI,QAAQ,EAAE/B;IAAO,CAAC;EAC9C,CAAC;EAED;EACAgC,cAAcA,CAACC,OAAO,EAAE;IACvB,IAAIC,cAAc,GAAG,EAAE;IACvB,KAAK,IAAIC,MAAM,IAAIF,OAAO,EAAE;MAC3BC,cAAc,CAACjF,IAAI,CAACkF,MAAM,CAACrG,CAAC,EAAEqG,MAAM,CAACpG,CAAC,EAAEoG,MAAM,CAACnG,CAAC,CAAC;IAClD;IACA,OAAOkG,cAAc;EACtB,CAAC;EAED;;EAEAE,cAAc,EAAE,SAAAA,CAAUxF,MAAM,EAAE;IAEjC,IAAIyF,OAAO,GAAGzF,MAAM,CAACtC,GAAG,CACvB,UAAUgI,EAAE,EAAE;MACb,IAAIzG,CAAC,GAAG9B,KAAK,CAAC4C,cAAc,CAAC2F,EAAE,CAAC;MAChC,IAAIV,EAAE,GAAG,IAAIjI,KAAK,CAAC0D,OAAO,CAACxB,CAAC,CAACC,CAAC,EAAED,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC;MACzC,OAAO4F,EAAE;IACV,CACD,CAAC;IAED,OAAOS,OAAO;EACf,CAAC;EAEDE,MAAM,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,QAAQ,EAAE;IACrC,KAAK,IAAIC,GAAG,IAAID,QAAQ,EAAED,QAAQ,CAACE,GAAG,CAAC,GAAGD,QAAQ,CAACC,GAAG,CAAC;EACxD,CAAC;EAEDC,KAAK,EAAE,SAAAA,CAAUH,QAAQ,EAAE;IAC1B,IAAIG,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,IAAID,GAAG,IAAIF,QAAQ,EAAEG,KAAK,CAACD,GAAG,CAAC,GAAGF,QAAQ,CAACE,GAAG,CAAC;IACpD,OAAOC,KAAK;EACb,CAAC;EAEDC,KAAK,EAAE,SAAAA,CAASC,CAAC,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAC5B,OAAO9H,IAAI,CAAC6H,GAAG,CAACC,GAAG,EAAE9H,IAAI,CAAC8H,GAAG,CAACD,GAAG,EAAED,CAAC,CAAC,CAAC;EACvC,CAAC;EAED;EACAG,KAAK,EAAE;IAENC,QAAQ,EAAE,SAAAA,CAAUC,CAAC,EAAEC,eAAe,EAAE;MAEvC;MACA,IAAI,CAACD,CAAC,EAAE;QAAEA,CAAC,GAAG,CAAC;MAAE;MAAC;;MAElB;MACA,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAEA,CAAC,GAAG;QAAElH,CAAC,EAAEkH;MAAE,CAAC;MAEvC,IAAI9G,OAAO,GAAG,IAAI,CAACgH,YAAY,CAAC,CAACF,CAAC,CAACpH,CAAC,EAAEoH,CAAC,CAACnH,CAAC,EAAEmH,CAAC,CAAClH,CAAC,CAAC,EAAEmH,eAAe,CAAC;MACjE,IAAIzG,OAAO,GAAG3C,KAAK,CAACkC,MAAM,CAACG,OAAO,CAAC;MACnC,OAAOM,OAAO;IAEf,CAAC;IAED2G,KAAK,EAAE,SAAAA,CAAUnJ,CAAC,EAAEoJ,YAAY,EAAE;MACjC;MACA,IAAI,CAACpJ,CAAC,EAAE;QAAEA,CAAC,GAAG,CAAC;MAAE;MAAC;MAClB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE,OAAOA,CAAC,GAAG,CAACA,CAAC,EAAEA,CAAC,EAAEA,CAAC,CAAC,CAAC,KAC3C,OAAO,IAAI,CAACkJ,YAAY,CAAC,CAAClJ,CAAC,CAAC4B,CAAC,EAAE5B,CAAC,CAAC6B,CAAC,EAAE7B,CAAC,CAAC8B,CAAC,CAAC,EAAEsH,YAAY,CAAC;IAC7D,CAAC;IAEDF,YAAY,EAAE,SAAAA,CAAUG,KAAK,EAAEC,OAAO,EAAE;MAEvC,IAAIC,MAAM,GAAGF,KAAK,CAACjJ,GAAG,CAAC,UAAUoJ,IAAI,EAAEC,KAAK,EAAE;QAC7CD,IAAI,GAAGA,IAAI,IAAIF,OAAO,CAACG,KAAK,CAAC;QAC7B,OAAOD,IAAI;MACZ,CAAC,CAAC;MAEF,OAAOD,MAAM;IACd;EAED,CAAC;EAEDG,SAAS,EAAE,SAAAA,CAAUf,CAAC,EAAEgB,CAAC,EAAE;IAC1B,OAAOC,MAAM,CAACjB,CAAC,CAACrI,OAAO,CAACqJ,CAAC,CAAC,CAAC;EAC5B,CAAC;EAEDE,KAAK,EAAE,SAAAA,CAAUC,IAAI,EAAEC,IAAI,EAAE;IAC5B,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC;IAC/B,MAAMK,KAAK,GAAGF,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC;IAE/B,IAAIC,KAAK,CAAC5H,MAAM,KAAK+H,KAAK,CAAC/H,MAAM,EAAE;MAClC,OAAO,KAAK;IACb;IACA,IAAI4H,KAAK,CAAC5H,MAAM,IAAI,CAAC,IAAI+H,KAAK,CAAC/H,MAAM,IAAI,CAAC,IAAI4H,KAAK,KAAKG,KAAK,EAAE;MAC9D,OAAO,KAAK;IACb;IAEA,KAAK,MAAM3B,GAAG,IAAIwB,KAAK,EAAE;MACxB,MAAMI,IAAI,GAAGN,IAAI,CAACtB,GAAG,CAAC;MACtB,MAAM6B,IAAI,GAAGN,IAAI,CAACvB,GAAG,CAAC;MACtB,MAAM8B,UAAU,GAAG,IAAI,CAACC,QAAQ,CAACH,IAAI,CAAC,IAAI,IAAI,CAACG,QAAQ,CAACF,IAAI,CAAC;MAC7D,IACCC,UAAU,IAAI,CAACT,KAAK,CAACO,IAAI,EAAEC,IAAI,CAAC,IAChC,CAACC,UAAU,IAAIF,IAAI,KAAKC,IAAI,EAC3B;QACD,OAAO,KAAK;MACb;IACD;IAEA,OAAO,IAAI;EACZ,CAAC;EAEDE,QAAQ,EAAE,SAAAA,CAAUC,MAAM,EAAE;IAC3B,OAAOA,MAAM,IAAI,IAAI,IAAI,OAAOA,MAAM,KAAK,QAAQ;EACpD,CAAC;EAEDC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;IAC/B,IAAI;MAAEvF,KAAK;MAAEwF;IAAM,CAAC,GAAGD,MAAM;IAC7B,IAAI1E,QAAQ,GAAG,IAAIxG,KAAK,CAACwH,cAAc,CAAC,CAAC,CAAC4D,aAAa,CACtDH,KAAK,CAACI,SAAS,CAAC,GAAG,CACpB,CAAC;IAED,IAAIC,QAAQ,GAAG,IAAItL,KAAK,CAACuL,iBAAiB,CAAC;MAC1CJ,KAAK,EAAEA,KAAK;MACZK,SAAS,EAAE7F;IACZ,CAAC,CAAC;IAEF,IAAI8F,IAAI,GAAG,IAAIzL,KAAK,CAAC0L,IAAI,CAAClF,QAAQ,EAAE8E,QAAQ,CAAC;IAE7C,OAAOG,IAAI;EACZ,CAAC;EAEDE,aAAa,EAAGC,MAAM,IAAK;IAC1B,IAAIC,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAC3C,IAAIC,KAAK,GAAGF,MAAM,CAACjL,GAAG,CAAC,CAACsK,KAAK,EAAEzG,CAAC,KAAK;MACpC,IAAI0G,MAAM,GAAG;QACZvF,KAAK,EAAE,CAAC;QACRwF,KAAK,EAAEU,MAAM,CAACrH,CAAC,CAAC,IAAI;MACrB,CAAC;MACD,IAAIuH,SAAS,GAAGf,WAAW,CAACC,KAAK,EAAEC,MAAM,CAAC;MAE1C,OAAOa,SAAS;IACjB,CAAC,CAAC;IACF,OAAOD,KAAK;EACb,CAAC;EAEDE,SAAS,EAAE,SAAAA,CAAUC,UAAU,EAAEC,QAAQ,EAAE;IAE1CD,UAAU,GAAGA,UAAU,IAAI,CAAC,CAAC;IAC7B,IAAIE,eAAe,GAAG,CAAC,CAAC;IACxB/L,KAAK,CAACwI,MAAM,CAACuD,eAAe,EAAEF,UAAU,CAAC;IAEzC,KAAK,IAAIlD,GAAG,IAAIyB,MAAM,CAACC,IAAI,CAACyB,QAAQ,CAAC,EAAE;MAEtC,IAAID,UAAU,CAAClD,GAAG,CAAC,KAAKqD,SAAS,EAAE;QAClC;QACA,IAAIF,QAAQ,CAACnD,GAAG,CAAC,KAAK,IAAI,EAAE;UAC3BtI,OAAO,CAAC4L,KAAK,CAACtD,GAAG,GAAG,cAAc,CAAC;UACnC;QACD,CAAC,MAEIoD,eAAe,CAACpD,GAAG,CAAC,GAAGmD,QAAQ,CAACnD,GAAG,CAAC;MAE1C,CAAC,MAEIoD,eAAe,CAACpD,GAAG,CAAC,GAAGkD,UAAU,CAAClD,GAAG,CAAC;IAC5C;IAEA,OAAOoD,eAAe;EACvB,CAAC;EACDG,SAAS,EAAE,IAAInM,QAAQ,CAAC,CAAC;EACzBoM,cAAc,EAAE,CAAC,gBAAgB,EAAE,wBAAwB,EAAE,QAAQ,EAAE,oBAAoB;AAC5F,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGA,OAAO,GAAGrM,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}