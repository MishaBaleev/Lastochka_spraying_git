{"ast":null,"code":"import takeoff_marker from \"./img/takeoff_marker.png\";\nimport point_marker from \"./img/point_marker.png\";\nimport icon_center from \"./img/icon_center.png\";\nimport mapboxgl from 'mapbox-gl';\nimport { SprayManager3d } from \"./manager3D\";\nfunction rotateFigureCenter(cords, center, phi) {\n  phi = phi * Math.PI / 180;\n  let rotatedFigure = [];\n  for (let pair of cords) {\n    let x = pair[0] - center[0];\n    let y = pair[1] - center[1];\n    let x_rot = x * Math.cos(phi) - y * Math.sin(phi);\n    let y_rot = x * Math.sin(phi) + y * Math.cos(phi);\n    rotatedFigure.push([x_rot + center[0], y_rot + center[1]]);\n  }\n  return rotatedFigure;\n}\nfunction addTurnaroundDistance(cords, distance, direction) {\n  let turnaround_distance_y = getGeoCordsFromMeters(distance, cords[1]);\n  let cortej = [];\n  if (direction == true) {\n    cortej = [cords[0], cords[1] + turnaround_distance_y];\n  } else {\n    cortej = [cords[0], cords[1] - turnaround_distance_y];\n  }\n  return cortej;\n}\nfunction getProjective(cords) {\n  let x = cords.map(x => x[0]);\n  let y = cords.map(x => x[1]);\n  let x_projection = {\n    min: 0,\n    max: 0,\n    pr: 0\n  };\n  let y_projection = {\n    min: 0,\n    max: 0,\n    pr: 0\n  };\n  x_projection.min = Math.min(...x);\n  x_projection.max = Math.max(...x);\n  x_projection.pr = x_projection.max - x_projection.min;\n  y_projection.min = Math.min(...y);\n  y_projection.max = Math.max(...y);\n  y_projection.pr = y_projection.max - y_projection.min;\n  return {\n    x_pr: x_projection,\n    y_pr: y_projection\n  };\n}\nfunction getGeoCordsFromMeters(m, min_lng) {\n  let step = m / 1000;\n  const km_ekv = 40075.696 / 360;\n  let step_deg = step / (km_ekv * Math.cos(Math.PI * min_lng / 180));\n  return step_deg;\n}\nexport class MapManager {\n  constructor(map, manager3D, update_modal_message, default_) {\n    this.map = map;\n    this.manager3D = new SprayManager3d(manager3D);\n    this.translate_cursor = false;\n    this.start_marker = null;\n    this.update_modal_message = update_modal_message;\n    this.last_id = 0;\n    this.params = {\n      angle: 0,\n      line_distance: 3,\n      turnaround_distance: 0,\n      reverse: false,\n      is_rtl: true,\n      alt: 3.5,\n      wind_speed: 2,\n      wind_direction: \"N\"\n    };\n    this.conture = {\n      markers: [],\n      cords: [],\n      edges: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'Polygon',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer_area: {\n        'id': \"area_conture\",\n        'type': 'fill',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'fill-color': '#008000',\n          'fill-opacity': 0.5\n        }\n      },\n      layer_line: {\n        'id': 'line_conture',\n        'type': 'line',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'line-color': '#000',\n          'line-width': 2\n        }\n      }\n    };\n    this.markup = {\n      cords: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer: {\n        'id': \"markup\",\n        'type': 'line',\n        'source': \"markup\",\n        'layout': {},\n        'paint': {\n          'line-color': '#fff',\n          'line-width': 2\n        }\n      }\n    };\n  }\n  getZoneShift() {\n    const directions = {\n      \"N\": [0, -1],\n      \"NE\": [-Math.sqrt(2) / 2, -Math.sqrt(2) / 2],\n      \"E\": [-1, 0],\n      \"SE\": [-Math.sqrt(2) / 2, Math.sqrt(2) / 2],\n      \"S\": [0, 1],\n      \"SW\": [Math.sqrt(2) / 2, Math.sqrt(2) / 2],\n      \"W\": [1, 0],\n      \"NW\": [Math.sqrt(2) / 2, -Math.sqrt(2) / 2]\n    };\n    const radius = 637100;\n    let wind_speed = Number(this.params.wind_speed) * 3600 / 1000;\n    let alt = Number(this.params.alt);\n    let wind_direction = directions[this.params.wind_direction];\n    let coord_arr = [];\n    this.conture.markers.forEach(marker => {\n      let coord_x = marker.getLngLat().lng;\n      let coord_y = marker.getLngLat().lat;\n      let delta_x = wind_speed * Math.sqrt(2 * alt / 9.81) * wind_direction[0];\n      let delta_y = wind_speed * Math.sqrt(2 * alt / 9.81) * wind_direction[1];\n      let new_coord_x = coord_x + delta_x / radius;\n      let new_coord_y = coord_y + delta_y / radius;\n      coord_arr.push([new_coord_x, new_coord_y]);\n    });\n    if (this.conture.markers.length >= 3) {\n      this.manager3D.drawShiftPolygon(coord_arr);\n    }\n  }\n  toggleCursor() {\n    if (this.translate_cursor === true) {\n      this.translate_cursor = false;\n    } else {\n      this.translate_cursor = true;\n    }\n  }\n  setStartMarker(coords) {\n    if (this.start_marker === null) {\n      this.start_marker = new mapboxgl.Marker({\n        draggable: false\n      }).setLngLat(coords).addTo(this.map);\n      let icon = document.createElement('img');\n      icon.src = takeoff_marker;\n      icon.width = 35;\n      icon.height = 35;\n      this.start_marker.getElement().querySelector(\"svg\").remove();\n      this.start_marker.getElement().append(icon);\n      let indicator = document.createElement('span');\n      indicator.className = \"mapbox_gl_active_indicator\";\n      this.start_marker.getElement().append(indicator);\n      this.start_marker.getElement().classList.add(\"takeoff\");\n      this.manager3D.addSphere([coords[0], coords[1], 0], 0);\n      this.last_id += 1;\n    } else {\n      this.start_marker.remove();\n      this.start_marker = null;\n      this.setStartMarker(coords);\n      this.manager3D.deleteObject(0);\n      this.manager3D.addSphere([coords[0], coords[1], 0], 0);\n    }\n    this.updateRouteLine();\n  }\n  changeMarkerIcon(marker, Icon, width, height) {\n    let icon = document.createElement('img');\n    icon.src = Icon;\n    icon.width = width;\n    icon.height = height;\n    marker.getElement().classList.add(\"mapboxgl-marker__polygon\");\n    marker.getElement().querySelector(\"svg\").remove();\n    marker.getElement().append(icon);\n    let indicator = document.createElement('span');\n    indicator.className = \"mapbox_gl_active_indicator\";\n    marker.getElement().append(indicator);\n  }\n  rotatePolygon(angle) {\n    ///real rotate\n    this.params.angle = Number(angle);\n    if (this.conture.cords.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n    }\n  }\n  changeLineSpacing(dist) {\n    this.params.line_distance = Number(dist);\n    if (this.conture.cords.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n    }\n  }\n  toggleRTL() {\n    if (this.params.is_rtl === true) {\n      this.params.is_rtl = false;\n    } else {\n      this.params.is_rtl = true;\n    }\n    if (this.conture.markers.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n    }\n  }\n  changeAlt(alt) {\n    this.params.alt = Number(alt);\n    if (this.conture.cords.length != 0) {\n      this.updateCenterMarker();\n      this.updateMarkup();\n      this.conture.markers.forEach(marker => {\n        this.manager3D.changeCoords(marker.id, [marker.getLngLat().lng, marker.getLngLat().lat, this.params.alt]);\n      });\n    }\n  }\n  changeWind(key, value) {\n    this.params[key] = value;\n    this.getZoneShift();\n  }\n  markupPolygon() {\n    let edges = [];\n    let cords_markup = this.rotate(this.conture.cords, 1);\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      edges.push([cords_markup[c], cords_markup[c + 1]]);\n    }\n    let pr = getProjective(cords_markup);\n    let step = getGeoCordsFromMeters(this.params.line_distance, pr.y_pr.min);\n    let steps = Math.trunc(pr.x_pr.pr / step);\n    let cords = [];\n    for (let i = 0; i < steps; i++) {\n      let x_0 = pr.x_pr.min + step * (i + 1);\n      let crossings = [];\n      let low = [1000, null];\n      let high = [-1000, null];\n      for (let j = 0; j < edges.length; j++) {\n        let A = edges[j][0];\n        let B = edges[j][1];\n        let y = (B[1] - A[1]) * (x_0 - B[0]) / (B[0] - A[0]) + B[1];\n        let min_y = Math.min(A[1], B[1]);\n        let max_y = Math.max(A[1], B[1]);\n        if (y > min_y && y < max_y) {\n          if (y > high[0]) {\n            high[0] = y;\n            high[1] = [x_0, y];\n          } else if (y < low[0]) {\n            low[0] = y;\n            low[1] = [x_0, y];\n          }\n          crossings.push([x_0, y]);\n        }\n      }\n      crossings = crossings.sort(function (a, b) {\n        return a[1] - b[1];\n      });\n      low[1] = crossings[0];\n      high[1] = crossings[crossings.length - 1];\n      low[1] = addTurnaroundDistance(low[1], this.params.turnaround_distance, false);\n      high[1] = addTurnaroundDistance(high[1], this.params.turnaround_distance, true);\n      if ((cords.length + 2) % 4 == 0) {\n        cords.push(low[1]);\n        cords.push(high[1]);\n      } else {\n        cords.push(high[1]);\n        cords.push(low[1]);\n      }\n    }\n    cords = this.rotate(cords, -1);\n    if (cords.length == 0) {\n      return this.conture.cords;\n    } else {\n      cords = cords.map(cord => {\n        return [cord[0], cord[1], this.params.alt];\n      });\n      return cords;\n    }\n  }\n  addConturePoint(coords) {\n    let cords = coords;\n    let marker = new mapboxgl.Marker({\n      draggable: true\n    }).setLngLat(cords).addTo(this.map);\n    marker.conture_index = this.conture.markers.length;\n    marker.id = this.last_id;\n    this.conture.markers.push(marker);\n    let dragContainer = e => {\n      e.marker = marker;\n      e.evt = {};\n      e.id = marker.id;\n      this.drag(e);\n    };\n    let dragEndContainer = e => {\n      e.evt = {};\n      this.dragEndCont(e);\n    };\n    let dragStartContainer = e => {\n      e.evt = {};\n      this.dragStartCont(e);\n    };\n    marker.on(\"drag\", dragContainer);\n    marker.on(\"dragend\", dragEndContainer);\n    marker.on(\"dragstart\", dragStartContainer);\n    this.changeMarkerIcon(marker, point_marker, 35, 35);\n    if (this.conture.markers.length == 1) {\n      this.conture.cords.push(cords);\n      this.conture.cords.push(cords);\n      this.conture.source.data.geometry.coordinates = [this.conture.cords];\n      this.map.addSource(\"conture\", this.conture.source);\n      // this.map.addLayer(this.conture.layer_area)\n      this.map.addLayer(this.conture.layer_line);\n    }\n    if (this.conture.markers.length > 1) {\n      this.conture.cords.pop();\n      this.conture.cords.push(cords);\n      this.conture.cords.push(this.conture.cords[0]);\n      this.conture.source.data.geometry.coordinates = [this.conture.cords];\n      this.map.getSource(\"conture\").setData(this.conture.source.data);\n    }\n    if (this.conture.markers.length == 3) {\n      this.center_marker = new mapboxgl.Marker({\n        draggable: true\n      });\n      this.changeMarkerIcon(this.center_marker, icon_center, 25, 25);\n      let cords = [0, 0];\n      for (let c = 0; c < this.conture.cords.length - 1; c++) {\n        cords[0] += this.conture.cords[c][0];\n        cords[1] += this.conture.cords[c][1];\n      }\n      cords = [cords[0] / (this.conture.cords.length - 1), cords[1] / (this.conture.cords.length - 1)];\n      this.center_marker.setLngLat(cords).addTo(this.map);\n      this.container__dragStartCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragStartCenterMarker(e);\n      };\n      this.container__dragCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragCenterMarker(e);\n      };\n      this.container__dragEndStartCenterMarker = e => {\n        e.mapElement = this;\n        e.marker = this.center_marker;\n        e.evt = this.data;\n        this.dragEndStartCenterMarker(e);\n      };\n      this.center_marker.on(\"dragstart\", this.container__dragStartCenterMarker);\n      this.center_marker.on(\"drag\", this.container__dragCenterMarker);\n      this.center_marker.on(\"dragend\", this.container__dragEndStartCenterMarker);\n      let cords_markup = this.markupPolygon();\n      this.markup.cords = cords_markup;\n    }\n    if (this.conture.markers.length >= 3) {\n      let cords_markup = this.markupPolygon();\n      this.markup.cords = cords_markup;\n      this.updateRouteLine();\n      // console.log(\"conture\", this.conture.source.data.geometry)\n    }\n\n    ///add sphere\n    this.manager3D.addSphere([coords[0], coords[1], this.params.alt], marker.id);\n    this.last_id += 1;\n  }\n  rotate(cords, factor) {\n    let centerCords = this.center_marker.getLngLat();\n    centerCords = [centerCords.lng, centerCords.lat];\n    let rotated_cords = rotateFigureCenter(cords, centerCords, factor * this.params.angle);\n    return rotated_cords;\n  }\n  isValid() {\n    let edges = [];\n    let cords_markup = this.rotate(this.conture.cords, 1);\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      edges.push([cords_markup[c], cords_markup[c + 1]]);\n    }\n    let pr = getProjective(cords_markup);\n    let step = getGeoCordsFromMeters(this.params.line_distance, pr.y_pr.min);\n    let steps = Math.trunc(pr.x_pr.pr / step);\n    if (1 > steps) return false;else return true;\n  }\n  updateMarkup() {\n    this.markup.cords = this.markupPolygon();\n    this.markup.source.data.geometry.coordinates = this.markup.cords;\n    this.updateRouteLine();\n  }\n  updatePolygonPosition() {\n    this.conture.source.data.geometry.coordinates = [this.conture.cords];\n    this.map.getSource(\"conture\").setData(this.conture.source.data);\n    this.updateMarkup();\n  }\n  dragStartCenterMarker(e) {\n    // e.evt.route.tbManager.resetCollisionObjects()\n    let center_cords = e.marker.getLngLat();\n    e.marker.diff = [];\n    for (let cords of this.conture.cords) {\n      e.marker.diff.push([cords[0] - center_cords.lng, cords[1] - center_cords.lat]);\n    }\n  }\n  dragCenterMarker(e) {\n    let center_cords = e.marker.getLngLat();\n    for (let c = 0; c < this.conture.markers.length; c++) {\n      let changed_cords = [e.marker.diff[c][0] + center_cords.lng, e.marker.diff[c][1] + center_cords.lat];\n      this.conture.cords[c] = changed_cords;\n      if (c == 0) {\n        this.conture.cords[this.conture.cords.length - 1] = changed_cords;\n      }\n      this.conture.markers[c].setLngLat(changed_cords);\n    }\n    this.conture.markers.forEach(marker => {\n      this.manager3D.changeCoords(marker.id, [marker.getLngLat().lng, marker.getLngLat().lat, this.params.alt]);\n    });\n    // this.manager3D.changeSphereCoords(0, 0)\n    // this.conture.cords.slice(0, this.conture.cords.length-1).forEach((cords, index) => {\n    //   this.manager3D.sphereArr[index+1].object.setCoords(cords)\n    // })\n    this.updatePolygonPosition();\n    this.updateMarkup();\n  }\n  dragEndStartCenterMarker(e) {\n    e.marker.diff = [];\n  }\n  drag(e) {\n    let cords = e.marker.getLngLat();\n    let before_cords = this.conture.cords[e.marker.conture_index];\n    this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat];\n    if (!this.isValid()) {\n      this.conture.cords[e.marker.conture_index] = before_cords;\n      e.marker.setLngLat(before_cords);\n      return;\n    }\n    this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat];\n    if (e.marker.conture_index == 0) {\n      this.conture.cords[this.conture.cords.length - 1] = [cords.lng, cords.lat];\n    }\n    this.conture.source.data.geometry.coordinates = [this.conture.cords];\n    this.map.getSource(\"conture\").setData(this.conture.source.data);\n    this.updateCenterMarker();\n    this.updateMarkup();\n\n    //change coords of sphere\n    this.manager3D.changeCoords(e.id, [cords.lng, cords.lat, this.params.alt]);\n  }\n  dragStartCont(e) {}\n  dragEndCont(e) {}\n  dragEnd(e) {}\n  updateCenterMarker() {\n    let cords = [0, 0];\n    for (let c = 0; c < this.conture.cords.length - 1; c++) {\n      cords[0] += this.conture.cords[c][0];\n      cords[1] += this.conture.cords[c][1];\n    }\n    cords = [cords[0] / (this.conture.cords.length - 1), cords[1] / (this.conture.cords.length - 1)];\n    this.center_marker.setLngLat(cords);\n  }\n  updateRouteLine() {\n    this.getZoneShift();\n    let route = [];\n    if (this.params.is_rtl === true) {\n      route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat, 0]].concat(this.markup.cords).concat([[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat, 0]]);\n    } else {\n      route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat, 0]].concat(this.markup.cords);\n    }\n    if (this.conture.markers.length >= 3) {\n      this.manager3D.unitSpheres(route);\n      this.manager3D.sphereArr[0].object.set({});\n    }\n  }\n  setPolygon(coords) {\n    if (this.start_marker === null) {\n      this.update_modal_message({\n        active: true,\n        heading: \"Ошибка\",\n        message: \"Сначала добавьте точку старта\"\n      });\n    } else {\n      this.addConturePoint(coords);\n    }\n  }\n  deletePolygon() {\n    if (this.map.getSource(\"conture\")) {\n      this.map.removeLayer(\"line_conture\");\n      this.map.removeSource(\"conture\");\n      this.conture.markers.forEach(marker => {\n        marker.remove();\n      });\n      this.center_marker.remove();\n      this.manager3D.deletePolygon();\n    }\n    this.conture = {\n      markers: [],\n      cords: [],\n      edges: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'Polygon',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer_line: {\n        'id': 'line_conture',\n        'type': 'line',\n        'source': \"conture\",\n        'layout': {},\n        'paint': {\n          'line-color': '#000',\n          'line-width': 2\n        }\n      }\n    };\n    this.markup = {\n      cords: [],\n      source: {\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': [[]]\n          }\n        }\n      },\n      layer: {\n        'id': \"markup\",\n        'type': 'line',\n        'source': \"markup\",\n        'layout': {},\n        'paint': {\n          'line-color': '#fff',\n          'line-width': 2\n        }\n      }\n    };\n  }\n}","map":{"version":3,"names":["takeoff_marker","point_marker","icon_center","mapboxgl","SprayManager3d","rotateFigureCenter","cords","center","phi","Math","PI","rotatedFigure","pair","x","y","x_rot","cos","sin","y_rot","push","addTurnaroundDistance","distance","direction","turnaround_distance_y","getGeoCordsFromMeters","cortej","getProjective","map","x_projection","min","max","pr","y_projection","x_pr","y_pr","m","min_lng","step","km_ekv","step_deg","MapManager","constructor","manager3D","update_modal_message","default_","translate_cursor","start_marker","last_id","params","angle","line_distance","turnaround_distance","reverse","is_rtl","alt","wind_speed","wind_direction","conture","markers","edges","source","layer_area","layer_line","markup","layer","getZoneShift","directions","sqrt","radius","Number","coord_arr","forEach","marker","coord_x","getLngLat","lng","coord_y","lat","delta_x","delta_y","new_coord_x","new_coord_y","length","drawShiftPolygon","toggleCursor","setStartMarker","coords","Marker","draggable","setLngLat","addTo","icon","document","createElement","src","width","height","getElement","querySelector","remove","append","indicator","className","classList","add","addSphere","deleteObject","updateRouteLine","changeMarkerIcon","Icon","rotatePolygon","updateCenterMarker","updateMarkup","changeLineSpacing","dist","toggleRTL","changeAlt","changeCoords","id","changeWind","key","value","markupPolygon","cords_markup","rotate","c","steps","trunc","i","x_0","crossings","low","high","j","A","B","min_y","max_y","sort","a","b","cord","addConturePoint","conture_index","dragContainer","e","evt","drag","dragEndContainer","dragEndCont","dragStartContainer","dragStartCont","on","data","geometry","coordinates","addSource","addLayer","pop","getSource","setData","center_marker","container__dragStartCenterMarker","mapElement","dragStartCenterMarker","container__dragCenterMarker","dragCenterMarker","container__dragEndStartCenterMarker","dragEndStartCenterMarker","factor","centerCords","rotated_cords","isValid","updatePolygonPosition","center_cords","diff","changed_cords","before_cords","dragEnd","route","concat","unitSpheres","sphereArr","object","set","setPolygon","active","heading","message","deletePolygon","removeLayer","removeSource"],"sources":["/Users/mihailbaleev/Documents/GitHub/Lastochka_spraying/frontend/src/Spraying/MapManager.js"],"sourcesContent":["import takeoff_marker from \"./img/takeoff_marker.png\";\nimport point_marker from \"./img/point_marker.png\";\nimport icon_center from \"./img/icon_center.png\";\nimport mapboxgl from 'mapbox-gl';\nimport { SprayManager3d } from \"./manager3D\";\n\nfunction rotateFigureCenter(cords, center, phi){\n    phi = phi*Math.PI/180\n    let rotatedFigure = []\n    for(let pair of cords){\n      let x = pair[0]-center[0]\n      let y = pair[1]-center[1]\n      let x_rot = x*Math.cos(phi) - y*Math.sin(phi)\n      let y_rot = x*Math.sin(phi) + y*Math.cos(phi)\n      rotatedFigure.push([\n        x_rot+center[0], y_rot+center[1]\n      ])\n    }\n    return rotatedFigure\n}\n\nfunction addTurnaroundDistance(cords, distance, direction){\n  let turnaround_distance_y = getGeoCordsFromMeters(distance, cords[1])\n  let cortej = []\n  if(direction == true){\n    cortej = [cords[0], cords[1]+turnaround_distance_y]\n  }\n  else{\n    cortej = [cords[0], cords[1]-turnaround_distance_y]\n  }\n  return cortej\n}\n\nfunction getProjective(cords){\n  let x = cords.map(x=>x[0])\n  let y = cords.map(x=>x[1])\n\n  let x_projection = {\n      min:0,\n      max:0,\n      pr:0\n  }\n  let y_projection = {\n      min:0,\n      max:0,\n      pr:0\n  }\n\n  x_projection.min = Math.min(...x)\n  x_projection.max = Math.max(...x)\n  x_projection.pr = x_projection.max - x_projection.min\n  \n  y_projection.min = Math.min(...y)\n  y_projection.max = Math.max(...y)\n  y_projection.pr = y_projection.max - y_projection.min\n\n  return {x_pr:x_projection, y_pr:y_projection}\n}\n\nfunction getGeoCordsFromMeters(m, min_lng){\n  let step = m/1000\n  const km_ekv = 40075.696/360\n  let step_deg = step/(km_ekv*Math.cos(Math.PI*min_lng/180))\n  return step_deg\n}\n\nexport class MapManager{\n  constructor(map, manager3D, update_modal_message, default_){\n    this.map = map \n    this.manager3D = new SprayManager3d(manager3D)\n    this.translate_cursor = false \n    this.start_marker = null\n    this.update_modal_message = update_modal_message\n    this.last_id = 0\n    this.params = {\n      angle: 0,\n      line_distance: 3,\n      turnaround_distance: 0,\n      reverse: false,\n      is_rtl: true,\n      alt: 3.5,\n      wind_speed: 2,\n      wind_direction: \"N\"\n    }\n    \n\n    this.conture = {\n        markers:[],\n        cords:[],\n        edges:[],\n        source:{\n          'type': 'geojson',\n          'data': {\n            'type': 'Feature',\n            'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                []\n              ]\n            }\n          }\n        },\n        layer_area:{\n          'id': \"area_conture\",\n          'type': 'fill',\n          'source': \"conture\",\n          'layout': {},\n          'paint': {\n            'fill-color': '#008000',\n            'fill-opacity': 0.5\n            }\n          },\n        layer_line:{\n            'id': 'line_conture',\n            'type': 'line',\n            'source': \"conture\",\n            'layout': {},\n            'paint': {\n              'line-color': '#000',\n              'line-width': 2\n            }\n        }\n    }\n    this.markup = {\n        cords:[],\n        source:{\n          'type': 'geojson',\n          'data': {\n            'type': 'Feature',\n            'geometry': {\n            'type': 'LineString',\n            'coordinates': [\n                []\n              ]\n            }\n          }\n        },\n        layer:{\n          'id': \"markup\",\n          'type': 'line',\n          'source': \"markup\",\n          'layout': {},\n          'paint': {\n          'line-color': '#fff',\n          'line-width': 2\n          }\n        }\n    };\n  }\n\n  getZoneShift(){\n    const directions = {\"N\": [0, -1], \"NE\": [-Math.sqrt(2)/2,-Math.sqrt(2)/2], \"E\": [-1, 0], \"SE\": [-Math.sqrt(2)/2, Math.sqrt(2)/2], \"S\": [0,1], \"SW\": [Math.sqrt(2)/2,Math.sqrt(2)/2], \"W\": [1,0], \"NW\": [Math.sqrt(2)/2,-Math.sqrt(2)/2]}\n    const radius = 637100\n    let wind_speed = Number(this.params.wind_speed)*3600/1000\n    let alt = Number(this.params.alt)\n    let wind_direction = directions[this.params.wind_direction]\n    let coord_arr = []\n    this.conture.markers.forEach(marker => {\n      let coord_x = marker.getLngLat().lng\n      let coord_y = marker.getLngLat().lat\n      let delta_x = wind_speed*Math.sqrt(2*alt/9.81)*wind_direction[0]\n      let delta_y = wind_speed*Math.sqrt(2*alt/9.81)*wind_direction[1]\n      let new_coord_x = coord_x + delta_x/radius\n      let new_coord_y = coord_y + delta_y/radius\n      coord_arr.push([new_coord_x, new_coord_y])\n    })\n    if (this.conture.markers.length >= 3){\n      this.manager3D.drawShiftPolygon(coord_arr)\n    }\n  }\n\n  toggleCursor(){\n    if (this.translate_cursor === true){\n      this.translate_cursor = false \n    }else{\n      this.translate_cursor = true\n    }\n  }\n\n  setStartMarker(coords){\n    if (this.start_marker === null){\n      this.start_marker = new mapboxgl.Marker({draggable: false}).setLngLat(coords).addTo(this.map)\n      let icon = document.createElement('img');\n      icon.src = takeoff_marker;\n      icon.width = 35\n      icon.height = 35\n      this.start_marker.getElement().querySelector(\"svg\").remove()\n      this.start_marker.getElement().append(icon)\n      let indicator = document.createElement('span');\n      indicator.className = \"mapbox_gl_active_indicator\"\n      this.start_marker.getElement().append(indicator)\n      this.start_marker.getElement().classList.add(\"takeoff\")\n      this.manager3D.addSphere([coords[0], coords[1], 0], 0)\n      this.last_id += 1\n    }else{\n      this.start_marker.remove()\n      this.start_marker = null\n      this.setStartMarker(coords)\n      this.manager3D.deleteObject(0)\n      this.manager3D.addSphere([coords[0], coords[1], 0], 0)\n    }\n    this.updateRouteLine()\n  }\n\n  changeMarkerIcon(marker, Icon, width, height) {\n    let icon = document.createElement('img');\n    icon.src = Icon;\n    icon.width = width\n    icon.height = height\n    marker.getElement().classList.add(\"mapboxgl-marker__polygon\")\n    marker.getElement().querySelector(\"svg\").remove()\n    marker.getElement().append(icon)\n    let indicator = document.createElement('span');\n    indicator.className = \"mapbox_gl_active_indicator\"\n    marker.getElement().append(indicator)\n  }\n\n  rotatePolygon(angle){ ///real rotate\n    this.params.angle = Number(angle)\n    if (this.conture.cords.length != 0){\n      this.updateCenterMarker()\n      this.updateMarkup()\n    }\n  }\n  changeLineSpacing(dist){\n    this.params.line_distance = Number(dist)\n    if (this.conture.cords.length != 0){\n      this.updateCenterMarker()\n      this.updateMarkup()\n    }\n  }\n  toggleRTL(){\n    if (this.params.is_rtl === true){\n      this.params.is_rtl = false\n    }else{\n      this.params.is_rtl = true \n    }\n    if (this.conture.markers.length != 0){\n      this.updateCenterMarker()\n      this.updateMarkup()\n    }\n  }\n  changeAlt(alt){\n    this.params.alt = Number(alt) \n    if (this.conture.cords.length != 0){\n      this.updateCenterMarker()\n      this.updateMarkup()\n      this.conture.markers.forEach(marker => {\n        this.manager3D.changeCoords(marker.id, [marker.getLngLat().lng, marker.getLngLat().lat, this.params.alt])\n      })\n    }\n  }\n  changeWind(key, value){\n    this.params[key] = value \n    this.getZoneShift()\n  }\n\n  markupPolygon(){\n    let edges = []\n    let cords_markup = this.rotate(this.conture.cords, 1)\n    for(let c = 0; c < this.conture.cords.length-1; c++){\n      edges.push([cords_markup[c], cords_markup[c+1]])\n    }\n    let pr = getProjective(cords_markup)\n    let step = getGeoCordsFromMeters(this.params.line_distance, pr.y_pr.min)\n    let steps = Math.trunc(pr.x_pr.pr/step)\n    let cords = []\n    for(let i = 0; i < steps; i++){\n      let x_0 = pr.x_pr.min+step*(i+1)\n      let crossings = []\n      let low = [1000, null];\n      let high = [-1000, null];\n      for(let j = 0; j < edges.length; j++){\n          let A = edges[j][0]\n          let B = edges[j][1]\n          let y = (B[1]-A[1])*(x_0-B[0])/(B[0]-A[0])+B[1]\n          let min_y = Math.min(A[1],B[1])\n          let max_y = Math.max(A[1],B[1])\n          if(y>min_y && y< max_y){\n            if(y>high[0]){\n              high[0] = y\n              high[1] = [x_0, y]\n            }\n            else if(y<low[0]){\n              low[0] = y\n              low[1] = [x_0, y]\n            }\n            crossings.push([x_0, y])\n          }\n      }\n      crossings = crossings.sort(function(a, b){return a[1]-b[1]})\n\n      low[1] = crossings[0]\n      high[1] = crossings[crossings.length-1]\n\n      low[1] = addTurnaroundDistance(low[1], this.params.turnaround_distance, false)\n      high[1] = addTurnaroundDistance(high[1], this.params.turnaround_distance, true)\n      if((cords.length+2)%4 == 0){\n        cords.push(low[1])\n        cords.push(high[1])\n      }\n      else{\n        cords.push(high[1])\n        cords.push(low[1])\n      }\n    }\n    cords = this.rotate(cords, -1)\n    if (cords.length == 0){\n      return this.conture.cords\n    }else{\n      cords = cords.map(cord => {return [cord[0], cord[1], this.params.alt]})\n      return cords\n    }\n  }\n\n  addConturePoint(coords){\n      let cords = coords;\n      let marker = new mapboxgl.Marker(\n          {\n              draggable: true\n          }\n      ).setLngLat(cords).addTo(this.map);\n      marker.conture_index = this.conture.markers.length;\n      marker.id = this.last_id\n      this.conture.markers.push(marker)\n      let dragContainer = (e) => {e.marker = marker; e.evt = {}; e.id=marker.id; this.drag(e)}\n      let dragEndContainer = (e) => {e.evt = {}; this.dragEndCont(e)}\n      let dragStartContainer = (e) => {e.evt = {}; this.dragStartCont(e)}\n      marker.on(\"drag\", dragContainer)\n      marker.on(\"dragend\", dragEndContainer)\n      marker.on(\"dragstart\", dragStartContainer)\n      this.changeMarkerIcon(marker, point_marker, 35, 35)\n      if(this.conture.markers.length == 1){\n        this.conture.cords.push(cords)\n        this.conture.cords.push(cords)\n        this.conture.source.data.geometry.coordinates = [this.conture.cords]\n        this.map.addSource(\"conture\", this.conture.source)\n        // this.map.addLayer(this.conture.layer_area)\n        this.map.addLayer(this.conture.layer_line)\n      }\n      if(this.conture.markers.length > 1){\n          this.conture.cords.pop()\n          this.conture.cords.push(cords)\n          this.conture.cords.push(this.conture.cords[0])\n          this.conture.source.data.geometry.coordinates = [this.conture.cords]\n          this.map.getSource(\"conture\").setData(this.conture.source.data)\n      }\n      if(this.conture.markers.length == 3){\n        this.center_marker = new mapboxgl.Marker({\n          draggable:true\n        })\n        this.changeMarkerIcon(this.center_marker, icon_center, 25, 25)\n        let cords = [0,0]\n        for(let c = 0; c < this.conture.cords.length-1; c++){\n          cords[0] += this.conture.cords[c][0]\n          cords[1] += this.conture.cords[c][1]\n        }\n        cords = [cords[0]/(this.conture.cords.length-1), cords[1]/(this.conture.cords.length-1)]\n        this.center_marker.setLngLat(cords).addTo(this.map);\n\n        this.container__dragStartCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragStartCenterMarker(e)}\n        this.container__dragCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragCenterMarker(e)}\n        this.container__dragEndStartCenterMarker = (e) => {e.mapElement = this; e.marker = this.center_marker; e.evt = this.data; this.dragEndStartCenterMarker(e)}\n    \n        this.center_marker.on(\"dragstart\", this.container__dragStartCenterMarker)\n        this.center_marker.on(\"drag\", this.container__dragCenterMarker)\n        this.center_marker.on(\"dragend\", this.container__dragEndStartCenterMarker)\n        let cords_markup = this.markupPolygon()\n        this.markup.cords = cords_markup\n      }\n      if (this.conture.markers.length >= 3){\n        let cords_markup = this.markupPolygon()\n        this.markup.cords = cords_markup\n        this.updateRouteLine()\n        // console.log(\"conture\", this.conture.source.data.geometry)\n      }\n\n    ///add sphere\n    this.manager3D.addSphere([coords[0], coords[1], this.params.alt], marker.id)\n    this.last_id += 1\n  }\n\n  rotate(cords, factor){\n    let centerCords = this.center_marker.getLngLat()\n    centerCords = [centerCords.lng, centerCords.lat]\n    let rotated_cords = rotateFigureCenter(cords, centerCords, factor*this.params.angle)\n    return rotated_cords\n  }\n  isValid(){\n    let edges = []\n    let cords_markup = this.rotate(this.conture.cords, 1)\n    for(let c = 0; c < this.conture.cords.length-1; c++){\n      edges.push([cords_markup[c], cords_markup[c+1]])\n    }\n    let pr = getProjective(cords_markup)\n    let step = getGeoCordsFromMeters(this.params.line_distance, pr.y_pr.min)\n    let steps = Math.trunc(pr.x_pr.pr/step)\n    if(1 > steps) return false\n    else return true\n  }\n\n  updateMarkup(){\n    this.markup.cords = this.markupPolygon()\n    this.markup.source.data.geometry.coordinates = this.markup.cords\n    this.updateRouteLine()\n  }\n\n  updatePolygonPosition(){\n    this.conture.source.data.geometry.coordinates = [this.conture.cords]\n    this.map.getSource(\"conture\").setData(this.conture.source.data)\n    this.updateMarkup()\n  }\n\n  dragStartCenterMarker(e){\n    // e.evt.route.tbManager.resetCollisionObjects()\n    let center_cords = e.marker.getLngLat()\n    e.marker.diff = []\n    for(let cords of this.conture.cords){\n      e.marker.diff.push(\n        [cords[0]-center_cords.lng, cords[1]-center_cords.lat]\n      )\n    }\n  }\n  dragCenterMarker(e){\n    let center_cords = e.marker.getLngLat()\n    for(let c = 0; c < this.conture.markers.length; c++){\n      let changed_cords = [e.marker.diff[c][0]+center_cords.lng, e.marker.diff[c][1]+center_cords.lat]\n      this.conture.cords[c] = changed_cords\n      if(c == 0){\n        this.conture.cords[this.conture.cords.length-1] = changed_cords\n      }\n      this.conture.markers[c].setLngLat(changed_cords)\n    }\n    this.conture.markers.forEach(marker => {\n      this.manager3D.changeCoords(marker.id, [marker.getLngLat().lng, marker.getLngLat().lat, this.params.alt])\n    })\n    // this.manager3D.changeSphereCoords(0, 0)\n    // this.conture.cords.slice(0, this.conture.cords.length-1).forEach((cords, index) => {\n    //   this.manager3D.sphereArr[index+1].object.setCoords(cords)\n    // })\n    this.updatePolygonPosition()\n    this.updateMarkup()\n  }\n  dragEndStartCenterMarker(e){\n    e.marker.diff = []\n  }\n  drag(e){\n    let cords = e.marker.getLngLat()\n    let before_cords = this.conture.cords[e.marker.conture_index]\n    this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat]\n    if(!this.isValid()){\n      this.conture.cords[e.marker.conture_index] = before_cords\n      e.marker.setLngLat(before_cords)\n      return\n    }\n\n    this.conture.cords[e.marker.conture_index] = [cords.lng, cords.lat]\n    if(e.marker.conture_index == 0){\n      this.conture.cords[this.conture.cords.length-1] = [cords.lng, cords.lat]\n    }\n    this.conture.source.data.geometry.coordinates = [this.conture.cords]\n    this.map.getSource(\"conture\").setData(this.conture.source.data)\n    this.updateCenterMarker()\n    this.updateMarkup()\n\n    //change coords of sphere\n    this.manager3D.changeCoords(e.id, [cords.lng, cords.lat, this.params.alt])\n  }\n  dragStartCont(e){\n    \n  }\n  dragEndCont(e){\n    \n  }\n  dragEnd(e){\n    \n  }\n\n  updateCenterMarker(){\n    let cords = [0,0]\n    for(let c = 0; c < this.conture.cords.length-1; c++){\n      cords[0] += this.conture.cords[c][0]\n      cords[1] += this.conture.cords[c][1]\n    }\n    cords = [cords[0]/(this.conture.cords.length-1), cords[1]/(this.conture.cords.length-1)]\n    this.center_marker.setLngLat(cords)\n  }\n\n  updateRouteLine(){\n    this.getZoneShift()\n    let route = []\n    if (this.params.is_rtl === true){\n      route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat, 0]].concat(this.markup.cords).concat([[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat, 0]])\n    }else{\n      route = [[this.start_marker.getLngLat().lng, this.start_marker.getLngLat().lat, 0]].concat(this.markup.cords)\n    }   \n    if (this.conture.markers.length >= 3){\n      this.manager3D.unitSpheres(route)\n      this.manager3D.sphereArr[0].object.set({})\n    }\n  }\n\n  setPolygon(coords){\n    if (this.start_marker === null){\n      this.update_modal_message({active: true, heading: \"Ошибка\", message: \"Сначала добавьте точку старта\"})\n    }else{\n      this.addConturePoint(coords)\n    }\n  }\n  deletePolygon(){\n    if (this.map.getSource(\"conture\")){\n      this.map.removeLayer(\"line_conture\")\n      this.map.removeSource(\"conture\")  \n      this.conture.markers.forEach(marker => {\n        marker.remove()\n      })\n      this.center_marker.remove()\n      this.manager3D.deletePolygon()\n    }\n    this.conture = {\n      markers:[],\n      cords:[],\n      edges:[],\n      source:{\n        'type': 'geojson',\n        'data': {\n          'type': 'Feature',\n          'geometry': {\n          'type': 'Polygon',\n          'coordinates': [\n              []\n            ]\n          }\n        }\n      },\n      layer_line:{\n          'id': 'line_conture',\n          'type': 'line',\n          'source': \"conture\",\n          'layout': {},\n          'paint': {\n          'line-color': '#000',\n          'line-width': 2\n          }\n      }\n    }\n    this.markup = {\n        cords:[],\n        source:{\n          'type': 'geojson',\n          'data': {\n            'type': 'Feature',\n            'geometry': {\n            'type': 'LineString',\n            'coordinates': [\n                []\n              ]\n            }\n          }\n        },\n        layer:{\n          'id': \"markup\",\n          'type': 'line',\n          'source': \"markup\",\n          'layout': {},\n          'paint': {\n          'line-color': '#fff',\n          'line-width': 2\n          }\n        }\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}